<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SilDev.CSharpLib64</name>
    </assembly>
    <members>
        <member name="T:SilDev.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:SilDev.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:SilDev.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:SilDev.Properties.Resources.BackupFormat">
            <summary>
              Looks up a localized string similar to {0}-{{1}}.backup.
            </summary>
        </member>
        <member name="P:SilDev.Properties.Resources.DimEmptyImage">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:SilDev.Properties.Resources.SearchImage">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:SilDev.Properties.Resources.SizeGripImage">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:SilDev.Properties.Resources.TempDirFormat">
            <summary>
              Looks up a localized string similar to %TEMP%\tmp-{0}.
            </summary>
        </member>
        <member name="T:SilDev.Properties.ExceptionMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:SilDev.Properties.ExceptionMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:SilDev.Properties.ExceptionMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:SilDev.Properties.ExceptionMessages.ArgumentInvalid">
            <summary>
              Looks up a localized string similar to Argument is invalid..
            </summary>
        </member>
        <member name="P:SilDev.Properties.ExceptionMessages.ArgumentInvalidParam">
            <summary>
              Looks up a localized string similar to Argument &apos;{0}&apos; is invalid..
            </summary>
        </member>
        <member name="P:SilDev.Properties.ExceptionMessages.AssemblyNotFound">
            <summary>
              Looks up a localized string similar to The required assembly could not be found..
            </summary>
        </member>
        <member name="P:SilDev.Properties.ExceptionMessages.AsyncDownloadIsBusy">
            <summary>
              Looks up a localized string similar to Async file download is already busy, multiple calls are not allowed..
            </summary>
        </member>
        <member name="P:SilDev.Properties.ExceptionMessages.BadCharsInPath">
            <summary>
              Looks up a localized string similar to The path contains invalid characters..
            </summary>
        </member>
        <member name="P:SilDev.Properties.ExceptionMessages.BytesReadFailed">
            <summary>
              Looks up a localized string similar to Reading has been failed. - Bytes Read: .
            </summary>
        </member>
        <member name="P:SilDev.Properties.ExceptionMessages.BytesWriteFailed">
            <summary>
              Looks up a localized string similar to Writing has been failed. - Bytes Written: .
            </summary>
        </member>
        <member name="P:SilDev.Properties.ExceptionMessages.CharsInStreamAreInvalid">
            <summary>
              Looks up a localized string similar to The input stream contains invalid characters..
            </summary>
        </member>
        <member name="P:SilDev.Properties.ExceptionMessages.ConsecutiveSeparatorsInPath">
            <summary>
              Looks up a localized string similar to The path cannot contain several consecutive separators. - Path: .
            </summary>
        </member>
        <member name="P:SilDev.Properties.ExceptionMessages.DestPathNotValid">
            <summary>
              Looks up a localized string similar to The destination path is invalid..
            </summary>
        </member>
        <member name="P:SilDev.Properties.ExceptionMessages.DirLengthIsTooLong">
            <summary>
              Looks up a localized string similar to The directory name is longer than 248 characters. - Path: .
            </summary>
        </member>
        <member name="P:SilDev.Properties.ExceptionMessages.FollowingCharCodeIsInvalid">
            <summary>
              Looks up a localized string similar to The following character code is invalid: .
            </summary>
        </member>
        <member name="P:SilDev.Properties.ExceptionMessages.IniValueNotFound">
            <summary>
              Looks up a localized string similar to The value is not defined.
              Section: &apos;{1}&apos;
              Key: &apos;{0}&apos;
              FileOrContent: &apos;{2}&apos;.
            </summary>
        </member>
        <member name="P:SilDev.Properties.ExceptionMessages.InvalidDriveInPath">
            <summary>
              Looks up a localized string similar to The path does not contain a valid drive. - Path: .
            </summary>
        </member>
        <member name="P:SilDev.Properties.ExceptionMessages.LastBlockIsSingleByte">
            <summary>
              Looks up a localized string similar to The last block cannot be a single byte..
            </summary>
        </member>
        <member name="P:SilDev.Properties.ExceptionMessages.MemoryAccess">
            <summary>
              Looks up a localized string similar to Unable to access to the specified area of the memory..
            </summary>
        </member>
        <member name="P:SilDev.Properties.ExceptionMessages.MultipleCalls">
            <summary>
              Looks up a localized string similar to Multiple calls are not supported..
            </summary>
        </member>
        <member name="P:SilDev.Properties.ExceptionMessages.NetworkInterfacesNotFound">
            <summary>
              Looks up a localized string similar to No network interfaces available..
            </summary>
        </member>
        <member name="P:SilDev.Properties.ExceptionMessages.NewPrincipalNameTooLong">
            <summary>
              Looks up a localized string similar to The new principal name cannot be longer than the original one..
            </summary>
        </member>
        <member name="P:SilDev.Properties.ExceptionMessages.NoDriveInPath">
            <summary>
              Looks up a localized string similar to The path does not contain any drive. - Path: .
            </summary>
        </member>
        <member name="P:SilDev.Properties.ExceptionMessages.NoProcessWithDuplicatedToken">
            <summary>
              Looks up a localized string similar to Unable to create a new process with the duplicated token..
            </summary>
        </member>
        <member name="P:SilDev.Properties.ExceptionMessages.PathHasInvalidPrefix">
            <summary>
              Looks up a localized string similar to The &quot;{0}&quot; prefix is not supported. - Path: {1}.
            </summary>
        </member>
        <member name="P:SilDev.Properties.ExceptionMessages.PathHasInvalidSeparators">
            <summary>
              Looks up a localized string similar to The path does not contain a valid separator. - Path: .
            </summary>
        </member>
        <member name="P:SilDev.Properties.ExceptionMessages.PathHasNoSeparators">
            <summary>
              Looks up a localized string similar to The path does not contain any separator. - Path: .
            </summary>
        </member>
        <member name="P:SilDev.Properties.ExceptionMessages.PathLengthIsTooLong">
            <summary>
              Looks up a localized string similar to The specified path is longer than 260 characters. - Path: .
            </summary>
        </member>
        <member name="P:SilDev.Properties.ExceptionMessages.PathLengthIsTooLow">
            <summary>
              Looks up a localized string similar to The path length is lower than 3 characters. - Path: .
            </summary>
        </member>
        <member name="P:SilDev.Properties.ExceptionMessages.PathNotFound">
            <summary>
              Looks up a localized string similar to Unable to find the target from the specified path..
            </summary>
        </member>
        <member name="P:SilDev.Properties.ExceptionMessages.PathNotFoundTarget">
            <summary>
              Looks up a localized string similar to Target &apos;{0}&apos; could not be found..
            </summary>
        </member>
        <member name="P:SilDev.Properties.ExceptionMessages.PathSegmentLengthIsTooLong">
            <summary>
              Looks up a localized string similar to A segment of the path is longer than 255 characters. - Path: .
            </summary>
        </member>
        <member name="P:SilDev.Properties.ExceptionMessages.PrivilegeValueAccess">
            <summary>
              Looks up a localized string similar to Privilege value could not be retrieved..
            </summary>
        </member>
        <member name="P:SilDev.Properties.ExceptionMessages.PseudoHandleNotFound">
            <summary>
              Looks up a localized string similar to The pseudo handle could not be retrieved..
            </summary>
        </member>
        <member name="P:SilDev.Properties.ExceptionMessages.PseudoHandleTokenAccess">
            <summary>
              Looks up a localized string similar to Unable to open the token for the pseudo handle..
            </summary>
        </member>
        <member name="P:SilDev.Properties.ExceptionMessages.ReadOnlyCollection">
            <summary>
              Looks up a localized string similar to Collection is read-only..
            </summary>
        </member>
        <member name="P:SilDev.Properties.ExceptionMessages.SCManagerConnectionCanceled">
            <summary>
              Looks up a localized string similar to Could not connect to service control manager..
            </summary>
        </member>
        <member name="P:SilDev.Properties.ExceptionMessages.SequenceIsEmpty">
            <summary>
              Looks up a localized string similar to Sequence contains no elements..
            </summary>
        </member>
        <member name="P:SilDev.Properties.ExceptionMessages.ServiceAccessFailed">
            <summary>
              Looks up a localized string similar to Service could not be accessed..
            </summary>
        </member>
        <member name="P:SilDev.Properties.ExceptionMessages.ServiceInstallationCanceled">
            <summary>
              Looks up a localized string similar to Failed to install service..
            </summary>
        </member>
        <member name="P:SilDev.Properties.ExceptionMessages.ServiceNotFound">
            <summary>
              Looks up a localized string similar to Service not installed..
            </summary>
        </member>
        <member name="P:SilDev.Properties.ExceptionMessages.ServiceStartCanceled">
            <summary>
              Looks up a localized string similar to Service could not be started..
            </summary>
        </member>
        <member name="P:SilDev.Properties.ExceptionMessages.ServiceStatusQueryFailed">
            <summary>
              Looks up a localized string similar to Service status could not be queried..
            </summary>
        </member>
        <member name="P:SilDev.Properties.ExceptionMessages.ServiceUninstallCanceled">
            <summary>
              Looks up a localized string similar to Service could not be deleted. - Error: .
            </summary>
        </member>
        <member name="P:SilDev.Properties.ExceptionMessages.ShellPidNotFound">
            <summary>
              Looks up a localized string similar to Unable to identifier the shell process..
            </summary>
        </member>
        <member name="P:SilDev.Properties.ExceptionMessages.ShellProcessAccess">
            <summary>
              Looks up a localized string similar to Unable to open the shell process object..
            </summary>
        </member>
        <member name="P:SilDev.Properties.ExceptionMessages.ShellProcessTokenAccess">
            <summary>
              Looks up a localized string similar to Unable to open the shell process token..
            </summary>
        </member>
        <member name="P:SilDev.Properties.ExceptionMessages.ShellProcessTokenDuplication">
            <summary>
              Looks up a localized string similar to Unable to duplicate the shell process token..
            </summary>
        </member>
        <member name="P:SilDev.Properties.ExceptionMessages.SystemRestoringIsDisabled">
            <summary>
              Looks up a localized string similar to System restoring is disabled..
            </summary>
        </member>
        <member name="P:SilDev.Properties.ExceptionMessages.TokenPrivilegesAdjustment">
            <summary>
              Looks up a localized string similar to Unable to adjust the token privileges..
            </summary>
        </member>
        <member name="T:SilDev.Properties.UIStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:SilDev.Properties.UIStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:SilDev.Properties.UIStrings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:SilDev.Properties.UIStrings.Abort">
            <summary>
              Looks up a localized string similar to &amp;Abort.
            </summary>
        </member>
        <member name="P:SilDev.Properties.UIStrings.Cancel">
            <summary>
              Looks up a localized string similar to &amp;Cancel.
            </summary>
        </member>
        <member name="P:SilDev.Properties.UIStrings.Copy">
            <summary>
              Looks up a localized string similar to Copy.
            </summary>
        </member>
        <member name="P:SilDev.Properties.UIStrings.Cut">
            <summary>
              Looks up a localized string similar to Cut.
            </summary>
        </member>
        <member name="P:SilDev.Properties.UIStrings.FileSuccessfullyLoaded">
            <summary>
              Looks up a localized string similar to File successfully loaded!.
            </summary>
        </member>
        <member name="P:SilDev.Properties.UIStrings.FileSuccessfullySaved">
            <summary>
              Looks up a localized string similar to File successfully saved!.
            </summary>
        </member>
        <member name="P:SilDev.Properties.UIStrings.Ignore">
            <summary>
              Looks up a localized string similar to &amp;Ignore.
            </summary>
        </member>
        <member name="P:SilDev.Properties.UIStrings.LoadFile">
            <summary>
              Looks up a localized string similar to Load File.
            </summary>
        </member>
        <member name="P:SilDev.Properties.UIStrings.No">
            <summary>
              Looks up a localized string similar to &amp;No.
            </summary>
        </member>
        <member name="P:SilDev.Properties.UIStrings.Ok">
            <summary>
              Looks up a localized string similar to &amp;OK.
            </summary>
        </member>
        <member name="P:SilDev.Properties.UIStrings.OperationCanceled">
            <summary>
              Looks up a localized string similar to Operation canceled!.
            </summary>
        </member>
        <member name="P:SilDev.Properties.UIStrings.Paste">
            <summary>
              Looks up a localized string similar to Paste.
            </summary>
        </member>
        <member name="P:SilDev.Properties.UIStrings.ResourceBrowser">
            <summary>
              Looks up a localized string similar to Icon Resource Browser.
            </summary>
        </member>
        <member name="P:SilDev.Properties.UIStrings.Retry">
            <summary>
              Looks up a localized string similar to &amp;Retry.
            </summary>
        </member>
        <member name="P:SilDev.Properties.UIStrings.SaveAll">
            <summary>
              Looks up a localized string similar to Save All.
            </summary>
        </member>
        <member name="P:SilDev.Properties.UIStrings.SelectAll">
            <summary>
              Looks up a localized string similar to Select All.
            </summary>
        </member>
        <member name="P:SilDev.Properties.UIStrings.TextCanNotBeEmpty">
            <summary>
              Looks up a localized string similar to The text can not be empty!.
            </summary>
        </member>
        <member name="P:SilDev.Properties.UIStrings.TextFiles">
            <summary>
              Looks up a localized string similar to Text Files.
            </summary>
        </member>
        <member name="P:SilDev.Properties.UIStrings.Undo">
            <summary>
              Looks up a localized string similar to Undo.
            </summary>
        </member>
        <member name="P:SilDev.Properties.UIStrings.Yes">
            <summary>
              Looks up a localized string similar to &amp;Yes.
            </summary>
        </member>
        <member name="T:SilDev.AppCompatColorMode">
            <summary>
                Provides color mode options. For more information, see
                <see cref="M:SilDev.AppCompat.SetLayers(System.String,SilDev.AppCompatLayers)"/>.
            </summary>
        </member>
        <member name="F:SilDev.AppCompatColorMode.Default">
            <summary>
                System default.
            </summary>
        </member>
        <member name="F:SilDev.AppCompatColorMode._256Color">
            <summary>
                Reduce color mode to 8-bit (256).
            </summary>
        </member>
        <member name="F:SilDev.AppCompatColorMode._16BitColor">
            <summary>
                Reduce color mode to 16-bit (65536).
            </summary>
        </member>
        <member name="T:SilDev.AppCompatDpiScalingBehavior">
            <summary>
                Provides DPI scaling behavior options. For more information, see
                <see cref="M:SilDev.AppCompat.SetLayers(System.String,SilDev.AppCompatLayers)"/>.
            </summary>
        </member>
        <member name="F:SilDev.AppCompatDpiScalingBehavior.Default">
            <summary>
                System default.
            </summary>
        </member>
        <member name="F:SilDev.AppCompatDpiScalingBehavior.HighDpiWare">
            <summary>
                DPI scaling performed by application.
            </summary>
        </member>
        <member name="F:SilDev.AppCompatDpiScalingBehavior.DpiUnaware">
            <summary>
                DPI scaling performed by system.
            </summary>
        </member>
        <member name="F:SilDev.AppCompatDpiScalingBehavior.GdiDpiScaling_DpiUnaware">
            <summary>
                DPI scaling performed by system (enhanced).
            </summary>
            ReSharper disable once InconsistentNaming
        </member>
        <member name="T:SilDev.AppCompatDpiScalingSystem">
            <summary>
                Provides DPI scaling system options. For more information, see
                <see cref="M:SilDev.AppCompat.SetLayers(System.String,SilDev.AppCompatLayers)"/>.
            </summary>
        </member>
        <member name="F:SilDev.AppCompatDpiScalingSystem.Default">
            <summary>
                System default.
            </summary>
        </member>
        <member name="F:SilDev.AppCompatDpiScalingSystem.PerProcessSystemDpiForceOff">
            <summary>
                Windows logon.
            </summary>
        </member>
        <member name="F:SilDev.AppCompatDpiScalingSystem.PerProcessSystemDpiForceOn">
            <summary>
                Application start.
            </summary>
        </member>
        <member name="T:SilDev.AppCompatSystemVersion">
            <summary>
                Provides OS version options. For more information, see
                <see cref="M:SilDev.AppCompat.SetLayers(System.String,SilDev.AppCompatLayers)"/>.
            </summary>
            ReSharper disable InconsistentNaming
        </member>
        <member name="F:SilDev.AppCompatSystemVersion.Default">
            <summary>
                System default.
            </summary>
        </member>
        <member name="F:SilDev.AppCompatSystemVersion.Win95">
            <summary>
                Windows 95.
            </summary>
        </member>
        <member name="F:SilDev.AppCompatSystemVersion.Win98">
            <summary>
                Windows 98 / Windows ME.
            </summary>
        </member>
        <member name="F:SilDev.AppCompatSystemVersion.WinXPSP2">
            <summary>
                Windows XP (Service Pack 2).
            </summary>
        </member>
        <member name="F:SilDev.AppCompatSystemVersion.WinXPSP3">
            <summary>
                Windows XP (Service Pack 3).
            </summary>
        </member>
        <member name="F:SilDev.AppCompatSystemVersion.VistaRTM">
            <summary>
                Windows Vista.
            </summary>
        </member>
        <member name="F:SilDev.AppCompatSystemVersion.VistaSP1">
            <summary>
                Windows Vista (Service Pack 1).
            </summary>
        </member>
        <member name="F:SilDev.AppCompatSystemVersion.VistaSP2">
            <summary>
                Windows Vista (Service Pack 2).
            </summary>
        </member>
        <member name="F:SilDev.AppCompatSystemVersion.Win7RTM">
            <summary>
                Windows 7.
            </summary>
        </member>
        <member name="F:SilDev.AppCompatSystemVersion.Win8RTM">
            <summary>
                Windows 8.
            </summary>
        </member>
        <member name="T:SilDev.AppCompatLayers">
            <summary>
                Application compatibility layers struct. For more information, see
                <see cref="M:SilDev.AppCompat.SetLayers(System.String,SilDev.AppCompatLayers)"/>.
            </summary>
        </member>
        <member name="P:SilDev.AppCompatLayers.ColorMode">
            <summary>
                The color mode.
            </summary>
        </member>
        <member name="P:SilDev.AppCompatLayers.DpiScalingBehavior">
            <summary>
                The DPI scaling behavior.
            </summary>
        </member>
        <member name="P:SilDev.AppCompatLayers.DpiScalingSystem">
            <summary>
                The DPI scaling system.
            </summary>
        </member>
        <member name="P:SilDev.AppCompatLayers.OperatingSystem">
            <summary>
                The operating system.
            </summary>
        </member>
        <member name="P:SilDev.AppCompatLayers.DisableFullscreenOptimizations">
            <summary>
                <see langword="true"/> to disable the Windows 10 fullscreen optimizations;
                otherwise, <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SilDev.AppCompatLayers.RunIn640x480ScreenResolution">
            <summary>
                <see langword="true"/> to run the program in 640x480 screen resolution;
                otherwise, <see langword="false"/>.
            </summary>
            ReSharper disable once InconsistentNaming
        </member>
        <member name="P:SilDev.AppCompatLayers.RunAsAdministrator">
            <summary>
                <see langword="true"/> to run the program as administrator; otherwise,
                <see langword="false"/>.
            </summary>
        </member>
        <member name="M:SilDev.AppCompatLayers.Equals(SilDev.AppCompatLayers)">
            <summary>
                Determines whether this instance have same values as the specified
                <see cref="T:SilDev.AppCompatLayers"/> instance.
            </summary>
            <param name="other">
                The <see cref="T:SilDev.AppCompatLayers"/> instance to compare.
            </param>
        </member>
        <member name="M:SilDev.AppCompatLayers.Equals(System.Object)">
            <summary>
                Determines whether this instance have same values as the specified
                <see cref="T:System.Object"/>.
            </summary>
            <param name="other">
                The  <see cref="T:System.Object"/> to compare.
            </param>
        </member>
        <member name="M:SilDev.AppCompatLayers.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:SilDev.AppCompatLayers.op_Equality(SilDev.AppCompatLayers,SilDev.AppCompatLayers)">
            <summary>
                Determines whether two specified <see cref="T:SilDev.AppCompatLayers"/> instances
                have same values.
            </summary>
            <param name="left">
                The first <see cref="T:SilDev.AppCompatLayers"/> instance to compare.
            </param>
            <param name="right">
                The second <see cref="T:SilDev.AppCompatLayers"/> instance to compare.
            </param>
        </member>
        <member name="M:SilDev.AppCompatLayers.op_Inequality(SilDev.AppCompatLayers,SilDev.AppCompatLayers)">
            <summary>
                Determines whether two specified <see cref="T:SilDev.AppCompatLayers"/> instances
                have different values.
            </summary>
            <param name="left">
                The first <see cref="T:SilDev.AppCompatLayers"/> instance to compare.
            </param>
            <param name="right">
                The second <see cref="T:SilDev.AppCompatLayers"/> instance to compare.
            </param>
        </member>
        <member name="T:SilDev.AppCompat">
            <summary>
                Provides functionality for the Windows application compatibility layers.
            </summary>
        </member>
        <member name="M:SilDev.AppCompat.SetLayers(System.String,SilDev.AppCompatLayers)">
            <summary>
                Sets the specified application compatibility layers for the specified
                executable file.
            </summary>
            <param name="path">
                The path to the file to be configured.
            </param>
            <param name="compatLayers">
                The compatibility layers.
            </param>
            <exception cref="T:System.ArgumentNullException">
                path is null, empty or consists only of white-space characters.
            </exception>
            <exception cref="T:SilDev.ArgumentInvalidException">
                path is not a valid executable file.
            </exception>
            <exception cref="T:SilDev.PathNotFoundException">
                target does not exist.
            </exception>
        </member>
        <member name="T:SilDev.ArgumentInvalidException">
            <summary>
                The exception that is thrown when a reference is passed to a method that
                does not accept it as a valid argument.
            </summary>
        </member>
        <member name="P:SilDev.ArgumentInvalidException.Message">
            <summary>
                Gets a message that describes the current exception.
            </summary>
        </member>
        <member name="M:SilDev.ArgumentInvalidException.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.ArgumentInvalidException"/>
                class.
            </summary>
        </member>
        <member name="M:SilDev.ArgumentInvalidException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.ArgumentInvalidException"/>
                class with the name of the parameter that causes this exception.
            </summary>
            <param name="paramName">
                The name of the parameter that caused the exception.
            </param>
        </member>
        <member name="M:SilDev.ArgumentInvalidException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.ArgumentInvalidException"/>
                class with the parameter name and the exception that is the cause of this
                exception.
            </summary>
            <param name="paramName">
                The name of the parameter that caused the exception.
            </param>
            <param name="innerException">
                The exception that is the cause of the current exception, or a null
                reference.
            </param>
        </member>
        <member name="M:SilDev.ArgumentInvalidException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.ArgumentInvalidException"/>
                class with serialized data.
            </summary>
            <param name="info">
                The object that holds the serialized object data.
            </param>
            <param name="context">
                The contextual information about the source or destination.
            </param>
        </member>
        <member name="M:SilDev.ArgumentInvalidException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object with the parameter name and
                additional exception information.
            </summary>
            <param name="info">
                The object that holds the serialized object data.
            </param>
            <param name="context">
                The contextual information about the source or destination.
            </param>
        </member>
        <member name="T:SilDev.AssemblyInfo">
            <summary>
                Provides information for the current assembly.
            </summary>
        </member>
        <member name="P:SilDev.AssemblyInfo.Company">
            <summary>
                Gets company name information of the current process.
            </summary>
        </member>
        <member name="P:SilDev.AssemblyInfo.Configuration">
            <summary>
                Gets configuration information of the current process.
            </summary>
        </member>
        <member name="P:SilDev.AssemblyInfo.Copyright">
            <summary>
                Gets copyright information of the current process.
            </summary>
        </member>
        <member name="P:SilDev.AssemblyInfo.Description">
            <summary>
                Gets description information of the current process.
            </summary>
        </member>
        <member name="P:SilDev.AssemblyInfo.FileVersion">
            <summary>
                Gets file version information of the current process.
            </summary>
        </member>
        <member name="P:SilDev.AssemblyInfo.Product">
            <summary>
                Gets product information of the current process.
            </summary>
        </member>
        <member name="P:SilDev.AssemblyInfo.Title">
            <summary>
                Gets title information of the current process.
            </summary>
        </member>
        <member name="P:SilDev.AssemblyInfo.Trademark">
            <summary>
                Gets trademark information of the current process.
            </summary>
        </member>
        <member name="P:SilDev.AssemblyInfo.Version">
            <summary>
                Gets version information of the current process.
            </summary>
        </member>
        <member name="M:SilDev.AssemblyInfo.GetCompanyFrom(System.Reflection.Assembly)">
            <summary>
                Gets company name information from specified assembly, if available.
            </summary>
            <param name="element">
                The assembly element to get the information.
            </param>
        </member>
        <member name="M:SilDev.AssemblyInfo.GetConfigurationFrom(System.Reflection.Assembly)">
            <summary>
                Gets configuration information from specified assembly, if available.
            </summary>
            <param name="element">
                The assembly element to get the information.
            </param>
        </member>
        <member name="M:SilDev.AssemblyInfo.GetCopyrightFrom(System.Reflection.Assembly)">
            <summary>
                Gets copyright information from specified assembly, if available.
            </summary>
            <param name="element">
                The assembly element to get the information.
            </param>
        </member>
        <member name="M:SilDev.AssemblyInfo.GetDescriptionFrom(System.Reflection.Assembly)">
            <summary>
                Gets description information from specified assembly, if available.
            </summary>
            <param name="element">
                The assembly element to get the information.
            </param>
        </member>
        <member name="M:SilDev.AssemblyInfo.GetFileVersionFrom(System.Reflection.Assembly)">
            <summary>
                Gets file version information from specified assembly, if available.
            </summary>
            <param name="element">
                The assembly element to get the information.
            </param>
        </member>
        <member name="M:SilDev.AssemblyInfo.GetProductFrom(System.Reflection.Assembly)">
            <summary>
                Gets product information from specified assembly, if available.
            </summary>
            <param name="element">
                The assembly element to get the information.
            </param>
        </member>
        <member name="M:SilDev.AssemblyInfo.GetTitleFrom(System.Reflection.Assembly)">
            <summary>
                Gets title information from specified assembly, if available.
            </summary>
            <param name="element">
                The assembly element to get the information.
            </param>
        </member>
        <member name="M:SilDev.AssemblyInfo.GetTrademarkFrom(System.Reflection.Assembly)">
            <summary>
                Gets trademark information.
            </summary>
        </member>
        <member name="M:SilDev.AssemblyInfo.GetVersionFrom(System.Reflection.Assembly)">
            <summary>
                Gets version information from specified assembly, if available.
            </summary>
            <param name="element">
                The assembly element to get the information.
            </param>
        </member>
        <member name="T:SilDev.IStringComparer">
            <summary>
                Defines a method that performs the string transformation for the comparer.
            </summary>
        </member>
        <member name="M:SilDev.IStringComparer.GetString(System.Object)">
            <summary>
                When overridden in a derived class, performs the string transformation of
                the object for the comparer.
            </summary>
        </member>
        <member name="T:SilDev.AlphaNumericComparer">
            <summary>
                Provides a base class for alphanumeric comparison.
            </summary>
        </member>
        <member name="P:SilDev.AlphaNumericComparer.Descendant">
            <summary>
                Gets the value that determines whether the order is descended.
            </summary>
        </member>
        <member name="M:SilDev.AlphaNumericComparer.#ctor(System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.AlphaNumericComparer"/> class.
                A parameter specifies whether the order is descended.
            </summary>
            <param name="descendant">
                <see langword="true"/> to enable the descending order; otherwise,
                <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.AlphaNumericComparer.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.AlphaNumericComparer"/> class.
            </summary>
        </member>
        <member name="M:SilDev.AlphaNumericComparer.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.AlphaNumericComparer"/> class
                with serialized data.
            </summary>
            <param name="info">
                The object that holds the serialized object data.
            </param>
            <param name="context">
                The contextual information about the source or destination.
            </param>
        </member>
        <member name="M:SilDev.AlphaNumericComparer.Compare(System.Object,System.Object)">
            <summary>
                Compare two specified objects and returns an integer that indicates their
                relative position in the sort order.
            </summary>
            <param name="a">
                The first object to compare.
            </param>
            <param name="b">
                The second object to compare.
            </param>
        </member>
        <member name="M:SilDev.AlphaNumericComparer.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object for this instance.
            </summary>
            <param name="info">
                The object that holds the serialized object data.
            </param>
            <param name="context">
                The contextual information about the source or destination.
            </param>
        </member>
        <member name="M:SilDev.AlphaNumericComparer.GetString(System.Object)">
            <summary>
                Retrieves the string of the object that is used for comparison.
            </summary>
            <param name="value">
                The object to compare.
            </param>
        </member>
        <member name="M:SilDev.AlphaNumericComparer.Equals(System.Object)">
            <summary>
                Determines whether this instance have same values as the specified
                <see cref="T:System.Object"/>.
            </summary>
            <param name="other">
                The  <see cref="T:System.Object"/> to compare.
            </param>
        </member>
        <member name="M:SilDev.AlphaNumericComparer.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
        </member>
        <member name="T:SilDev.AlphaNumericComparer`1">
            <summary>
                Provides a base class for alphanumeric comparison.
            </summary>
        </member>
        <member name="M:SilDev.AlphaNumericComparer`1.#ctor(System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.AlphaNumericComparer`1"/>
                class. A parameter specifies whether the order is descended.
            </summary>
            <param name="descendant">
                <see langword="true"/> to enable the descending order; otherwise,
                <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.AlphaNumericComparer`1.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.AlphaNumericComparer`1"/>
                class.
            </summary>
        </member>
        <member name="M:SilDev.AlphaNumericComparer`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.AlphaNumericComparer`1"/>
                class with serialized data.
            </summary>
            <param name="info">
                The object that holds the serialized object data.
            </param>
            <param name="context">
                The contextual information about the source or destination.
            </param>
        </member>
        <member name="M:SilDev.AlphaNumericComparer`1.Compare(`0,`0)">
            <summary>
                Compare two specified objects and returns an integer that indicates their
                relative position in the sort order.
            </summary>
            <param name="a">
                The first object to compare.
            </param>
            <param name="b">
                The second object to compare.
            </param>
        </member>
        <member name="M:SilDev.AlphaNumericComparer`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object for this instance.
            </summary>
            <param name="info">
                The object that holds the serialized object data.
            </param>
            <param name="context">
                The contextual information about the source or destination.
            </param>
        </member>
        <member name="M:SilDev.AlphaNumericComparer`1.Equals(System.Object)">
            <summary>
                Determines whether this instance have same values as the specified
                <see cref="T:System.Object"/>.
            </summary>
            <param name="other">
                The  <see cref="T:System.Object"/> to compare.
            </param>
        </member>
        <member name="M:SilDev.AlphaNumericComparer`1.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
        </member>
        <member name="T:SilDev.ConsoleWindow">
            <summary>
                Provides the functionality to allocate a <see cref="T:System.Console"/> window.
            </summary>
        </member>
        <member name="M:SilDev.ConsoleWindow.Allocate(System.Boolean)">
            <summary>
                Allocates a new <see cref="T:System.Console"/> for the current process.
                <para>
                    <see langword="true"/> to disable the close button of the windows;
                    otherwise, <see langword="false"/>.
                </para>
            </summary>
        </member>
        <member name="T:SilDev.CmdExec">
            <summary>
                Provides functions for executing command prompt commands.
            </summary>
        </member>
        <member name="M:SilDev.CmdExec.Send(System.String,System.Boolean,System.Diagnostics.ProcessWindowStyle,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Diagnostics.Process"/> class to execute
                system commands using the system command prompt ("cmd.exe").
                <para>
                    This can be useful for an unprivileged application as a simple way to
                    execute a command with the highest user permissions, for example.
                </para>
            </summary>
            <param name="command">
                The command to execute.
            </param>
            <param name="runAsAdmin">
                <see langword="true"/> to start the application with administrator
                privileges; otherwise, <see langword="false"/>.
            </param>
            <param name="processWindowStyle">
                The window state to use when the process is started.
            </param>
            <param name="dispose">
                <see langword="true"/> to release all resources used by the
                <see cref="T:System.Diagnostics.Process"/> component, if the process has been started;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.CmdExec.Send(System.String,System.Boolean,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Diagnostics.Process"/> class to execute
                system commands using the system command prompt ("cmd.exe").
                <para>
                    This can be useful for an unprivileged application as a simple way to
                    execute a command with the highest user permissions, for example.
                </para>
            </summary>
            <param name="command">
                The command to execute.
            </param>
            <param name="runAsAdmin">
                <see langword="true"/> to start the application with administrator
                privileges; otherwise, <see langword="false"/>.
            </param>
            <param name="dispose">
                <see langword="true"/> to release all resources used by the
                <see cref="T:System.Diagnostics.Process"/> component, if the process has been started;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.CmdExec.Send(System.String,System.Diagnostics.ProcessWindowStyle,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Diagnostics.Process"/> class to execute
                system commands using the system command prompt ("cmd.exe").
                <para>
                    This can be useful for an unprivileged application as a simple way to
                    execute a command with the highest user permissions, for example.
                </para>
            </summary>
            <param name="command">
                The command to execute.
            </param>
            <param name="processWindowStyle">
                The window state to use when the process is started.
            </param>
            <param name="dispose">
                <see langword="true"/> to release all resources used by the
                <see cref="T:System.Diagnostics.Process"/> component, if the process has been started;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.CmdExec.SendEx(System.String[])">
            <summary>
                Initializes a new instance of the <see cref="T:System.Diagnostics.Process"/> class to execute
                system commands using the system command prompt ("cmd.exe") and stream its
                output to a console, if available.
            </summary>
            <param name="commands">
                The commands to execute.
            </param>
        </member>
        <member name="M:SilDev.CmdExec.Copy(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
                Copies an existing file or directory to a new location.
            </summary>
            <param name="srcPath">
                The path to the file or directory to copy.
            </param>
            <param name="destPath">
                The name of the destination file or directory.
            </param>
            <param name="runAsAdmin">
                <see langword="true"/> to run this task with administrator privileges;
                otherwise, <see langword="false"/>.
            </param>
            <param name="wait">
                <see langword="true"/> to wait indefinitely for the associated process to
                exit; otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.CmdExec.Delete(System.String,System.Boolean,System.Boolean)">
            <summary>
                Deletes an existing file or directory.
            </summary>
            <param name="path">
                The path to the file or directory to be deleted.
            </param>
            <param name="runAsAdmin">
                <see langword="true"/> to run this task with administrator privileges;
                otherwise, <see langword="false"/>.
            </param>
            <param name="wait">
                <see langword="true"/> to wait indefinitely for the associated process to
                exit; otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.CmdExec.WaitThenCmd(System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
                Waits for the specified seconds to execute the specified command.
            </summary>
            <param name="command">
                The command to execute.
            </param>
            <param name="seconds">
                The time to wait in seconds.
            </param>
            <param name="runAsAdmin">
                <see langword="true"/> to run this task with administrator privileges;
                otherwise, <see langword="false"/>.
            </param>
            <param name="dispose">
                <see langword="true"/> to release all resources used by the
                <see cref="T:System.Diagnostics.Process"/> component, if this task has been started; otherwise,
                <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.CmdExec.WaitThenCmd(System.String,System.Boolean,System.Boolean)">
            <summary>
                Waits for the specified seconds to execute the specified command.
            </summary>
            <param name="command">
                The command to execute.
            </param>
            <param name="runAsAdmin">
                <see langword="true"/> to run this task with administrator privileges;
                otherwise, <see langword="false"/>.
            </param>
            <param name="dispose">
                <see langword="true"/> to release all resources used by the
                <see cref="T:System.Diagnostics.Process"/> component, if this task has been started; otherwise,
                <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.CmdExec.WaitThenDelete(System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
                Waits for the specified seconds to delete the target at the specified path.
            </summary>
            <param name="path">
                The path to the file or directory to be deleted.
            </param>
            <param name="seconds">
                The time to wait in seconds.
            </param>
            <param name="runAsAdmin">
                <see langword="true"/> to run this task with administrator privileges;
                otherwise, <see langword="false"/>.
            </param>
            <param name="dispose">
                <see langword="true"/> to release all resources used by the
                <see cref="T:System.Diagnostics.Process"/> component, if this task has been started; otherwise,
                <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.CmdExec.WaitThenDelete(System.String,System.Boolean,System.Boolean)">
            <summary>
                Waits for the specified seconds to delete the target at the specified path.
            </summary>
            <param name="path">
                The path to the file or directory to be deleted.
            </param>
            <param name="runAsAdmin">
                <see langword="true"/> to run this task with administrator privileges;
                otherwise, <see langword="false"/>.
            </param>
            <param name="dispose">
                <see langword="true"/> to release all resources used by the
                <see cref="T:System.Diagnostics.Process"/> component, if this task has been started; otherwise,
                <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.CmdExec.WaitForExitThenCmd(System.String,System.String,System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
                Executes the specified command if there is no process running that is
                matched with the specified process name.
                <para>
                    If a matched process is still running, the task will wait until all
                    matched processes has been closed.
                </para>
            </summary>
            <param name="command">
                The command to execute.
            </param>
            <param name="processName">
                The name of the process to be waited.
            </param>
            <param name="extension">
                The file extension of the specified process.
            </param>
            <param name="seconds">
                The amount of time, in seconds, to wait for the associated process to exit.
            </param>
            <param name="runAsAdmin">
                <see langword="true"/> to run this task with administrator privileges;
                otherwise, <see langword="false"/>.
            </param>
            <param name="dispose">
                <see langword="true"/> to release all resources used by the
                <see cref="T:System.Diagnostics.Process"/> component, if this task has been started; otherwise,
                <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.CmdExec.WaitForExitThenCmd(System.String,System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
                Executes the specified command if there is no process running that is
                matched with the specified process name.
                <para>
                    If a matched process is still running, the task will wait until all
                    matched processes has been closed.
                </para>
            </summary>
            <param name="command">
                The command to execute.
            </param>
            <param name="processName">
                The name of the process to be waited.
            </param>
            <param name="seconds">
                The amount of time, in seconds, to wait for the associated process to exit.
            </param>
            <param name="runAsAdmin">
                <see langword="true"/> to run this task with administrator privileges;
                otherwise, <see langword="false"/>.
            </param>
            <param name="dispose">
                <see langword="true"/> to release all resources used by the
                <see cref="T:System.Diagnostics.Process"/> component, if this task has been started; otherwise,
                <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.CmdExec.WaitForExitThenCmd(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
                Executes the specified command if there is no process running that is
                matched with the specified process name.
                <para>
                    If a matched process is still running, the task will wait until all
                    matched processes has been closed.
                </para>
            </summary>
            <param name="command">
                The command to execute.
            </param>
            <param name="processName">
                The name of the process to be waited.
            </param>
            <param name="extension">
                The file extension of the specified process.
            </param>
            <param name="runAsAdmin">
                <see langword="true"/> to run this task with administrator privileges;
                otherwise, <see langword="false"/>.
            </param>
            <param name="dispose">
                <see langword="true"/> to release all resources used by the
                <see cref="T:System.Diagnostics.Process"/> component, if this task has been started; otherwise,
                <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.CmdExec.WaitForExitThenCmd(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
                Executes the specified command if there is no process running that is
                matched with the specified process name.
                <para>
                    If a matched process is still running, the task will wait until all
                    matched processes has been closed.
                </para>
            </summary>
            <param name="command">
                The command to execute.
            </param>
            <param name="processName">
                The name of the process to be waited.
            </param>
            <param name="runAsAdmin">
                <see langword="true"/> to run this task with administrator privileges;
                otherwise, <see langword="false"/>.
            </param>
            <param name="dispose">
                <see langword="true"/> to release all resources used by the
                <see cref="T:System.Diagnostics.Process"/> component, if this task has been started; otherwise,
                <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.CmdExec.WaitForExitThenDelete(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
                Deletes the target at the specified path if there is no process running
                that is matched with the specified process name.
                <para>
                    If a matched process is still running, the task will wait until all
                    matched processes has been closed.
                </para>
            </summary>
            <param name="path">
                The path to the file or directory to be deleted.
            </param>
            <param name="processName">
                The name of the process to be waited.
            </param>
            <param name="extension">
                The file extension of the specified process.
            </param>
            <param name="runAsAdmin">
                <see langword="true"/> to run this task with administrator privileges;
                otherwise, <see langword="false"/>.
            </param>
            <param name="dispose">
                <see langword="true"/> to release all resources used by the
                <see cref="T:System.Diagnostics.Process"/> component, if this task has been started; otherwise,
                <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.CmdExec.WaitForExitThenDelete(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
                Deletes the target at the specified path if there is no process running
                that is matched with the specified process name.
                <para>
                    If a matched process is still running, the task will wait until all
                    matched processes has been closed.
                </para>
            </summary>
            <param name="path">
                The path to the file or directory to be deleted.
            </param>
            <param name="processName">
                The name of the process to be waited.
            </param>
            <param name="runAsAdmin">
                <see langword="true"/> to run this task with administrator privileges;
                otherwise, <see langword="false"/>.
            </param>
            <param name="dispose">
                <see langword="true"/> to release all resources used by the
                <see cref="T:System.Diagnostics.Process"/> component, if this task has been started; otherwise,
                <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.CmdExec.KillTask(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
                Ends all processes matched by the specified process name.
            </summary>
            <param name="processName">
                The name of the process to be killed.
            </param>
            <param name="extension">
                The file extension of the specified process.
            </param>
            <param name="runAsAdmin">
                <see langword="true"/> to run this task with administrator privileges;
                otherwise, <see langword="false"/>.
            </param>
            <param name="dispose">
                <see langword="true"/> to release all resources used by the
                <see cref="T:System.Diagnostics.Process"/> component, if this task has been started; otherwise,
                <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.CmdExec.KillTask(System.String,System.Boolean,System.Boolean)">
            <summary>
                Ends all processes matched by the specified process name.
            </summary>
            <param name="processName">
                The name of the process to be killed.
            </param>
            <param name="runAsAdmin">
                <see langword="true"/> to run this task with administrator privileges;
                otherwise, <see langword="false"/>.
            </param>
            <param name="dispose">
                <see langword="true"/> to release all resources used by the
                <see cref="T:System.Diagnostics.Process"/> component, if this task has been started; otherwise,
                <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.CmdExec.KillAllTasks(System.Collections.Generic.IEnumerable{System.String},System.String,System.Boolean,System.Boolean)">
            <summary>
                Ends all processes matched by all the specified process names.
            </summary>
            <param name="processNames">
                A list of the process names to be killed.
            </param>
            <param name="extension">
                The file extension of the specified processes.
            </param>
            <param name="runAsAdmin">
                <see langword="true"/> to run this task with administrator privileges;
                otherwise, <see langword="false"/>.
            </param>
            <param name="dispose">
                <see langword="true"/> to release all resources used by the
                <see cref="T:System.Diagnostics.Process"/> component, if this task has been started; otherwise,
                <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.CmdExec.KillAllTasks(System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean)">
            <summary>
                Ends all processes matched by all the specified process names.
            </summary>
            <param name="processNames">
                A list of the process names to be killed.
            </param>
            <param name="runAsAdmin">
                <see langword="true"/> to run this task with administrator privileges;
                otherwise, <see langword="false"/>.
            </param>
            <param name="dispose">
                <see langword="true"/> to release all resources used by the
                <see cref="T:System.Diagnostics.Process"/> component, if this task has been started; otherwise,
                <see langword="false"/>.
            </param>
        </member>
        <member name="T:SilDev.Compression.Archiver.WinRar">
            <summary>
                Provides basic features of the WinRAR applications.
            </summary>
        </member>
        <member name="P:SilDev.Compression.Archiver.WinRar.DefaultArchiver">
            <summary>
                Gets or sets a static default <see cref="T:SilDev.Compression.Archiver.WinRar"/> instance.
            </summary>
        </member>
        <member name="M:SilDev.Compression.Archiver.WinRar.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Compression.Archiver.WinRar"/> class.
            </summary>
        </member>
        <member name="M:SilDev.Compression.Archiver.WinRar.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Compression.Archiver.WinRar"/> class.
            </summary>
            <param name="location">
                The location of the executables.
            </param>
            <param name="createDirArgs">
                The command line arguments format string that is used to create archives
                from directories.
                <para>
                    Please note that two formation keys must be defined; {0} is the source
                    directory path and {1} is the destination archive path.
                </para>
                <para/>
                <example>
                    <strong>
                        Example:
                    </strong>
                    <c>
                        "a \"{1}\\*\" \"{0}\""
                    </c>
                </example>
            </param>
            <param name="createFileArgs">
                The command line arguments format string that is used to create archives
                from files.
                <para>
                    Please note that two formation keys must be defined; {0} is the source
                    file path and {1} is the destination archive path.
                </para>
                <para/>
                <example>
                    <strong>
                        Example:
                    </strong>
                    <c>
                        "a \"{1}\" \"{0}\""
                    </c>
                </example>
            </param>
            <param name="extractArgs">
                The command line arguments format string that is used to extract archives.
                <para>
                    Please note that two formation keys must be defined; {0} is the source
                    archive path and {1} is the destination directory path.
                </para>
                <para/>
                <example>
                    <strong>
                        Example:
                    </strong>
                    <c>
                        "x -ad \"{0}\" \"{1}\""
                    </c>
                </example>
            </param>
        </member>
        <member name="T:SilDev.Compression.Archiver.SevenZip">
            <summary>
                Provides basic features of the 7-Zip application.
            </summary>
        </member>
        <member name="P:SilDev.Compression.Archiver.SevenZip.DefaultArchiver">
            <summary>
                Gets or sets a static default <see cref="T:SilDev.Compression.Archiver.SevenZip"/> instance.
            </summary>
        </member>
        <member name="M:SilDev.Compression.Archiver.SevenZip.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Compression.Archiver.SevenZip"/> class.
            </summary>
        </member>
        <member name="M:SilDev.Compression.Archiver.SevenZip.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Compression.Archiver.SevenZip"/> class.
            </summary>
            <param name="location">
                The location of the executables.
            </param>
            <param name="createDirArgs">
                The command line arguments format string that is used to create archives
                from directories.
                <para>
                    Please note that two formation keys must be defined; {0} is the source
                    directory path and {1} is the destination archive path.
                </para>
                <para/>
                <example>
                    <strong>
                        Example:
                    </strong>
                    <c>
                        "a -t7z \"{1}\\*\" \"{0}\""
                    </c>
                </example>
            </param>
            <param name="createFileArgs">
                The command line arguments format string that is used to create archives
                from files.
                <para>
                    Please note that two formation keys must be defined; {0} is the source
                    file path and {1} is the destination archive path.
                </para>
                <para/>
                <example>
                    <strong>
                        Example:
                    </strong>
                    <c>
                        "a -t7z \"{1}\" \"{0}\""
                    </c>
                </example>
            </param>
            <param name="extractArgs">
                The command line arguments format string that is used to extract archives.
                <para>
                    Please note that two formation keys must be defined; {0} is the source
                    archive path and {1} is the destination directory path.
                </para>
                <para/>
                <example>
                    <strong>
                        Example:
                    </strong>
                    <c>
                        "x \"{0}\" -o\"{1}\" -y"
                    </c>
                </example>
            </param>
        </member>
        <member name="T:SilDev.Compression.Archiver.ArchiverBase">
            <summary>
                Provides a base class to handle file archiver.
            </summary>
        </member>
        <member name="P:SilDev.Compression.Archiver.ArchiverBase.Location">
            <summary>
                The location of the executables.
            </summary>
        </member>
        <member name="P:SilDev.Compression.Archiver.ArchiverBase.CreateExePath">
            <summary>
                The path of the executable used to create archives.
            </summary>
        </member>
        <member name="P:SilDev.Compression.Archiver.ArchiverBase.ExtractExePath">
            <summary>
                The path of the executable used to extract archives.
            </summary>
        </member>
        <member name="P:SilDev.Compression.Archiver.ArchiverBase.CreateDirArgs">
            <summary>
                The command line arguments format string that is used to create archives
                from directories.
                <para>
                    Please note that two formation keys must be defined; {0} is the source
                    directory path and {1} is the destination archive path.
                </para>
                <para/>
                <example>
                    <strong>
                        Example:
                    </strong>
                    <c>
                        "a -t7z \"{1}\\*\" \"{0}\""
                    </c>
                </example>
            </summary>
        </member>
        <member name="P:SilDev.Compression.Archiver.ArchiverBase.CreateFileArgs">
            <summary>
                The command line arguments format string that is used to create archives
                from files.
                <para>
                    Please note that two formation keys must be defined; {0} is the source
                    file path and {1} is the destination archive path.
                </para>
                <para/>
                <example>
                    <strong>
                        Example:
                    </strong>
                    <c>
                        "a -t7z \"{1}\" \"{0}\""
                    </c>
                </example>
            </summary>
        </member>
        <member name="P:SilDev.Compression.Archiver.ArchiverBase.ExtractArgs">
            <summary>
                The command line arguments format string that is used to extract archives.
                <para>
                    Please note that two formation keys must be defined; {0} is the source
                    archive path and {1} is the destination directory path.
                </para>
                <para/>
                <example>
                    <strong>
                        Example:
                    </strong>
                    <c>
                        "x \"{0}\" -o\"{1}\" -y"
                    </c>
                </example>
            </summary>
        </member>
        <member name="M:SilDev.Compression.Archiver.ArchiverBase.#ctor(System.String,System.String,System.String,System.Collections.Generic.IReadOnlyList{System.String},System.Collections.Generic.IReadOnlyList{System.String},System.Collections.Generic.IReadOnlyList{System.String},System.String,System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Compression.Archiver.ArchiverBase"/> class.
            </summary>
            <param name="appName">
                The name of the application; should be the name of the default installation
                directory.
                <para/>
                <example>
                    <strong>
                        Example:
                    </strong>
                    "7-Zip"
                </example>
            </param>
            <param name="altAppName">
                The alternate name of the application.
                <para/>
                <example>
                    <strong>
                        Example:
                    </strong>
                    "7z"
                </example>
            </param>
            <param name="location">
                The location of the executables.
            </param>
            <param name="createExeNames">
                A sequence of execution file names that can be used to create archives.
                <para>
                    Please note that only the file found first is used. All other defined
                    files are only alternatives.
                </para>
                <para/>
                <example>
                    <strong>
                        Example:
                    </strong>
                    <code>
                        new string[] { "7zG.exe", "7z.exe", ... }
                    </code>
                </example>
            </param>
            <param name="extractExeNames">
                A sequence of execution file names that can be used to extract archives.
                The rules are the same as for the <paramref name="createExeNames"/>
                parameter.
                <para>
                    Can be <see langword="null"/> if the same files are used to create and
                    extract.
                </para>
            </param>
            <param name="depencies">
                A sequence of files that must exist to allow the archiver applications to
                run.
                <para/>
                <example>
                    <strong>
                        Example:
                    </strong>
                    <code>
                        new string[] { "7z.dll", "Lang\\en.ttt", ... }
                    </code>
                </example>
            </param>
            <param name="createDirArgs">
                The command line arguments format string that is used to create archives
                from directories.
                <para>
                    Please note that two formation keys must be defined; {0} is the source
                    directory path and {1} is the destination archive path.
                </para>
                <para/>
                <example>
                    <strong>
                        Example:
                    </strong>
                    <c>
                        "a -t7z \"{1}\\*\" \"{0}\""
                    </c>
                </example>
            </param>
            <param name="createFileArgs">
                The command line arguments format string that is used to create archives
                from files.
                <para>
                    Please note that two formation keys must be defined; {0} is the source
                    file path and {1} is the destination archive path.
                </para>
                <para/>
                <example>
                    <strong>
                        Example:
                    </strong>
                    <c>
                        "a -t7z \"{1}\" \"{0}\""
                    </c>
                </example>
            </param>
            <param name="extractArgs">
                The command line arguments format string that is used to extract archives.
                <para>
                    Please note that two formation keys must be defined; {0} is the source
                    archive path and {1} is the destination directory path.
                </para>
                <para/>
                <example>
                    <strong>
                        Example:
                    </strong>
                    <c>
                        "x \"{0}\" -o\"{1}\" -y"
                    </c>
                </example>
            </param>
        </member>
        <member name="M:SilDev.Compression.Archiver.ArchiverBase.Create(System.String,System.String,System.Diagnostics.ProcessWindowStyle,System.Boolean)">
            <summary>
                Compress the specified file, or all files of the specified directory, to
                the specified file on the file system.
            </summary>
            <param name="srcDirOrFile">
                The path of the file or directory to compress.
            </param>
            <param name="destFile">
                The path of the archive.
            </param>
            <param name="windowStyle">
                The window state to use when the process is started.
            </param>
            <param name="dispose">
                <see langword="true"/> to release all resources used by the
                <see cref="T:System.Diagnostics.Process"/> component; otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Compression.Archiver.ArchiverBase.Extract(System.String,System.String,System.Diagnostics.ProcessWindowStyle,System.Boolean)">
            <summary>
                Extracts all the files in the specified archive to the specified directory
                on the file system.
            </summary>
            <param name="srcFile">
                The path of the archive to extract.
            </param>
            <param name="destDir">
                The path to the directory to place the extracted files in.
            </param>
            <param name="windowStyle">
                The window state to use when the process is started.
            </param>
            <param name="dispose">
                <see langword="true"/> to release all resources used by the
                <see cref="T:System.Diagnostics.Process"/> component; otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Compression.GZip.Compress(System.IO.Stream,System.IO.Stream,System.Boolean)">
            <summary>
                Compresses the specified input stream to the specified output stream.
            </summary>
            <param name="inputStream">
                The input stream.
            </param>
            <param name="outputStream">
                The output stream.
            </param>
            <param name="dispose">
                <see langword="true"/> to dispose the the input stream; otherwise,
                <see langword="false"/>;
            </param>
            <exception cref="T:System.ArgumentNullException">
                inputStream or outputStream is null.
            </exception>
        </member>
        <member name="M:SilDev.Compression.GZip.Compress(System.Byte[])">
            <summary>
                Compresses the specified sequence of bytes.
            </summary>
            <param name="bytes">
                The sequence of bytes to compress.
            </param>
        </member>
        <member name="M:SilDev.Compression.GZip.CompressText(System.String)">
            <summary>
                Compresses the specified <see cref="T:System.String"/> value.
            </summary>
            <param name="text">
                The string to compress.
            </param>
        </member>
        <member name="M:SilDev.Compression.GZip.Decompress(System.IO.Stream,System.IO.Stream,System.Boolean)">
            <summary>
                Decompresses the specified input stream to the specified output stream.
            </summary>
            <param name="inputStream">
                The input stream.
            </param>
            <param name="outputStream">
                The output stream.
            </param>
            <param name="dispose">
                <see langword="true"/> to dispose the the input stream; otherwise,
                <see langword="false"/>;
            </param>
            <exception cref="T:System.ArgumentNullException">
                inputStream or outputStream is null.
            </exception>
        </member>
        <member name="M:SilDev.Compression.GZip.Decompress(System.Byte[])">
            <summary>
                Decompresses a compressed sequence of bytes.
            </summary>
            <param name="bytes">
                The sequence of bytes to decompress.
            </param>
        </member>
        <member name="M:SilDev.Compression.GZip.DecompressText(System.Byte[])">
            <summary>
                Decompresses a compressed sequence of bytes back to a <see cref="T:System.String"/>
                value.
            </summary>
            <param name="bytes">
                The sequence of bytes to decompress.
            </param>
        </member>
        <member name="M:SilDev.Compression.Zip.CreateFromDir(System.String,System.String)">
            <summary>
                Creates a archive that contains the files and directories from the
                specified directory.
            </summary>
            <param name="srcDir">
                The path to the directory to be archived.
            </param>
            <param name="destPath">
                The path of the archive to be created.
            </param>
        </member>
        <member name="M:SilDev.Compression.Zip.ExtractToDir(System.String,System.String,System.Boolean)">
            <summary>
                Extracts all the files in the specified zip archive to the specified
                directory on the file system.
            </summary>
            <param name="srcPath">
                The path of the zip archive to extract.
            </param>
            <param name="destDir">
                The path to the directory to place the extracted files in.
            </param>
            <param name="delSrcPath">
                <see langword="true"/> to delete the source archive after extracting;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.DictionaryEx.TryAdd``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>
                Attempts to add  the specified key and value to this dictionary.
                <para>
                    &#9888; Nothing happens if the <paramref name="key"/> already exists.
                </para>
            </summary>
            <typeparam name="TKey">
                The type of the key.
            </typeparam>
            <typeparam name="TValue">
                The type of the value.
            </typeparam>
            <param name="source">
                The <see cref="T:System.Collections.Generic.IDictionary`2"/> to add the key/value pair.
            </param>
            <param name="key">
                The key of the element to add.
            </param>
            <param name="value">
                The value of the element to add. It can be <see langword="null"/>.
            </param>
            <returns>
                <see langword="true"/> if the key/value pair was added successfully;
                otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:SilDev.DictionaryEx.TrySet``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>
                Attempts to add, set, or remove the specified key and value from this
                dictionary.
                <para>
                    &#9762; If the <paramref name="key"/> already exists, it will be
                    overwritten, and if the <paramref name="value"/> is also
                    <see langword="null"/> the <paramref name="key"/> is even completely
                    removed.
                </para>
            </summary>
            <typeparam name="TKey">
                The type of the key.
            </typeparam>
            <typeparam name="TValue">
                The type of the value.
            </typeparam>
            <param name="source">
                The <see cref="T:System.Collections.Generic.IDictionary`2"/> to set the key/value pair.
            </param>
            <param name="key">
                The key of the element to add, set or removed, depending on
                <paramref name="value"/>.
            </param>
            <param name="value">
                The value of the element to add. It can be <see langword="null"/>.
            </param>
            <returns>
                <see langword="true"/> if the key/value pair was updated successfully;
                otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:SilDev.DictionaryEx.TryGetValue``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>
                Gets the value associated with the specified key.
            </summary>
            <typeparam name="TKey">
                The type of the key.
            </typeparam>
            <typeparam name="TValue">
                The type of the value.
            </typeparam>
            <param name="source">
                The <see cref="T:System.Collections.Generic.Dictionary`2"/> to get the value associated with
                the specified key.
            </param>
            <param name="key">
                The key of the value to get.
            </param>
            <param name="defValue">
                The value returned if the key does not exist.
            </param>
            <returns>
                <see langword="true"/> if the object that implements the
                <see cref="T:System.Collections.Generic.Dictionary`2"/> interface contains an element that
                has the specified key; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:SilDev.DictionaryEx.TryGetValue``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0,``1)">
            <summary>
                Gets the value associated with the specified key.
            </summary>
            <typeparam name="TKey">
                The type of the key.
            </typeparam>
            <typeparam name="TValue">
                The type of the value.
            </typeparam>
            <param name="source">
                The <see cref="T:System.Collections.Generic.IDictionary`2"/> to get the value associated
                with the specified key.
            </param>
            <param name="key">
                The key of the value to get.
            </param>
            <param name="defValue">
                The value returned if the key does not exist.
            </param>
            <returns>
                <see langword="true"/> if the object that implements the
                <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2"/> interface contains an
                element that has the specified key; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:SilDev.Drawing.IconFactorySizeOption">
            <summary>
                The option for determining automatic resizing.
            </summary>
        </member>
        <member name="F:SilDev.Drawing.IconFactorySizeOption.Additional">
            <summary>
                The full set includes 8x8, 10x10, 14x14, 16x16, 20x20, 22x22, 24x24, 32x32,
                40x40, 48x48, 64x64, 96x96, 128x128, and 256x256.
            </summary>
        </member>
        <member name="F:SilDev.Drawing.IconFactorySizeOption.Application">
            <summary>
                The minimal set includes 16x16, 24x24, 32x32, 48x48, 64x64, 128x128, and
                256x256.
            </summary>
        </member>
        <member name="T:SilDev.Drawing.IconFactory">
            <summary>
                Provides functions for handling the 'image/vnd.microsoft.icon' file format.
            </summary>
        </member>
        <member name="F:SilDev.Drawing.IconFactory.MaxHeight">
            <summary>
                Represents the largest possible height of an icon.
            </summary>
        </member>
        <member name="F:SilDev.Drawing.IconFactory.MaxWidth">
            <summary>
                Represents the largest possible width of an icon.
            </summary>
        </member>
        <member name="F:SilDev.Drawing.IconFactory.MinHeight">
            <summary>
                Represents the smallest possible height of an icon.
            </summary>
        </member>
        <member name="F:SilDev.Drawing.IconFactory.MinWidth">
            <summary>
                Represents the smallest possible width of an icon.
            </summary>
        </member>
        <member name="P:SilDev.Drawing.IconFactory.MaxSize">
            <summary>
                Represents the largest possible size of an icon.
            </summary>
        </member>
        <member name="P:SilDev.Drawing.IconFactory.MinSize">
            <summary>
                Represents the largest possible size of an icon.
            </summary>
        </member>
        <member name="M:SilDev.Drawing.IconFactory.GetSizes(SilDev.Drawing.IconFactorySizeOption)">
            <summary>
                Retrieves all size dimensions for the specified
                <see cref="T:SilDev.Drawing.IconFactorySizeOption"/> value.
            </summary>
            <param name="option">
                The <see cref="T:SilDev.Drawing.IconFactorySizeOption"/> value.
            </param>
        </member>
        <member name="M:SilDev.Drawing.IconFactory.ImageCorrection(System.Collections.Generic.IEnumerable{System.Drawing.Image})">
            <summary>
                Ensures that all <see cref="T:System.Drawing.Image"/> objects has the correct format and the
                size dimensions are equal and in range of <see cref="P:SilDev.Drawing.IconFactory.MinSize"/> and
                <see cref="P:SilDev.Drawing.IconFactory.MaxSize"/>.
            </summary>
            <param name="images">
                The <see cref="T:System.Drawing.Image"/> objects to be processed.
            </param>
        </member>
        <member name="M:SilDev.Drawing.IconFactory.ImageCorrection(System.Drawing.Image)">
            <summary>
                Ensures that the <see cref="T:System.Drawing.Image"/> object has the correct format and the
                size dimensions are equal and in range of <see cref="P:SilDev.Drawing.IconFactory.MinSize"/> and
                <see cref="P:SilDev.Drawing.IconFactory.MaxSize"/>.
            </summary>
            <param name="image">
                The <see cref="T:System.Drawing.Image"/> object to be processed.
            </param>
        </member>
        <member name="M:SilDev.Drawing.IconFactory.Extract(System.String)">
            <summary>
                Extracts all the <see cref="T:System.Drawing.Image"/>'s from a valid icon file.
            </summary>
            <param name="path">
                The full path to the icon to be extracted.
            </param>
        </member>
        <member name="M:SilDev.Drawing.IconFactory.Save(System.Collections.Generic.IEnumerable{System.Drawing.Image},System.IO.Stream,System.Boolean)">
            <summary>
                Saves the specified sequence of <see cref="T:System.Drawing.Image"/>'s as a single icon into
                the output stream.
            </summary>
            <param name="images">
                The images to be converted into a single icon.
            </param>
            <param name="stream">
                The output stream.
            </param>
            <param name="dispose">
                <see langword="true"/> to release all resources used by the
                <see cref="T:System.IO.Stream"/> after writing; otherwise, <see langword="false"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
                images or stream is null.
            </exception>
        </member>
        <member name="M:SilDev.Drawing.IconFactory.Save(System.Drawing.Image,System.IO.Stream,SilDev.Drawing.IconFactorySizeOption,System.Boolean)">
            <summary>
                Saves multiple sizes of the specified <see cref="T:System.Drawing.Image"/> to a single
                <see cref="T:System.Drawing.Icon"/> file.
            </summary>
            <param name="image">
                The images to be converted into a single icon.
            </param>
            <param name="stream">
                The output stream.
            </param>
            <param name="option">
                The option for determining automatic resizing.
            </param>
            <param name="dispose">
                <see langword="true"/> to release all resources used by the
                <see cref="T:System.IO.Stream"/> after writing; otherwise, <see langword="false"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
                image or stream is null.
            </exception>
            ReSharper disable AccessToDisposedClosure
        </member>
        <member name="M:SilDev.Drawing.IconFactory.Save(System.Collections.Generic.IEnumerable{System.Drawing.Image},System.String)">
            <summary>
                Saves the specified sequence of <see cref="T:System.Drawing.Image"/>'s to a single
                <see cref="T:System.Drawing.Icon"/> file.
            </summary>
            <param name="images">
                The images to be converted into a single icon.
            </param>
            <param name="path">
                The file path to the icon.
            </param>
            <exception cref="T:System.ArgumentNullException">
                images or path is null.
            </exception>
            <exception cref="T:SilDev.ArgumentInvalidException">
                path is invalid.
            </exception>
        </member>
        <member name="M:SilDev.Drawing.IconFactory.Save(System.Drawing.Image,System.String,SilDev.Drawing.IconFactorySizeOption)">
            <summary>
                Saves multiple sizes of the specified <see cref="T:System.Drawing.Image"/> to a single
                <see cref="T:System.Drawing.Icon"/> file.
            </summary>
            <param name="image">
                The images to be converted into a single icon.
            </param>
            <param name="path">
                The file path to the icon.
            </param>
            <param name="option">
                The option for determining automatic resizing.
            </param>
            <exception cref="T:System.ArgumentNullException">
                image or path is null.
            </exception>
            <exception cref="T:SilDev.ArgumentInvalidException">
                path is invalid.
            </exception>
        </member>
        <member name="T:SilDev.Drawing.ImageFrame">
            <summary>
                An base class that provides the <see cref="T:System.Drawing.Image"/> and
                duration of a single frame.
            </summary>
        </member>
        <member name="P:SilDev.Drawing.ImageFrame.Image">
            <summary>
                Gets the image of this <see cref="T:SilDev.Drawing.ImageFrame"/>.
            </summary>
        </member>
        <member name="P:SilDev.Drawing.ImageFrame.Duration">
            <summary>
                Gets the duration time, in milliseconds, of this <see cref="T:SilDev.Drawing.ImageFrame"/>.
            </summary>
        </member>
        <member name="M:SilDev.Drawing.ImageFrame.#ctor(System.Drawing.Image,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Drawing.ImageFrame"/> class from the
                specified existing image and duration time of a single frame.
            </summary>
            <param name="image">
                The frame image from which to create the new Frame.
            </param>
            <param name="duration">
                The duration time, in milliseconds, of the new frame.
            </param>
            <exception cref="T:System.ArgumentNullException">
                image is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                duration is negative or zero.
            </exception>
        </member>
        <member name="M:SilDev.Drawing.ImageFrame.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Drawing.ImageFrame"/> class.
            </summary>
            <param name="info">
                The object that holds the serialized object data.
            </param>
            <param name="context">
                The contextual information about the source or destination.
            </param>
            <exception cref="T:System.ArgumentNullException">
                info is null.
            </exception>
        </member>
        <member name="M:SilDev.Drawing.ImageFrame.Finalize">
            <summary>
                Allows an object to try to free resources and perform other cleanup
                operations before it is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:SilDev.Drawing.ImageFrame.Equals(SilDev.Drawing.ImageFrame)">
            <summary>
                Determines whether the specified frame is equal to the current frame.
            </summary>
            <param name="other">
                The frame to compare with the current frame.
            </param>
        </member>
        <member name="M:SilDev.Drawing.ImageFrame.Equals(System.Object)">
            <summary>
                Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">
                The object to compare with the current object.
            </param>
        </member>
        <member name="M:SilDev.Drawing.ImageFrame.GetHashCode">
            <summary>
                Returns the hash code for the current image pair.
            </summary>
        </member>
        <member name="M:SilDev.Drawing.ImageFrame.Dispose">
            <summary>
                Releases all resources used by this <see cref="T:SilDev.Drawing.ImageFrame"/>.
            </summary>
        </member>
        <member name="M:SilDev.Drawing.ImageFrame.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to
                serialize the target object.
            </summary>
            <param name="info">
                The object that holds the serialized object data.
            </param>
            <param name="context">
                The contextual information about the source or destination.
            </param>
            <exception cref="T:System.ArgumentNullException">
                info is null.
            </exception>
        </member>
        <member name="M:SilDev.Drawing.ImageFrame.Dispose(System.Boolean)">
            <summary>
                Releases all resources used by this <see cref="T:SilDev.Drawing.ImageFrame"/>.
            </summary>
            <param name="disposing">
                <see langword="true"/> to release both managed and unmanaged resources;
                otherwise, <see langword="false"/> to release only unmanaged resources.
                <para>
                    Please note that this parameter is ignored for the
                    <see cref="T:SilDev.Drawing.ImageFrame"/> class.
                </para>
            </param>
        </member>
        <member name="M:SilDev.Drawing.ImageFrame.op_Equality(SilDev.Drawing.ImageFrame,SilDev.Drawing.ImageFrame)">
            <summary>
                Determines whether two specified frames have the same value.
            </summary>
            <param name="left">
                The first frame to compare, or null.
            </param>
            <param name="right">
                The second frame to compare, or null.
            </param>
        </member>
        <member name="M:SilDev.Drawing.ImageFrame.op_Inequality(SilDev.Drawing.ImageFrame,SilDev.Drawing.ImageFrame)">
            <summary>
                Determines whether two specified frames have different values.
            </summary>
            <param name="left">
                The first frame to compare, or null.
            </param>
            <param name="right">
                The second frame to compare, or null.
            </param>
        </member>
        <member name="T:SilDev.Drawing.ColorEx">
            <summary>
                Expands the functionality for the <see cref="T:System.Drawing.Color"/> class.
            </summary>
        </member>
        <member name="M:SilDev.Drawing.ColorEx.RangeOf(System.Drawing.Color,System.Drawing.Color)">
            <summary>
                Returns the range value between two colors based on their
                <see cref="M:System.Drawing.Color.GetHue"/> value.
            </summary>
            <param name="colorA">
                The first color to compare.
            </param>
            <param name="colorB">
                The second color to compare.
            </param>
        </member>
        <member name="M:SilDev.Drawing.ColorEx.IsInRange(System.Drawing.Color,System.Drawing.Color,System.Int32)">
            <summary>
                Determines whether this color is in range of the specified color.
            </summary>
            <param name="colorA">
                The first color to compare.
            </param>
            <param name="colorB">
                The second color to compare.
            </param>
            <param name="threshold">
                The threshold.
            </param>
        </member>
        <member name="M:SilDev.Drawing.ColorEx.IsDark(System.Drawing.Color)">
            <summary>
                Determines whether this color is dark.
            </summary>
            <param name="color">
                The color to check.
            </param>
        </member>
        <member name="M:SilDev.Drawing.ColorEx.IsDarkDark(System.Drawing.Color)">
            <summary>
                Determines whether this color is pretty dark.
            </summary>
            <param name="color">
                The color to check.
            </param>
        </member>
        <member name="M:SilDev.Drawing.ColorEx.IsDarkDarkDark(System.Drawing.Color)">
            <summary>
                Determines whether this color is extremely dark.
            </summary>
            <param name="color">
                The color to check.
            </param>
        </member>
        <member name="M:SilDev.Drawing.ColorEx.IsLight(System.Drawing.Color)">
            <summary>
                Determines whether this color is light.
            </summary>
            <param name="color">
                The color to check.
            </param>
        </member>
        <member name="M:SilDev.Drawing.ColorEx.IsLightLight(System.Drawing.Color)">
            <summary>
                Determines whether this color is pretty light.
            </summary>
            <param name="color">
                The color to check.
            </param>
        </member>
        <member name="M:SilDev.Drawing.ColorEx.IsLightLightLight(System.Drawing.Color)">
            <summary>
                Determines whether this color is extremely light.
            </summary>
            <param name="color">
                The color to check.
            </param>
        </member>
        <member name="M:SilDev.Drawing.ColorEx.EnsureDark(System.Drawing.Color)">
            <summary>
                Decreases the brightness of the specified color if it is too bright based
                on <see cref="M:SilDev.Drawing.ColorEx.IsDark(System.Drawing.Color)"/>.
            </summary>
            <param name="color">
                The color to be adjusted.
            </param>
        </member>
        <member name="M:SilDev.Drawing.ColorEx.EnsureDarkDark(System.Drawing.Color)">
            <summary>
                Decreases the brightness of the specified color if it is too bright based
                on <see cref="M:SilDev.Drawing.ColorEx.IsDarkDark(System.Drawing.Color)"/>.
            </summary>
            <param name="color">
                The color to be adjusted.
            </param>
        </member>
        <member name="M:SilDev.Drawing.ColorEx.EnsureDarkDarkDark(System.Drawing.Color)">
            <summary>
                Decreases the brightness of the specified color if it is too bright based
                on <see cref="M:SilDev.Drawing.ColorEx.IsDarkDarkDark(System.Drawing.Color)"/>.
            </summary>
            <param name="color">
                The color to be adjusted.
            </param>
        </member>
        <member name="M:SilDev.Drawing.ColorEx.EnsureLight(System.Drawing.Color)">
            <summary>
                Increases the brightness of the specified color if it is too dark based on
                <see cref="M:SilDev.Drawing.ColorEx.IsLight(System.Drawing.Color)"/>.
            </summary>
            <param name="color">
                The color to be adjusted.
            </param>
        </member>
        <member name="M:SilDev.Drawing.ColorEx.EnsureLightLight(System.Drawing.Color)">
            <summary>
                Increases the brightness of the specified color if it is too dark based on
                <see cref="M:SilDev.Drawing.ColorEx.IsLightLight(System.Drawing.Color)"/>.
            </summary>
            <param name="color">
                The color to be adjusted.
            </param>
        </member>
        <member name="M:SilDev.Drawing.ColorEx.EnsureLightLightLight(System.Drawing.Color)">
            <summary>
                Increases the brightness of the specified color if it is too dark based on
                <see cref="M:SilDev.Drawing.ColorEx.IsLightLightLight(System.Drawing.Color)"/>.
            </summary>
            <param name="color">
                The color to be adjusted.
            </param>
        </member>
        <member name="M:SilDev.Drawing.ColorEx.GetAppsThemeBackColor(System.Drawing.Color,System.Boolean)">
            <summary>
                Converts the specified color to a dark mode color when
                <see cref="P:SilDev.Desktop.AppsUseDarkTheme"/> is enabled; otherwise the specified
                color will be returned without changes.
            </summary>
            <param name="invertRgb">
                Determines whether <see cref="M:SilDev.Drawing.ColorEx.InvertRgb(System.Drawing.Color,System.Nullable{System.Byte})"/> should be used
                instead of <see cref="M:SilDev.Drawing.ColorEx.EnsureDarkDarkDark(System.Drawing.Color)"/> for the transformation.
            </param>
        </member>
        <member name="M:SilDev.Drawing.ColorEx.GetAppsThemeForeColor(System.Drawing.Color,System.Boolean)">
            <summary>
                Converts the specified color to a dark mode color when
                <see cref="P:SilDev.Desktop.AppsUseDarkTheme"/> is enabled; otherwise the specified
                color will be returned without changes.
            </summary>
            <param name="invertRgb">
                Determines whether <see cref="M:SilDev.Drawing.ColorEx.InvertRgb(System.Drawing.Color,System.Nullable{System.Byte})"/> should be used
                instead of <see cref="M:SilDev.Drawing.ColorEx.EnsureLightLightLight(System.Drawing.Color)"/> for the
                transformation.
            </param>
        </member>
        <member name="M:SilDev.Drawing.ColorEx.GetRandomColor(System.Int32)">
            <summary>
                Creates a random color based on the specified seed.
            </summary>
            <param name="seed">
            </param>
        </member>
        <member name="M:SilDev.Drawing.ColorEx.GetRandomKnownColor(System.Int32)">
            <summary>
                Creates a random known system color based on the specified seed.
            </summary>
            <param name="seed">
            </param>
        </member>
        <member name="M:SilDev.Drawing.ColorEx.FromHtml(System.String,System.Drawing.Color)">
            <summary>
                Translates an HTML color representation to a GDI+ <see cref="T:System.Drawing.Color"/>
                structure.
            </summary>
            <param name="htmlColor">
                The string representation of the HTML color to translate.
            </param>
            <param name="defColor">
                The color that is set if no HTML color was found.
            </param>
        </member>
        <member name="M:SilDev.Drawing.ColorEx.FromHtml(System.String,System.Drawing.Color,System.Byte)">
            <summary>
                Translates an HTML color representation to a GDI+ <see cref="T:System.Drawing.Color"/>
                structure.
            </summary>
            <param name="htmlColor">
                The string representation of the HTML color to translate.
            </param>
            <param name="defColor">
                The color that is set if no HTML color was found.
            </param>
            <param name="alpha">
                The alpha component. Valid values are 0 through 255.
            </param>
        </member>
        <member name="M:SilDev.Drawing.ColorEx.FromHtml(System.String,System.Byte)">
            <summary>
                Translates an HTML color representation to a GDI+ <see cref="T:System.Drawing.Color"/>
                structure.
            </summary>
            <param name="htmlColor">
                The string representation of the HTML color to translate.
            </param>
            <param name="alpha">
                The alpha component. Valid values are 0 through 255.
            </param>
        </member>
        <member name="M:SilDev.Drawing.ColorEx.ToHtml(System.UInt32,System.Boolean)">
            <summary>
                Translates the specified 32-bit (A)RGB value to an HTML string color
                representation.
            </summary>
            <param name="argb">
                A value specifying the 32-bit (A)RGB value.
            </param>
            <param name="alpha">
                <see langword="true"/> to translate also the alpha value; otherwise,
                <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Drawing.ColorEx.ToHtml(System.Int64,System.Boolean)">
            <summary>
                Translates the specified 32-bit (A)RGB value to an HTML string color
                representation.
            </summary>
            <param name="argb">
                A value specifying the 32-bit (A)RGB value.
            </param>
            <param name="alpha">
                <see langword="true"/> to translate also the alpha value; otherwise,
                <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Drawing.ColorEx.ToHtml(System.Drawing.Color,System.Boolean)">
            <summary>
                Translates the specified <see cref="T:System.Drawing.Color"/> structure to an HTML string
                color representation.
            </summary>
            <param name="color">
                The <see cref="T:System.Drawing.Color"/> structure to translate.
            </param>
            <param name="alpha">
                <see langword="true"/> to translate also the alpha value; otherwise,
                <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Drawing.ColorEx.ToHtml(System.Drawing.Color,System.Nullable{System.Byte})">
            <summary>
                Translates the specified <see cref="T:System.Drawing.Color"/> structure to an HTML string
                color representation.
            </summary>
            <param name="color">
                The <see cref="T:System.Drawing.Color"/> structure to translate.
            </param>
            <param name="alpha">
                The alpha component. Valid values are 0 through 255.
            </param>
        </member>
        <member name="M:SilDev.Drawing.ColorEx.FromRgb(System.Int32)">
            <summary>
                Creates a <see cref="T:System.Drawing.Color"/> structure from a 32-bit RGB value.
            </summary>
            <param name="rgb">
                A value specifying the 32-bit RGB value.
            </param>
        </member>
        <member name="M:SilDev.Drawing.ColorEx.ToRgb(System.Drawing.Color)">
            <summary>
                Gets the 32-bit RGB value of this <see cref="T:System.Drawing.Color"/> structure.
            </summary>
            <param name="color">
                The <see cref="T:System.Drawing.Color"/> structure to translate.
            </param>
        </member>
        <member name="M:SilDev.Drawing.ColorEx.ToArgbArray(System.Drawing.Color)">
            <summary>
                Copies the elements of the 32-bit ARGB value of this <see cref="T:System.Drawing.Color"/>
                structure to a new array.
            </summary>
            <param name="color">
                The <see cref="T:System.Drawing.Color"/> structure to translate.
            </param>
        </member>
        <member name="M:SilDev.Drawing.ColorEx.ToRgbArray(System.Drawing.Color)">
            <summary>
                Copies the elements of the 32-bit RGB value of this <see cref="T:System.Drawing.Color"/>
                structure to a new array.
            </summary>
            <param name="color">
                The <see cref="T:System.Drawing.Color"/> structure to translate.
            </param>
        </member>
        <member name="M:SilDev.Drawing.ColorEx.InvertRgb(System.Drawing.Color,System.Nullable{System.Byte})">
            <summary>
                Inverts the three RGB component (red, green, blue) values of the specified
                <see cref="T:System.Drawing.Color"/> structure.
            </summary>
            <param name="color">
                The color to invert.
            </param>
            <param name="alpha">
                The alpha component. Valid values are 0 through 255.
            </param>
        </member>
        <member name="M:SilDev.Drawing.ColorEx.ToGrayScale(System.Drawing.Color)">
            <summary>
                Scales the three RGB component (red, green, blue) values of the specified
                <see cref="T:System.Drawing.Color"/> structure to gray.
            </summary>
            <param name="color">
                The color to scale.
            </param>
        </member>
        <member name="M:SilDev.Drawing.ColorEx.GetAverageColor(System.Drawing.Image,System.Boolean)">
            <summary>
                Gets the average RGB component (red, green, blue) values from the specified
                <see cref="T:System.Drawing.Image"/>.
            </summary>
            <param name="image">
                The input image.
            </param>
            <param name="disposeImage">
                <see langword="true"/> to release all resources used by the specified
                <see cref="T:System.Drawing.Image"/>; otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="T:SilDev.Drawing.IconEx">
            <summary>
                Expands the functionality for the <see cref="T:System.Drawing.Icon"/> class.
            </summary>
        </member>
        <member name="M:SilDev.Drawing.IconEx.ToIcon(System.Drawing.Image,System.Int32)">
            <summary>
                Converts this GDI+ <see cref="T:System.Drawing.Image"/> to an <see cref="T:System.Drawing.Icon"/>.
            </summary>
            <param name="image">
                The image to convert.
            </param>
            <param name="size">
                The icon size.
            </param>
        </member>
        <member name="T:SilDev.Drawing.ImageEx">
            <summary>
                Expands the functionality for the <see cref="T:System.Drawing.Image"/> class.
            </summary>
        </member>
        <member name="P:SilDev.Drawing.ImageEx.DimEmpty">
            <summary>
                Gets an <see cref="T:System.Drawing.Image"/> object which consists of a semi-transparent
                black color.
            </summary>
        </member>
        <member name="P:SilDev.Drawing.ImageEx.DefaultSearchSymbol">
            <summary>
                Gets an <see cref="T:System.Drawing.Image"/> object that contains a white 16px large search
                symbol.
            </summary>
        </member>
        <member name="M:SilDev.Drawing.ImageEx.SizeIsValid(System.Int32,System.Drawing.Imaging.PixelFormat)">
            <summary>
                Determines whether the specified pixel size indicator is within the allowed
                range, depending on the specified pixel format.
            </summary>
            <param name="pixelIndicator">
                The pixel size indicator to check.
                <para>
                    The pixel size indicator represents the maximum value between the width
                    and height of an image.
                </para>
            </param>
            <param name="pixelFormat">
                The pixel format.
            </param>
        </member>
        <member name="M:SilDev.Drawing.ImageEx.SizeIsValid(System.Int32,System.Int32,System.Drawing.Imaging.PixelFormat)">
            <summary>
                Determines whether the specified image width and height is within the
                allowed range, depending on the specified pixel format.
            </summary>
            <param name="width">
                The image width to check.
            </param>
            <param name="height">
                The image height to check.
            </param>
            <param name="pixelFormat">
                The pixel format.
            </param>
        </member>
        <member name="M:SilDev.Drawing.ImageEx.SizeIsValid(System.Drawing.Size,System.Drawing.Imaging.PixelFormat)">
            <summary>
                Determines whether the specified image size is within the allowed range,
                depending on the specified pixel format.
            </summary>
            <param name="size">
                The image size to check.
            </param>
            <param name="pixelFormat">
                The pixel format.
            </param>
        </member>
        <member name="M:SilDev.Drawing.ImageEx.SizeIsValid(System.Drawing.Image)">
            <summary>
                Determines whether the specified image size is within the allowed range.
            </summary>
            <param name="image">
                The image to check.
            </param>
        </member>
        <member name="M:SilDev.Drawing.ImageEx.ToImage(System.Drawing.Color,System.Int32,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Drawing.Image"/> class with the
                specified color as background.
            </summary>
            <param name="color">
                The color to convert.
            </param>
            <param name="width">
                The width of the <see cref="T:System.Drawing.Image"/>.
            </param>
            <param name="height">
                The height of the <see cref="T:System.Drawing.Image"/>.
            </param>
        </member>
        <member name="M:SilDev.Drawing.ImageEx.Redraw(System.Drawing.Image,System.Int32,System.Int32,System.Drawing.Drawing2D.SmoothingMode)">
            <summary>
                Redraws this image with the specified size and with the specified rendering
                quality.
            </summary>
            <param name="image">
                The image to draw.
            </param>
            <param name="width">
                The new width of the image.
            </param>
            <param name="heigth">
                The new height of the image.
            </param>
            <param name="quality">
                The rendering quality for the image.
            </param>
        </member>
        <member name="M:SilDev.Drawing.ImageEx.Redraw(System.Drawing.Image,System.Drawing.Drawing2D.SmoothingMode,System.Int32)">
            <summary>
                Redraws this image with the specified maximum size indicator and with the
                specified rendering quality.
            </summary>
            <param name="image">
                The image to draw.
            </param>
            <param name="quality">
                The rendering quality for the image.
            </param>
            <param name="indicator">
                Specifies the maximal size indicator, which determines when the image gets
                a new size.
            </param>
        </member>
        <member name="M:SilDev.Drawing.ImageEx.Redraw(System.Drawing.Image,System.Int32)">
            <summary>
                Redraws this image with the specified maximum size indicator and with the
                highest available rendering quality.
            </summary>
            <param name="image">
                The image to draw.
            </param>
            <param name="indicator">
                Specifies the maximal size indicator, which determines when the image gets
                a new size.
            </param>
        </member>
        <member name="M:SilDev.Drawing.ImageEx.Blur(System.Drawing.Image,System.Int32)">
            <summary>
                Blurs this image with the specified strength.
            </summary>
            <param name="image">
                The image to blur.
            </param>
            <param name="strength">
                The strength, which must be between 1 and 99.
            </param>
            <exception cref="T:System.ArgumentNullException">
                image is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                strength is less than 1 or greater than 99.
            </exception>
        </member>
        <member name="M:SilDev.Drawing.ImageEx.SetColorMatrix(System.Drawing.Image,System.Drawing.Imaging.ColorMatrix,System.Single)">
            <summary>
                Sets the color-adjustment matrix for this image.
            </summary>
            <param name="image">
                The image to change.
            </param>
            <param name="colorMatrix">
                The color-adjustment matrix to set.
            </param>
            <param name="gamma">
                The gamma value to set.
            </param>
        </member>
        <member name="M:SilDev.Drawing.ImageEx.ChangeColorMatrix(System.Drawing.Image,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Changes the color-adjustments of this image.
            </summary>
            <param name="image">
                The image to change.
            </param>
            <param name="brightness">
                The brightness value to set.
            </param>
            <param name="contrast">
                The contrast value to set.
            </param>
            <param name="gamma">
                The gamma value to set.
            </param>
            <param name="alpha">
                The alpha value to set.
            </param>
        </member>
        <member name="M:SilDev.Drawing.ImageEx.SetBrightness(System.Drawing.Image,System.Single)">
            <summary>
                Sets the brightness of this image.
            </summary>
            <param name="image">
                The image to change.
            </param>
            <param name="brightness">
                The brightness value to set.
            </param>
        </member>
        <member name="M:SilDev.Drawing.ImageEx.SetContrast(System.Drawing.Image,System.Single)">
            <summary>
                Sets the contrast of this image.
            </summary>
            <param name="image">
                The image to change.
            </param>
            <param name="contrast">
                The contrast value to set.
            </param>
        </member>
        <member name="M:SilDev.Drawing.ImageEx.SetGamma(System.Drawing.Image,System.Single)">
            <summary>
                Sets the gamma of this image.
            </summary>
            <param name="image">
                The image to change.
            </param>
            <param name="gamma">
                The gamma value to set.
            </param>
        </member>
        <member name="M:SilDev.Drawing.ImageEx.SetAlpha(System.Drawing.Image,System.Single)">
            <summary>
                Sets the alpha of this image.
            </summary>
            <param name="image">
                The image to change.
            </param>
            <param name="alpha">
                The alpha value to set.
            </param>
        </member>
        <member name="M:SilDev.Drawing.ImageEx.InvertColors(System.Drawing.Image)">
            <summary>
                Inverts the color matrix of this image.
            </summary>
            <param name="image">
                The image to convert.
            </param>
        </member>
        <member name="M:SilDev.Drawing.ImageEx.HueRotate(System.Drawing.Image,System.Int32)">
            <summary>
                Applies a color rotation to this image.
            </summary>
            <param name="image">
                The image to change.
            </param>
            <param name="angle">
                An angle to rotate.
            </param>
        </member>
        <member name="M:SilDev.Drawing.ImageEx.ToGrayScale(System.Drawing.Image)">
            <summary>
                Scales the color matrix of this image to gray.
            </summary>
            <param name="image">
                The image to scale.
            </param>
        </member>
        <member name="M:SilDev.Drawing.ImageEx.SwitchGrayScale(System.Drawing.Image,System.Object,System.Boolean)">
            <summary>
                Scales the color matrix of this image to gray and switch back to the
                original image the next time this function is called.
            </summary>
            <param name="image">
                The image to switch.
            </param>
            <param name="key">
                The key for the cache.
            </param>
            <param name="dispose">
                <see langword="true"/> to dispose the cached images; otherwise,
                <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Drawing.ImageEx.RecolorPixels(System.Drawing.Image,System.Drawing.Color,System.Drawing.Color)">
            <summary>
                Recolors the pixels of this image using a specified old color and a
                specified new color.
            </summary>
            <param name="image">
                The image to change.
            </param>
            <param name="from">
                The color of the pixel to be changed.
            </param>
            <param name="to">
                The new color of the pixel.
            </param>
        </member>
        <member name="M:SilDev.Drawing.ImageEx.ToBytes(System.Drawing.Image)">
            <summary>
                Converts this image into a sequence of bytes.
            </summary>
            <param name="image">
                The image to convert.
            </param>
            <exception cref="T:System.ArgumentNullException">
                image is null.
            </exception>
        </member>
        <member name="M:SilDev.Drawing.ImageEx.GetFrames(System.Drawing.Image,System.Boolean)">
            <summary>
                Gets the frames of this image.
            </summary>
            <param name="image">
                The image to get the frames.
            </param>
            <param name="disposeImage">
                <see langword="true"/> to dispose the original image; otherwise,
                <see langword="false"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
                image is null.
            </exception>
        </member>
        <member name="M:SilDev.Drawing.ImageEx.EqualsEx(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
                Determines whether this <see cref="T:System.Drawing.Bitmap"/> has the same value as the
                specified <see cref="T:System.Drawing.Bitmap"/> based on its <see cref="T:System.Drawing.Imaging.PixelFormat"/>,
                <see cref="T:System.Drawing.Imaging.ImageFormat"/>, and <see cref="M:SilDev.Drawing.ImageEx.ToBytes(System.Drawing.Image)"/>.
            </summary>
            <param name="source">
                The <see cref="T:System.Drawing.Bitmap"/> to check.
            </param>
            <param name="target">
                The <see cref="T:System.Drawing.Bitmap"/> to compare.
            </param>
        </member>
        <member name="M:SilDev.Drawing.ImageEx.EqualsEx(System.Drawing.Image,System.Drawing.Image)">
            <summary>
                Determines whether this <see cref="T:System.Drawing.Image"/> has the same value as the
                specified <see cref="T:System.Drawing.Image"/> based on its <see cref="T:System.Drawing.Imaging.PixelFormat"/>,
                <see cref="T:System.Drawing.Imaging.ImageFormat"/>, and <see cref="M:SilDev.Drawing.ImageEx.ToBytes(System.Drawing.Image)"/>.
            </summary>
            <param name="source">
                The <see cref="T:System.Drawing.Image"/> to check.
            </param>
            <param name="target">
                The <see cref="T:System.Drawing.Image"/> to compare.
            </param>
        </member>
        <member name="M:SilDev.Drawing.ImageEx.CaptureDesktop(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Captures the entire desktop under the specified window.
            </summary>
            <param name="hWnd">
                Handle to a window.
            </param>
            <param name="x">
                The x-coordinate, in logical units, of the upper-left corner of the
                destination image.
            </param>
            <param name="y">
                The y-coordinate, in logical units, of the upper-left corner of the
                destination image.
            </param>
            <param name="width">
                The width, in logical units, of the source and destination image.
            </param>
            <param name="height">
                The height, in logical units, of the source and the destination image.
            </param>
        </member>
        <member name="T:SilDev.Drawing.SizeEx">
            <summary>
                Expands the functionality for the <see cref="T:System.Drawing.Size"/> class.
            </summary>
        </member>
        <member name="M:SilDev.Drawing.SizeEx.GetDesktopSize(System.Drawing.Point)">
            <summary>
                Gets the desktop size of the screen where the specified x- and
                y-coordinates are located.
            </summary>
            <param name="point">
                The x- and y-coordinates from which to determine the desktop size.
            </param>
        </member>
        <member name="M:SilDev.Drawing.SizeEx.GetActiveDesktopSize">
            <summary>
                Gets the desktop size of the screen where the mouse pointer is located.
            </summary>
        </member>
        <member name="M:SilDev.Drawing.SizeEx.ScaleDimension(System.Single,System.Single,System.Single)">
            <summary>
                Scales the specified width or height dimension based on the specified DPI
                values.
            </summary>
            <param name="value">
                The width or height dimension.
            </param>
            <param name="oldDpi">
                The old resolution.
            </param>
            <param name="newDpi">
                The new resolution.
            </param>
        </member>
        <member name="M:SilDev.Drawing.SizeEx.ScaleDimension(System.Int32,System.Single,System.Single)">
            <inheritdoc cref="M:SilDev.Drawing.SizeEx.ScaleDimension(System.Single,System.Single,System.Single)"/>
        </member>
        <member name="M:SilDev.Drawing.SizeEx.ScaleDimensions(System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
                Scales the specified width and height dimensions based on the specified DPI
                values.
            </summary>
            <param name="width">
                The width dimension.
            </param>
            <param name="height">
                The height dimension.
            </param>
            <param name="oldDpi">
                The old resolution.
            </param>
            <param name="newDpi">
                The new resolution.
            </param>
        </member>
        <member name="M:SilDev.Drawing.SizeEx.ScaleDimensions(System.Int32,System.Int32,System.IntPtr)">
            <summary>
                Scales the specified width and height dimensions based on the specified
                handle to a window.
            </summary>
            <param name="width">
                The width dimension.
            </param>
            <param name="height">
                The height dimension.
            </param>
            <param name="hWnd">
                Handle to a window.
                <para>
                    If this value is set to default, the handle of the current desktop will
                    be used.
                </para>
            </param>
        </member>
        <member name="M:SilDev.Drawing.SizeEx.ScaleDimensions(System.Drawing.Size,System.Single,System.Single)">
            <summary>
                Scales the width and height dimensions of this <see cref="T:System.Drawing.Size"/> object
                based on the specified DPI values.
            </summary>
            <param name="size">
                This <see cref="T:System.Drawing.Size"/> object.
            </param>
            <param name="oldDpi">
                The old resolution.
            </param>
            <param name="newDpi">
                The new resolution.
            </param>
        </member>
        <member name="M:SilDev.Drawing.SizeEx.ScaleDimensions(System.Drawing.Size,System.IntPtr)">
            <summary>
                Scales the width and height dimensions of this <see cref="T:System.Drawing.Size"/> object
                based on the specified handle to a window.
            </summary>
            <param name="size">
                This <see cref="T:System.Drawing.Size"/> object.
            </param>
            <param name="hWnd">
                Handle to a window.
                <para>
                    If this value is set to default, the handle of the current desktop will
                    be used.
                </para>
            </param>
        </member>
        <member name="T:SilDev.EncodingEx">
            <summary>
                Provides static functions based on the <see cref="T:System.Text.Encoding"/> class.
            </summary>
        </member>
        <member name="P:SilDev.EncodingEx.Ansi">
            <summary>
                Gets the ANSI (Windows-1252) character encoding.
            </summary>
        </member>
        <member name="P:SilDev.EncodingEx.Utf8NoBom">
            <summary>
                Gets the UTF-8 character encoding without BOM.
            </summary>
        </member>
        <member name="M:SilDev.EncodingEx.ChangeEncoding(System.String,System.Text.Encoding)">
            <summary>
                Changes the character encoding of the specified file. This function
                supports big files as well.
            </summary>
            <param name="file">
                The file to change.
            </param>
            <param name="encoding">
                The new character encoding. If <see langword="null"/>, <see cref="P:SilDev.EncodingEx.Ansi"/>
                is used.
            </param>
        </member>
        <member name="M:SilDev.EncodingEx.GetEncoding(System.String,System.Text.Encoding)">
            <summary>
                Gets the character encoding of the specified file.
            </summary>
            <param name="file">
                The file to check.
            </param>
            <param name="defEncoding">
                The default character encoding, which is returned if no character encoding
                was found. If <see langword="null"/>, <see cref="P:SilDev.EncodingEx.Ansi"/> is used.
            </param>
        </member>
        <member name="T:SilDev.Forms.ControlAlphaNumericComparer">
            <summary>
                Provides a base class for comparison.
            </summary>
        </member>
        <member name="M:SilDev.Forms.ControlAlphaNumericComparer.#ctor(System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Forms.ControlAlphaNumericComparer"/>
                class. A parameter specifies whether the order is descended.
            </summary>
            <param name="descendant">
                <see langword="true"/> to enable the descending order; otherwise,
                <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Forms.ControlAlphaNumericComparer.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Forms.ControlAlphaNumericComparer"/>
                class.
            </summary>
        </member>
        <member name="M:SilDev.Forms.ControlAlphaNumericComparer.GetString(System.Object)">
            <summary>
                Gets the string of the object that is used for comparison.
            </summary>
            <param name="value">
                The object to compare.
            </param>
        </member>
        <member name="T:SilDev.Forms.FormBorderlessResizable">
            <summary>
                Represents a window or dialog box that makes up an application's user
                interface.
            </summary>
        </member>
        <member name="T:SilDev.Forms.FormBorderlessResizable.ResizingBorderFlags">
            <summary>
                Provides enumerated values for determining sizing border areas.
            </summary>
        </member>
        <member name="F:SilDev.Forms.FormBorderlessResizable.ResizingBorderFlags.None">
            <summary>
                No border or corner of a window.
            </summary>
        </member>
        <member name="F:SilDev.Forms.FormBorderlessResizable.ResizingBorderFlags.Left">
            <summary>
                The left border of a window.
            </summary>
        </member>
        <member name="F:SilDev.Forms.FormBorderlessResizable.ResizingBorderFlags.Right">
            <summary>
                The right border of a window.
            </summary>
        </member>
        <member name="F:SilDev.Forms.FormBorderlessResizable.ResizingBorderFlags.Top">
            <summary>
                The upper-horizontal border of a window.
            </summary>
        </member>
        <member name="F:SilDev.Forms.FormBorderlessResizable.ResizingBorderFlags.TopLeft">
            <summary>
                The upper-left corner of a window border.
            </summary>
        </member>
        <member name="F:SilDev.Forms.FormBorderlessResizable.ResizingBorderFlags.TopRight">
            <summary>
                The upper-right corner of a window border.
            </summary>
        </member>
        <member name="F:SilDev.Forms.FormBorderlessResizable.ResizingBorderFlags.Bottom">
            <summary>
                The lower-horizontal border of a window.
            </summary>
        </member>
        <member name="F:SilDev.Forms.FormBorderlessResizable.ResizingBorderFlags.BottomLeft">
            <summary>
                The lower-left corner of a border of a window.
            </summary>
        </member>
        <member name="F:SilDev.Forms.FormBorderlessResizable.ResizingBorderFlags.BottomRight">
            <summary>
                The lower-right corner of a border of a window.
            </summary>
        </member>
        <member name="F:SilDev.Forms.FormBorderlessResizable.ResizingBorderFlags.All">
            <summary>
                All borders and corners of a window.
            </summary>
        </member>
        <member name="T:SilDev.Forms.FormBorderlessResizable.WindowsMessage">
            <summary>
                Provides enumerated Windows <see cref="T:System.Windows.Forms.Message"/>'s, used within a
                <see cref="M:SilDev.Forms.FormBorderlessResizable.WndProc(System.Windows.Forms.Message@)"/> override.
            </summary>
        </member>
        <member name="F:SilDev.Forms.FormBorderlessResizable.WindowsMessage.MouseFirst">
            <summary>
                Specify the first mouse message.
            </summary>
        </member>
        <member name="F:SilDev.Forms.FormBorderlessResizable.WindowsMessage.NcHitTest">
            <summary>
                Sent to a window in order to determine what part of the window corresponds
                to a particular screen coordinate. This can happen, for example, when the
                cursor moves, when a mouse button is pressed or released, or in response to
                a call to a function such as WindowFromPoint. If the mouse is not captured,
                the message is sent to the window beneath the cursor. Otherwise, the
                message is sent to the window that has captured the mouse.
            </summary>
        </member>
        <member name="P:SilDev.Forms.FormBorderlessResizable.AllBorderAreas">
            <summary>
                Gets all border areas.
            </summary>
        </member>
        <member name="P:SilDev.Forms.FormBorderlessResizable.ResizingBorders">
            <summary>
                The <see cref="T:SilDev.Forms.FormBorderlessResizable.ResizingBorderFlags"/> flags for resizing.
            </summary>
        </member>
        <member name="P:SilDev.Forms.FormBorderlessResizable.RoundCorners">
            <summary>
                Determines whether the corners of the window are rounded.
                <para>
                    &#9888; This feature requires at least Windows 11, where it is enabled
                    by default.
                </para>
            </summary>
        </member>
        <member name="P:SilDev.Forms.FormBorderlessResizable.BorderThickness">
            <summary>
                Gets the border thickness.
            </summary>
        </member>
        <member name="M:SilDev.Forms.FormBorderlessResizable.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Forms.FormBorderlessResizable"/>
                form class.
            </summary>
        </member>
        <member name="M:SilDev.Forms.FormBorderlessResizable.GetResizingBorderAreas(SilDev.Forms.FormBorderlessResizable.ResizingBorderFlags,System.Int32)">
            ReSharper disable CommentTypo
            <summary>
                Get the border areas depending on the specified
                <see cref="T:SilDev.Forms.FormBorderlessResizable.ResizingBorderFlags"/> flags.
                <para>
                    This method is used by the
                    <see cref="M:SilDev.Forms.FormBorderlessResizable.GetActiveResizingBorderMessage(SilDev.Forms.FormBorderlessResizable.ResizingBorderFlags,System.IntPtr,System.Int32)"/>
                    function.
                </para>
            </summary>
            <param name="flags">
                The <see cref="T:SilDev.Forms.FormBorderlessResizable.ResizingBorderFlags"/> flags.
            </param>
            <param name="thickness">
                The border thickness. Valid values are 1 through 32.
            </param>
            <returns>
                The return value is a <see cref="T:System.Collections.Generic.Dictionary`2"/> with HTLEFT,
                HTRIGHT, HTTOP, HTTOPLEFT, HTTOPRIGHT, HTBOTTOM, HTBOTTOMLEFT, and/or
                HTBOTTOMRIGHT values, indicating the position of the cursor hot spot, as
                key; and a <see cref="T:System.Drawing.Rectangle"/> with the border coordinates as value.
            </returns>
        </member>
        <member name="M:SilDev.Forms.FormBorderlessResizable.GetActiveResizingBorderMessage(SilDev.Forms.FormBorderlessResizable.ResizingBorderFlags,System.IntPtr,System.Int32)">
            ReSharper disable CommentTypo
            <summary>
                Get the active border area <see cref="T:System.Windows.Forms.Message"/> depending on the specified
                <see cref="T:SilDev.Forms.FormBorderlessResizable.ResizingBorderFlags"/> flags.
                <para>
                    This method is recommended to use within a <see cref="M:SilDev.Forms.FormBorderlessResizable.WndProc(System.Windows.Forms.Message@)"/>
                    override.
                </para>
            </summary>
            <param name="flags">
                The <see cref="T:SilDev.Forms.FormBorderlessResizable.ResizingBorderFlags"/> flags.
            </param>
            <param name="lParam">
                The <see cref="T:System.Windows.Forms.Message"/>.LParam field of the message.
            </param>
            <param name="thickness">
                The border thickness. Valid values are 1 through 32.
            </param>
            <returns>
                The return value is HTLEFT, HTRIGHT, HTTOP, HTTOPLEFT, HTTOPRIGHT,
                HTBOTTOM, HTBOTTOMLEFT, or HTBOTTOMRIGHT, indicating the position of the
                cursor hot spot, used to specify the value that is returned to Windows in
                response to handling the <see cref="T:System.Windows.Forms.Message"/>.
            </returns>
        </member>
        <member name="M:SilDev.Forms.FormBorderlessResizable.SetResizingBorders(SilDev.TaskBarLocation,SilDev.TaskBarAlignment)">
            <summary>
                Sets the <see cref="P:SilDev.Forms.FormBorderlessResizable.ResizingBorders"/> flags depending on the specified
                taskbar location and alignment.
                <para>
                    Result for <see cref="F:SilDev.TaskBarLocation.Left"/>:
                    <code>
                        <see cref="F:SilDev.Forms.FormBorderlessResizable.ResizingBorderFlags.Right"/> | <see cref="F:SilDev.Forms.FormBorderlessResizable.ResizingBorderFlags.Bottom"/> |
                        <see cref="F:SilDev.Forms.FormBorderlessResizable.ResizingBorderFlags.BottomRight"/>
                    </code>
                </para>
                <para>
                    Result for <see cref="F:SilDev.TaskBarLocation.Right"/>:
                    <code>
                        <see cref="F:SilDev.Forms.FormBorderlessResizable.ResizingBorderFlags.Left"/> | <see cref="F:SilDev.Forms.FormBorderlessResizable.ResizingBorderFlags.Bottom"/> |
                        <see cref="F:SilDev.Forms.FormBorderlessResizable.ResizingBorderFlags.BottomLeft"/>
                    </code>
                </para>
                <para>
                    Result for <see cref="F:SilDev.TaskBarLocation.Top"/>:
                    <code>
                        <see cref="F:SilDev.Forms.FormBorderlessResizable.ResizingBorderFlags.Right"/> | <see cref="F:SilDev.Forms.FormBorderlessResizable.ResizingBorderFlags.Bottom"/> |
                        <see cref="F:SilDev.Forms.FormBorderlessResizable.ResizingBorderFlags.BottomRight"/>
                    </code>
                </para>
                <para>
                    Result for <see cref="F:SilDev.TaskBarLocation.Bottom"/>:
                    <code>
                        <see cref="F:SilDev.Forms.FormBorderlessResizable.ResizingBorderFlags.Right"/> | <see cref="F:SilDev.Forms.FormBorderlessResizable.ResizingBorderFlags.Top"/> |
                        <see cref="F:SilDev.Forms.FormBorderlessResizable.ResizingBorderFlags.TopRight"/>
                    </code>
                </para>
                <para>
                    Result for <see cref="F:SilDev.TaskBarLocation.Hidden"/>:
                    <code>
                        <see cref="F:SilDev.Forms.FormBorderlessResizable.ResizingBorderFlags.All"/>
                    </code>
                </para>
                <para>
                    Result for <see cref="F:SilDev.TaskBarAlignment.Center"/>:
                    <code>
                        <see cref="F:SilDev.Forms.FormBorderlessResizable.ResizingBorderFlags.Left"/> is added to <see cref="F:SilDev.TaskBarLocation.Top"/> and <see cref="F:SilDev.TaskBarLocation.Bottom"/>
                    </code>
                </para>
            </summary>
            <param name="taskBarLocation">
                The <see cref="T:SilDev.TaskBarLocation"/>.
            </param>
            <param name="taskBarAlignment">
                The <see cref="T:SilDev.TaskBarAlignment"/>.
            </param>
        </member>
        <member name="M:SilDev.Forms.FormBorderlessResizable.OnLoad(System.EventArgs)">
            <summary>
                Raises the <see cref="E:System.Windows.Forms.Form.Load"/> event.
            </summary>
            <param name="e">
                An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
        </member>
        <member name="M:SilDev.Forms.FormBorderlessResizable.WhenShown(System.Object,System.EventArgs)">
            <summary>
                Occurs whenever the form is first displayed.
            </summary>
            <param name="sender">
                The object that owns the event.
            </param>
            <param name="e">
                An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
        </member>
        <member name="M:SilDev.Forms.FormBorderlessResizable.WndProc(System.Windows.Forms.Message@)">
            <summary>
                Processes Windows messages.
            </summary>
            <param name="m">
                The Windows <see cref="T:System.Windows.Forms.Message"/> to process.
            </param>
        </member>
        <member name="T:SilDev.Forms.IconBrowserDialog">
            <summary>
                Displays a dialog box that prompts to the user to browse the icon resource
                of a file.
            </summary>
        </member>
        <member name="P:SilDev.Forms.IconBrowserDialog.IconPath">
            <summary>
                Gets the icon resource path.
            </summary>
        </member>
        <member name="P:SilDev.Forms.IconBrowserDialog.IconId">
            <summary>
                Gets the icon resource identifier.
            </summary>
        </member>
        <member name="M:SilDev.Forms.IconBrowserDialog.#ctor(System.String,System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color})">
            <summary>
                Initializes an instance of the <see cref="T:SilDev.Forms.IconBrowserDialog"/> class.
            </summary>
            <param name="path">
                The path of the file to open.
            </param>
            <param name="backColor">
                The background color of the dialog box.
            </param>
            <param name="foreColor">
                The foreground color of the dialog box.
            </param>
            <param name="buttonFace">
                The button color of the dialog box.
            </param>
            <param name="buttonText">
                The button text color of the dialog box.
            </param>
            <param name="buttonHighlight">
                The button highlight color of the dialog box.
            </param>
        </member>
        <member name="M:SilDev.Forms.IconBrowserDialog.Dispose(System.Boolean)">
            <summary>
                Disposes of the resources (other than memory) used by the
                <see cref="T:System.Windows.Forms.Form"/>.
            </summary>
        </member>
        <member name="T:SilDev.Forms.ListViewDoubleBuffered">
            <summary>
                Represents a Windows list view control, which displays a collection of
                items that can be displayed using one of four different views.
            </summary>
        </member>
        <member name="M:SilDev.Forms.ListViewDoubleBuffered.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:System.Windows.Forms.ListView"/> class.
            </summary>
        </member>
        <member name="M:SilDev.Forms.ListViewDoubleBuffered.OnNotifyMessage(System.Windows.Forms.Message)">
            <summary>
                Notifies the control of Windows messages.
            </summary>
            <param name="m">
                A <see cref="T:System.Windows.Forms.Message"/> that represents the Windows message.
            </param>
        </member>
        <member name="T:SilDev.Forms.MessageBoxButtonText">
            <summary>
                A based structure that provides the text for the <see cref="T:SilDev.Forms.MessageBoxEx"/>
                dialog box buttons.
            </summary>
        </member>
        <member name="P:SilDev.Forms.MessageBoxButtonText.Ok">
            <summary>
                The OK button.
            </summary>
        </member>
        <member name="P:SilDev.Forms.MessageBoxButtonText.Cancel">
            <summary>
                The Cancel button.
            </summary>
        </member>
        <member name="P:SilDev.Forms.MessageBoxButtonText.Abort">
            <summary>
                The Abort button.
            </summary>
        </member>
        <member name="P:SilDev.Forms.MessageBoxButtonText.Retry">
            <summary>
                The Retry button.
            </summary>
        </member>
        <member name="P:SilDev.Forms.MessageBoxButtonText.Ignore">
            <summary>
                The Ignore button.
            </summary>
        </member>
        <member name="P:SilDev.Forms.MessageBoxButtonText.Yes">
            <summary>
                The Yes button.
            </summary>
        </member>
        <member name="P:SilDev.Forms.MessageBoxButtonText.No">
            <summary>
                The No button.
            </summary>
        </member>
        <member name="M:SilDev.Forms.MessageBoxButtonText.#ctor(System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Forms.MessageBoxButtonText"/>
                structure.
            </summary>
            <param name="enableDefaultText">
                <see langword="true"/> to give each property a default value; otherwise,
                <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Forms.MessageBoxButtonText.Equals(SilDev.Forms.MessageBoxButtonText)">
            <summary>
                Determines whether this instance have same values as the specified
                <see cref="T:SilDev.Forms.MessageBoxButtonText"/> instance.
            </summary>
            <param name="other">
                The <see cref="T:SilDev.Forms.MessageBoxButtonText"/> instance to compare.
            </param>
        </member>
        <member name="M:SilDev.Forms.MessageBoxButtonText.Equals(System.Object)">
            <summary>
                Determines whether this instance have same values as the specified
                <see cref="T:System.Object"/>.
            </summary>
            <param name="other">
                The  <see cref="T:System.Object"/> to compare.
            </param>
        </member>
        <member name="M:SilDev.Forms.MessageBoxButtonText.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:SilDev.Forms.MessageBoxButtonText.op_Equality(SilDev.Forms.MessageBoxButtonText,SilDev.Forms.MessageBoxButtonText)">
            <summary>
                Determines whether two specified <see cref="T:SilDev.Forms.MessageBoxButtonText"/>
                instances have same values.
            </summary>
            <param name="left">
                The first <see cref="T:SilDev.Forms.MessageBoxButtonText"/> instance to compare.
            </param>
            <param name="right">
                The second <see cref="T:SilDev.Forms.MessageBoxButtonText"/> instance to compare.
            </param>
        </member>
        <member name="M:SilDev.Forms.MessageBoxButtonText.op_Inequality(SilDev.Forms.MessageBoxButtonText,SilDev.Forms.MessageBoxButtonText)">
            <summary>
                Determines whether two specified <see cref="T:SilDev.Forms.MessageBoxButtonText"/>
                instances have different values.
            </summary>
            <param name="left">
                The first <see cref="T:SilDev.Forms.MessageBoxButtonText"/> instance to compare.
            </param>
            <param name="right">
                The second <see cref="T:SilDev.Forms.MessageBoxButtonText"/> instance to compare.
            </param>
        </member>
        <member name="T:SilDev.Forms.ButtonEx">
            <summary>
                Expands the functionality for the <see cref="T:System.Windows.Forms.Button"/> class.
            </summary>
        </member>
        <member name="M:SilDev.Forms.ButtonEx.Split(System.Windows.Forms.Button,System.Nullable{System.Drawing.Color})">
            <summary>
                Creates a small split button on the right side of this <see cref="T:System.Windows.Forms.Button"/>
                which is mostly used for drop down menu controls.
                <para>
                    &#9762;  Please note that the <see cref="T:System.Windows.Forms.FlatStyle"/> is overwritten to
                    <see cref="F:System.Windows.Forms.FlatStyle.Flat"/> which is required to apply highlight
                    effects.
                </para>
            </summary>
            <param name="button">
                The button to split.
            </param>
            <param name="buttonText">
                The button text color, <see cref="P:System.Drawing.SystemColors.ControlText"/> is used by
                default.
            </param>
        </member>
        <member name="M:SilDev.Forms.ButtonEx.Split(System.Windows.Forms.Button,System.Boolean,System.Nullable{System.Drawing.Color})">
            <summary>
                Creates or removes the small split button on the right side of this
                <see cref="T:System.Windows.Forms.Button"/> which is mostly used for drop down menu controls.
                <para>
                    &#9762; Please note that the <see cref="T:System.Windows.Forms.FlatStyle"/> is overwritten to
                    <see cref="F:System.Windows.Forms.FlatStyle.Flat"/> which is required to apply highlight
                    effects.
                </para>
            </summary>
            <param name="button">
                The button to split.
            </param>
            <param name="enabled">
                <see langword="true"/> to create a split button; otherwise,
                <see langword="true"/> to remove a existing split button.
            </param>
            <param name="buttonText">
                The button text color, <see cref="P:System.Drawing.SystemColors.ControlText"/> is used by
                default.
            </param>
        </member>
        <member name="M:SilDev.Forms.ButtonEx.SplitClickHandler(System.Windows.Forms.Button,System.Windows.Forms.ContextMenuStrip)">
            <summary>
                Represents the method that is used for the <see cref="T:System.Windows.Forms.Button"/> click
                <see cref="T:System.EventHandler"/> that determines whether the split area of this
                <see cref="T:System.Windows.Forms.Button"/>, which opens the specified
                <see cref="T:System.Windows.Forms.ContextMenuStrip"/> control, is clicked.
            </summary>
            <param name="button">
                The button that contains a split area, which is created by
                <see cref="M:SilDev.Forms.ButtonEx.Split(System.Windows.Forms.Button,System.Nullable{System.Drawing.Color})"/>.
            </param>
            <param name="contextMenuStrip">
                The drop down menu that opens for the split area.
            </param>
        </member>
        <member name="T:SilDev.Forms.ColorDialogEx">
            <summary>
                Expands the functionality for the <see cref="T:System.Windows.Forms.ColorDialog"/> class.
            </summary>
        </member>
        <member name="M:SilDev.Forms.ColorDialogEx.#ctor(System.Windows.Forms.IWin32Window,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Forms.ColorDialogEx"/> class.
            </summary>
            <param name="owner">
                An implementation of <see cref="T:System.Windows.Forms.IWin32Window"/> that will own the modal
                dialog box.
            </param>
            <param name="title">
                The new title of the window.
            </param>
        </member>
        <member name="M:SilDev.Forms.ColorDialogEx.#ctor(System.Drawing.Point,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Forms.ColorDialogEx"/> class.
            </summary>
            <param name="point">
                The new position of the window.
            </param>
            <param name="title">
                The new title of the window.
            </param>
        </member>
        <member name="M:SilDev.Forms.ColorDialogEx.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Forms.ColorDialogEx"/> class.
            </summary>
            <param name="x">
                The new position of the left side of the window.
            </param>
            <param name="y">
                The new position of the top of the window.
            </param>
            <param name="title">
                The new title of the window.
            </param>
        </member>
        <member name="T:SilDev.Forms.ContextMenuStripExAnimation">
            <summary>
                Provides enumerated values of <see cref="T:System.Windows.Forms.ContextMenuStrip"/> animations.
            </summary>
        </member>
        <member name="F:SilDev.Forms.ContextMenuStripExAnimation.Default">
            <summary>
                Smooth fade in animation.
            </summary>
        </member>
        <member name="F:SilDev.Forms.ContextMenuStripExAnimation.Blend">
            <summary>
                Fade in animation.
            </summary>
        </member>
        <member name="F:SilDev.Forms.ContextMenuStripExAnimation.Center">
            <summary>
                Makes the <see cref="T:System.Windows.Forms.ContextMenuStrip"/> appear to collapse inward.
            </summary>
        </member>
        <member name="F:SilDev.Forms.ContextMenuStripExAnimation.SlideHorPositive">
            <summary>
                Slide animation from left to right.
            </summary>
        </member>
        <member name="F:SilDev.Forms.ContextMenuStripExAnimation.SlideHorNegative">
            <summary>
                Slide animation from right to left.
            </summary>
        </member>
        <member name="F:SilDev.Forms.ContextMenuStripExAnimation.SlideVerPositive">
            <summary>
                Slide animation from top to bottom.
            </summary>
        </member>
        <member name="F:SilDev.Forms.ContextMenuStripExAnimation.SlideVerNegative">
            <summary>
                Slide animation from bottom to top.
            </summary>
        </member>
        <member name="T:SilDev.Forms.ContextMenuStripEx">
            <summary>
                Expands the functionality for the <see cref="T:System.Windows.Forms.ContextMenuStrip"/> class.
            </summary>
        </member>
        <member name="M:SilDev.Forms.ContextMenuStripEx.CloseOnMouseLeave(System.Windows.Forms.ContextMenuStrip,System.Int32)">
            <summary>
                Closes this <see cref="T:System.Windows.Forms.ContextMenuStrip"/> when the mouse cursor leaves it.
            </summary>
            <param name="contextMenuStrip">
                The <see cref="T:System.Windows.Forms.ContextMenuStrip"/>.
            </param>
            <param name="toleration">
                The toleration in pixel.
            </param>
        </member>
        <member name="M:SilDev.Forms.ContextMenuStripEx.EnableAnimation(System.Windows.Forms.ContextMenuStrip,SilDev.Forms.ContextMenuStripExAnimation,System.Int32)">
            <summary>
                Enables you to produce special effects when showing this
                <see cref="T:System.Windows.Forms.ContextMenuStrip"/>.
            </summary>
            <param name="contextMenuStrip">
                The <see cref="T:System.Windows.Forms.ContextMenuStrip"/>.
            </param>
            <param name="animation">
                The type of animation.
            </param>
            <param name="time">
                The time it takes to play the animation, in milliseconds.
                <para>
                    Please note that this parameter is ignored if the animation is set to
                    <see cref="F:SilDev.Forms.ContextMenuStripExAnimation.Default"/>.
                </para>
            </param>
        </member>
        <member name="M:SilDev.Forms.ContextMenuStripEx.SetFixedSingle(System.Windows.Forms.ContextMenuStrip,System.Nullable{System.Drawing.Color})">
            <summary>
                Sets a single line border style for this <see cref="T:System.Windows.Forms.ContextMenuStrip"/>.
            </summary>
            <param name="contextMenuStrip">
                The <see cref="T:System.Windows.Forms.ContextMenuStrip"/> to redraw.
            </param>
            <param name="borderColor">
                The border color.
            </param>
        </member>
        <member name="T:SilDev.Forms.ControlExBorderStyle">
            <summary>
                Specifies the border style for a control.
            </summary>
        </member>
        <member name="F:SilDev.Forms.ControlExBorderStyle.Dotted">
            <summary>
                A dotted border.
            </summary>
        </member>
        <member name="F:SilDev.Forms.ControlExBorderStyle.Dashed">
            <summary>
                A dashed border.
            </summary>
        </member>
        <member name="F:SilDev.Forms.ControlExBorderStyle.Solid">
            <summary>
                A solid border.
            </summary>
        </member>
        <member name="T:SilDev.Forms.ControlExColorMode">
            <summary>
                Specifies the color mode to apply for a control.
            </summary>
        </member>
        <member name="F:SilDev.Forms.ControlExColorMode.Light">
            <summary>
                Increases the brightness.
            </summary>
        </member>
        <member name="F:SilDev.Forms.ControlExColorMode.Dark">
            <summary>
                Decreases the brightness.
            </summary>
        </member>
        <member name="F:SilDev.Forms.ControlExColorMode.LightLight">
            <summary>
                Increases the brightness a little more.
            </summary>
        </member>
        <member name="F:SilDev.Forms.ControlExColorMode.DarkDark">
            <summary>
                Decreases the brightness a little more.
            </summary>
        </member>
        <member name="F:SilDev.Forms.ControlExColorMode.LightLightLight">
            <summary>
                Extremely increases brightness.
            </summary>
        </member>
        <member name="F:SilDev.Forms.ControlExColorMode.DarkDarkDark">
            <summary>
                Extremely decreases brightness.
            </summary>
        </member>
        <member name="F:SilDev.Forms.ControlExColorMode.InvertRgb">
            <summary>
                Inverts the three RGB component (red, green, blue) values.
            </summary>
        </member>
        <member name="F:SilDev.Forms.ControlExColorMode.Inherit">
            <summary>
                Inherit from a second <see cref="T:SilDev.Forms.ControlExColorMode"/> option.
            </summary>
        </member>
        <member name="F:SilDev.Forms.ControlExColorMode.SystemDark">
            <summary>
                If possible, try to use the dark mode system back color; otherwise
                <see cref="F:SilDev.Forms.ControlExColorMode.DarkDark"/> is used.
            </summary>
        </member>
        <member name="T:SilDev.Forms.ControlEx">
            <summary>
                Expands the functionality for the <see cref="T:System.Windows.Forms.Control"/> class.
            </summary>
        </member>
        <member name="M:SilDev.Forms.ControlEx.GetAncestor(System.Windows.Forms.Control)">
            <summary>
                Gets the ancestor of this <see cref="T:System.Windows.Forms.Control"/>.
            </summary>
            <param name="control">
                The control to query.
            </param>
        </member>
        <member name="M:SilDev.Forms.ControlEx.LayoutIsSuspended(System.Windows.Forms.Control)">
            <summary>
                Determines whether the layout logic for this control has been temporarily
                suspended.
            </summary>
            <param name="control">
                The control to check.
            </param>
        </member>
        <member name="M:SilDev.Forms.ControlEx.ChangeColorMode(System.Windows.Forms.Control,SilDev.Forms.ControlExColorMode,SilDev.Forms.ControlExColorMode,System.Boolean)">
            <summary>
                Changes the three RGB component values (Red, Green, Blue) of the
                <see cref="P:System.Windows.Forms.Control.ForeColor"/> and <see cref="P:System.Windows.Forms.Control.BackColor"/>
                properties inside all nested controls of the specified control.
                <para>
                    Please note that it is not enough to change the colors of all control
                    elements to achieve a full color mode. To do this you would have to
                    create inherited classes that override important methods, or handle
                    draw events in which you would have to handle every little thing so
                    that it doesn't look crappy.
                </para>
            </summary>
            <param name="control">
                The control to change all colors.
            </param>
            <param name="foreMode">
                The <see cref="P:System.Windows.Forms.Control.ForeColor"/> mode to apply.
            </param>
            <param name="backMode">
                The <see cref="P:System.Windows.Forms.Control.BackColor"/> mode to apply.
            </param>
            <param name="changeNested">
                <see langword="true"/> to change the color of the specified control and all
                its nested controls; otherwise, <see langword="false"/> to change the color
                only of the specified control.
            </param>
        </member>
        <member name="M:SilDev.Forms.ControlEx.ChangeColorMode(System.Windows.Forms.Control,SilDev.Forms.ControlExColorMode,System.Boolean)">
            <inheritdoc cref="M:SilDev.Forms.ControlEx.ChangeColorMode(System.Windows.Forms.Control,SilDev.Forms.ControlExColorMode,SilDev.Forms.ControlExColorMode,System.Boolean)"/>
        </member>
        <member name="M:SilDev.Forms.ControlEx.ChangeColorMode(System.Windows.Forms.Control,System.Boolean)">
            <inheritdoc cref="M:SilDev.Forms.ControlEx.ChangeColorMode(System.Windows.Forms.Control,SilDev.Forms.ControlExColorMode,System.Boolean)"/>
        </member>
        <member name="M:SilDev.Forms.ControlEx.EnableDarkMode(System.Windows.Forms.Control)">
            <summary>
                Enable dark mode for the specified control.
                <para>
                    &#9888; Please note that this feature requires at least the Windows 10
                    October 2018 Update.
                </para>
            </summary>
            <param name="control">
                The control to change all colors.
            </param>
        </member>
        <member name="M:SilDev.Forms.ControlEx.EnableDragMove(System.Windows.Forms.Control,System.Boolean)">
            <summary>
                Enables a window to be dragged by a mouse with its left button down over
                this <see cref="T:System.Windows.Forms.Control"/>.
            </summary>
            <param name="control">
                The control to change.
            </param>
            <param name="cursor">
                <see langword="true"/> to change <see cref="T:System.Windows.Forms.Control"/>.Cursor to
                <see cref="P:System.Windows.Forms.Cursors.SizeAll"/> while dragging; otherwise,
                <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Forms.ControlEx.SetDoubleBuffer(System.Windows.Forms.Control,System.Boolean)">
            <summary>
                Enables or disables the double buffering for this <see cref="T:System.Windows.Forms.Control"/>,
                even it is not directly supported.
            </summary>
            <param name="control">
                The control to change.
            </param>
            <param name="enable">
                <see langword="true"/> to enable double buffering; otherwise,
                <see langword="false"/> to disable double buffering.
            </param>
        </member>
        <member name="M:SilDev.Forms.ControlEx.SetControlStyle(System.Windows.Forms.Control,System.Windows.Forms.ControlStyles,System.Boolean)">
            <summary>
                Enables or disables the specified <see cref="T:System.Windows.Forms.ControlStyles"/> for this
                <see cref="T:System.Windows.Forms.Control"/>, even it is not directly supported.
            </summary>
            <param name="control">
                The control to change.
            </param>
            <param name="controlStyles">
                The new styles to enable or disable.
            </param>
            <param name="enable">
                <see langword="true"/> to enable the specified styles; otherwise,
                <see langword="false"/> to disable the specified styles.
            </param>
        </member>
        <member name="M:SilDev.Forms.ControlEx.SetBorderStyleOfType``1(System.Windows.Forms.Control,System.Windows.Forms.BorderStyle)">
            <summary>
                Set the border style for the entire tree.
            </summary>
            <typeparam name="TControl">
                The type of the <see cref="T:System.Windows.Forms.Control"/> to be changed.
            </typeparam>
            <param name="control">
                The control with the child controls to change.
            </param>
            <param name="borderStyle">
                The style to set.
            </param>
        </member>
        <member name="M:SilDev.Forms.ControlEx.SetChildVisibility(System.Windows.Forms.Control,System.Boolean,System.Windows.Forms.Control[])">
            <summary>
                Sets a value indicating whether all child controls of this control are
                displayed.
            </summary>
            <param name="control">
                The control with the child controls to change.
            </param>
            <param name="visibility">
                <see langword="true"/> if all child controls are displayed; otherwise,
                <see langword="false"/>.
            </param>
            <param name="excludes">
                Child controls that remain visible.
            </param>
        </member>
        <member name="M:SilDev.Forms.ControlEx.DrawBorder(System.Windows.Forms.Control,System.Drawing.Color,SilDev.Forms.ControlExBorderStyle)">
            <summary>
                Draws a border with the specified color and style on a control.
            </summary>
            <param name="control">
                The <see cref="T:System.Windows.Forms.Control"/> to draw on.
            </param>
            <param name="color">
                The <see cref="T:System.Drawing.Color"/> of the border.
            </param>
            <param name="style">
                One of the <see cref="T:SilDev.Forms.ControlExBorderStyle"/> values that specifies the
                style of the border.
            </param>
        </member>
        <member name="M:SilDev.Forms.ControlEx.DrawSizeGrip(System.Windows.Forms.Control,System.Nullable{System.Drawing.Color},System.Windows.Forms.MouseEventHandler,System.EventHandler)">
            <summary>
                Draws a 12px large size grip <see cref="T:System.Drawing.Image"/> in this
                <see cref="T:System.Windows.Forms.Control"/>.
            </summary>
            <param name="control">
                The control that receives the size grip <see cref="T:System.Drawing.Image"/>.
            </param>
            <param name="color">
                The color for the size grip <see cref="T:System.Drawing.Image"/>; <see cref="P:System.Drawing.Color.White"/>
                is used by default.
            </param>
            <param name="mouseDownEvent">
                Occurs when the mouse pointer is over the control and a mouse button is
                pressed.
            </param>
            <param name="mouseEnterEvent">
                Occurs when the mouse pointer enters the control.
            </param>
        </member>
        <member name="T:SilDev.Forms.FormExPlusSettings">
            <summary>
                Provides special <see cref="T:System.Windows.Forms.Form"/> settings.
            </summary>
        </member>
        <member name="F:SilDev.Forms.FormExPlusSettings.FadeIn">
            <summary>
                Activates fade-in effect.
            </summary>
        </member>
        <member name="F:SilDev.Forms.FormExPlusSettings.LogLoadingTime">
            <summary>
                Logs the loading time.
            </summary>
        </member>
        <member name="T:SilDev.Forms.FormEx">
            <summary>
                Expands the functionality for the <see cref="T:System.Windows.Forms.Form"/> class.
            </summary>
        </member>
        <member name="M:SilDev.Forms.FormEx.CaptureDesktopBehindWindow(System.Windows.Forms.Form)">
            <summary>
                Captures the entire desktop under this form.
                <para>
                    &#9762;  Please note that the form window must be hidden for the moment
                    of capture, which may cause flickering.
                </para>
            </summary>
            <param name="form">
                The form window behind which is the desktop that should be captured.
            </param>
            <exception cref="T:System.ArgumentNullException">
                form is null.
            </exception>
        </member>
        <member name="M:SilDev.Forms.FormEx.Dockable(System.Windows.Forms.Form)">
            <summary>
                Allows to dock this form to the virtual screen edges.
            </summary>
            <param name="form">
                The form window to be dock-able.
            </param>
            <exception cref="T:System.ArgumentNullException">
                form is null.
            </exception>
        </member>
        <member name="M:SilDev.Forms.FormEx.FadeIn(System.Windows.Forms.Form,System.Int32,System.Double,System.Boolean)">
            <summary>
                Applies a fade-in effect this form.
            </summary>
            <param name="form">
                The form to fade-in.
            </param>
            <param name="effectDuration">
                The effect duration. Must be in range of 25 to 750.
            </param>
            <param name="maxOpacity">
                The maximal opacity of the form.
            </param>
            <param name="setForeground">
                <see langword="true"/> to bring the form into the foreground; otherwise,
                <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Forms.FormEx.Plus(System.Windows.Forms.Form,SilDev.Forms.FormExPlusSettings)">
            <summary>
                Determines special settings for this <see cref="T:System.Windows.Forms.Form"/>.
                <para>
                    Hint: This function should be called before the <see cref="T:System.Windows.Forms.Form"/> is
                    created.
                </para>
            </summary>
            <param name="form">
                The form window to determine the settings.
            </param>
            <param name="settings">
                The settings to be applied.
            </param>
            <exception cref="T:System.ArgumentNullException">
                form is null.
            </exception>
        </member>
        <member name="T:SilDev.Forms.LinkLabelEx">
            <summary>
                Expands the functionality for the <see cref="T:System.Windows.Forms.LinkLabel"/> class.
            </summary>
        </member>
        <member name="M:SilDev.Forms.LinkLabelEx.LinkText(System.Windows.Forms.LinkLabel,System.String,System.Uri)">
            <summary>
                Creates a link for the specified text and associates it with the specified
                link.
            </summary>
            <param name="linkLabel">
                The <see cref="T:System.Windows.Forms.LinkLabel"/> control to change.
            </param>
            <param name="text">
                The text to link.
            </param>
            <param name="uri">
                The link to associate.
            </param>
            <exception cref="T:System.ArgumentNullException">
                linkLabel, text or uri is null.
            </exception>
        </member>
        <member name="M:SilDev.Forms.LinkLabelEx.LinkText(System.Windows.Forms.LinkLabel,System.String,System.String)">
            <summary>
                Creates a link for the specified text and associates it with the specified
                link.
            </summary>
            <param name="linkLabel">
                The <see cref="T:System.Windows.Forms.LinkLabel"/> control to change.
            </param>
            <param name="text">
                The text to link.
            </param>
            <param name="uri">
                The link to associate.
            </param>
            <exception cref="T:System.ArgumentNullException">
                linkLabel, text or uri is null.
            </exception>
        </member>
        <member name="T:SilDev.Forms.ListViewEx">
            <summary>
                Expands the functionality for the <see cref="T:System.Windows.Forms.ListView"/> class.
            </summary>
        </member>
        <member name="M:SilDev.Forms.ListViewEx.ItemFromPoint(System.Windows.Forms.ListView)">
            <summary>
                Retrieves the <see cref="T:System.Windows.Forms.ListViewItem"/> at the current cursor's position.
            </summary>
            <param name="listView">
                The <see cref="T:System.Windows.Forms.ListView"/> control to check.
            </param>
        </member>
        <member name="M:SilDev.Forms.ListViewEx.SetMouseOverCursor(System.Windows.Forms.ListView,System.Windows.Forms.Cursor)">
            <summary>
                Sets the cursor shape that is shown when the mouse is over an element of
                the <see cref="T:System.Windows.Forms.ListView"/>.
            </summary>
            <param name="listView">
                The <see cref="T:System.Windows.Forms.ListView"/> control to change.
            </param>
            <param name="cursor">
                The <see cref="T:System.Windows.Forms.Cursor"/> to set.
            </param>
        </member>
        <member name="T:SilDev.Forms.MessageBoxEx">
            <summary>
                Displays a message window, also known as a dialog box, based on
                <see cref="T:System.Windows.Forms.MessageBox"/>, which presents a message to the user. It is a
                modal window, blocking other actions in the application until the user
                closes it. A <see cref="T:SilDev.Forms.MessageBoxEx"/> can contain text, buttons, and
                symbols that inform and instruct the user.
                <para>
                    The difference to <see cref="T:System.Windows.Forms.MessageBox"/> is that the message window
                    displays in the center of the specified <see cref="T:System.Windows.Forms.IWin32Window"/>
                    owner object.
                </para>
            </summary>
        </member>
        <member name="P:SilDev.Forms.MessageBoxEx.CenterMousePointer">
            <summary>
                Specifies that the mouse pointer moves once to a new dialog box.
            </summary>
        </member>
        <member name="P:SilDev.Forms.MessageBoxEx.ButtonText">
            <summary>
                Gets or sets the <see cref="T:SilDev.Forms.MessageBoxButtonText"/> structure that is used
                when <see cref="P:SilDev.Forms.MessageBoxEx.ButtonTextOverrideEnabled"/> is enabled.
            </summary>
        </member>
        <member name="P:SilDev.Forms.MessageBoxEx.ButtonTextOverrideEnabled">
            <summary>
                Gets or sets a value indicating whether the override options should be
                applied once at the next dialog box.
            </summary>
        </member>
        <member name="P:SilDev.Forms.MessageBoxEx.TopMost">
            <summary>
                Gets or sets a value indicating whether all dialog boxes are placed above
                all non-topmost windows.
                <para>
                    This option has no effect if an <see cref="T:System.Windows.Forms.IWin32Window"/> owner is
                    defined.
                </para>
            </summary>
        </member>
        <member name="M:SilDev.Forms.MessageBoxEx.Show(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions)">
            <summary>
                Displays a message box with the specified text, caption, buttons, icon,
                default button, and options in the center of the specified owner object.
            </summary>
            <param name="owner">
                An implementation of <see cref="T:System.Windows.Forms.IWin32Window"/> that will own the modal
                dialog box.
            </param>
            <param name="text">
                The text to display in the message box.
            </param>
            <param name="caption">
                The text to display in the title bar of the message box.
            </param>
            <param name="buttons">
                One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"/> values that specifies which
                buttons to display in the message box.
            </param>
            <param name="icon">
                One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"/> values that specifies which icon to
                display in the message box.
            </param>
            <param name="defButton">
                One of the <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"/> values that specifies the
                default button for the message box.
            </param>
            <param name="options">
                One of the <see cref="T:System.Windows.Forms.MessageBoxOptions"/> values that specifies which
                display and association options will be used for the message box. You may
                pass in 0 if you wish to use the defaults.
            </param>
            <returns>
                One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.
            </returns>
        </member>
        <member name="M:SilDev.Forms.MessageBoxEx.Show(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton)">
            <summary>
                Displays a message box with the specified text, caption, buttons, icon, and
                default button in the center of the specified owner object.
            </summary>
            <param name="owner">
                An implementation of <see cref="T:System.Windows.Forms.IWin32Window"/> that will own the modal
                dialog box.
            </param>
            <param name="text">
                The text to display in the message box.
            </param>
            <param name="caption">
                The text to display in the title bar of the message box.
            </param>
            <param name="buttons">
                One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"/> values that specifies which
                buttons to display in the message box.
            </param>
            <param name="icon">
                One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"/> values that specifies which icon to
                display in the message box.
            </param>
            <param name="defButton">
                One of the <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"/> values that specifies the
                default button for the message box.
            </param>
            <returns>
                One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.
            </returns>
        </member>
        <member name="M:SilDev.Forms.MessageBoxEx.Show(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon)">
            <summary>
                Displays a message box with the specified text, caption, buttons, and icon
                in the center of the specified owner object.
            </summary>
            <param name="owner">
                An implementation of <see cref="T:System.Windows.Forms.IWin32Window"/> that will own the modal
                dialog box.
            </param>
            <param name="text">
                The text to display in the message box.
            </param>
            <param name="caption">
                The text to display in the title bar of the message box.
            </param>
            <param name="buttons">
                One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"/> values that specifies which
                buttons to display in the message box.
            </param>
            <param name="icon">
                One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"/> values that specifies which icon to
                display in the message box.
            </param>
            <returns>
                One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.
            </returns>
        </member>
        <member name="M:SilDev.Forms.MessageBoxEx.Show(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons)">
            <summary>
                Displays a message box with the specified text, caption, and buttons in the
                center of the specified owner object.
            </summary>
            <param name="owner">
                An implementation of <see cref="T:System.Windows.Forms.IWin32Window"/> that will own the modal
                dialog box.
            </param>
            <param name="text">
                The text to display in the message box.
            </param>
            <param name="caption">
                The text to display in the title bar of the message box.
            </param>
            <param name="buttons">
                One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"/> values that specifies which
                buttons to display in the message box.
            </param>
            <returns>
                One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.
            </returns>
        </member>
        <member name="M:SilDev.Forms.MessageBoxEx.Show(System.Windows.Forms.IWin32Window,System.String,System.String)">
            <summary>
                Displays a message box with the specified text and caption in the center of
                the specified owner object.
            </summary>
            <param name="owner">
                An implementation of <see cref="T:System.Windows.Forms.IWin32Window"/> that will own the modal
                dialog box.
            </param>
            <param name="text">
                The text to display in the message box.
            </param>
            <param name="caption">
                The text to display in the title bar of the message box.
            </param>
            <returns>
                One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.
            </returns>
        </member>
        <member name="M:SilDev.Forms.MessageBoxEx.Show(System.Windows.Forms.IWin32Window,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions)">
            <summary>
                Displays a message box with the specified text, buttons, icon, default
                button, and options in the center of the specified owner object.
            </summary>
            <param name="owner">
                An implementation of <see cref="T:System.Windows.Forms.IWin32Window"/> that will own the modal
                dialog box.
            </param>
            <param name="text">
                The text to display in the message box.
            </param>
            <param name="buttons">
                One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"/> values that specifies which
                buttons to display in the message box.
            </param>
            <param name="icon">
                One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"/> values that specifies which icon to
                display in the message box.
            </param>
            <param name="defButton">
                One of the <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"/> values that specifies the
                default button for the message box.
            </param>
            <param name="options">
                One of the <see cref="T:System.Windows.Forms.MessageBoxOptions"/> values that specifies which
                display and association options will be used for the message box. You may
                pass in 0 if you wish to use the defaults.
            </param>
            <returns>
                One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.
            </returns>
        </member>
        <member name="M:SilDev.Forms.MessageBoxEx.Show(System.Windows.Forms.IWin32Window,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton)">
            <summary>
                Displays a message box with the specified text, buttons, icon, and default
                button in the center of the specified owner object.
            </summary>
            <param name="owner">
                An implementation of <see cref="T:System.Windows.Forms.IWin32Window"/> that will own the modal
                dialog box.
            </param>
            <param name="text">
                The text to display in the message box.
            </param>
            <param name="buttons">
                One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"/> values that specifies which
                buttons to display in the message box.
            </param>
            <param name="icon">
                One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"/> values that specifies which icon to
                display in the message box.
            </param>
            <param name="defButton">
                One of the <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"/> values that specifies the
                default button for the message box.
            </param>
            <returns>
                One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.
            </returns>
        </member>
        <member name="M:SilDev.Forms.MessageBoxEx.Show(System.Windows.Forms.IWin32Window,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon)">
            <summary>
                Displays a message box with the specified text, buttons, and icon in the
                center of the specified owner object.
            </summary>
            <param name="owner">
                An implementation of <see cref="T:System.Windows.Forms.IWin32Window"/> that will own the modal
                dialog box.
            </param>
            <param name="text">
                The text to display in the message box.
            </param>
            <param name="buttons">
                One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"/> values that specifies which
                buttons to display in the message box.
            </param>
            <param name="icon">
                One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"/> values that specifies which icon to
                display in the message box.
            </param>
            <returns>
                One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.
            </returns>
        </member>
        <member name="M:SilDev.Forms.MessageBoxEx.Show(System.Windows.Forms.IWin32Window,System.String,System.Windows.Forms.MessageBoxButtons)">
            <summary>
                Displays a message box with the specified text, icon, and buttons in the
                center of the specified owner object.
            </summary>
            <param name="owner">
                An implementation of <see cref="T:System.Windows.Forms.IWin32Window"/> that will own the modal
                dialog box.
            </param>
            <param name="text">
                The text to display in the message box.
            </param>
            <param name="buttons">
                One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"/> values that specifies which
                buttons to display in the message box.
            </param>
            <returns>
                One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.
            </returns>
        </member>
        <member name="M:SilDev.Forms.MessageBoxEx.Show(System.Windows.Forms.IWin32Window,System.String)">
            <summary>
                Displays a message box with the specified text in the center of the
                specified owner object.
            </summary>
            <param name="owner">
                An implementation of <see cref="T:System.Windows.Forms.IWin32Window"/> that will own the modal
                dialog box.
            </param>
            <param name="text">
                The text to display in the message box.
            </param>
            <returns>
                One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.
            </returns>
        </member>
        <member name="M:SilDev.Forms.MessageBoxEx.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions)">
            <summary>
                Displays a message box with the specified text, caption, buttons, icon,
                default button, and options.
            </summary>
            <param name="text">
                The text to display in the message box.
            </param>
            <param name="caption">
                The text to display in the title bar of the message box.
            </param>
            <param name="buttons">
                One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"/> values that specifies which
                buttons to display in the message box.
            </param>
            <param name="icon">
                One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"/> values that specifies which icon to
                display in the message box.
            </param>
            <param name="defButton">
                One of the <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"/> values that specifies the
                default button for the message box.
            </param>
            <param name="options">
                One of the <see cref="T:System.Windows.Forms.MessageBoxOptions"/> values that specifies which
                display and association options will be used for the message box. You may
                pass in 0 if you wish to use the defaults.
            </param>
            <returns>
                One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.
            </returns>
        </member>
        <member name="M:SilDev.Forms.MessageBoxEx.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton)">
            <summary>
                Displays a message box with the specified text, caption, buttons, icon,
                default, and button.
            </summary>
            <param name="text">
                The text to display in the message box.
            </param>
            <param name="caption">
                The text to display in the title bar of the message box.
            </param>
            <param name="buttons">
                One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"/> values that specifies which
                buttons to display in the message box.
            </param>
            <param name="icon">
                One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"/> values that specifies which icon to
                display in the message box.
            </param>
            <param name="defButton">
                One of the <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"/> values that specifies the
                default button for the message box.
            </param>
            <returns>
                One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.
            </returns>
        </member>
        <member name="M:SilDev.Forms.MessageBoxEx.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon)">
            <summary>
                Displays a message box with the specified text, caption, buttons, and icon.
            </summary>
            <param name="text">
                The text to display in the message box.
            </param>
            <param name="caption">
                The text to display in the title bar of the message box.
            </param>
            <param name="buttons">
                One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"/> values that specifies which
                buttons to display in the message box.
            </param>
            <param name="icon">
                One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"/> values that specifies which icon to
                display in the message box.
            </param>
            <returns>
                One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.
            </returns>
        </member>
        <member name="M:SilDev.Forms.MessageBoxEx.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons)">
            <summary>
                Displays a message box with the specified text, caption, and buttons.
            </summary>
            <param name="text">
                The text to display in the message box.
            </param>
            <param name="caption">
                The text to display in the title bar of the message box.
            </param>
            <param name="buttons">
                One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"/> values that specifies which
                buttons to display in the message box.
            </param>
            <returns>
                One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.
            </returns>
        </member>
        <member name="M:SilDev.Forms.MessageBoxEx.Show(System.String,System.String)">
            <summary>
                Displays a message box with the specified text and caption.
            </summary>
            <param name="text">
                The text to display in the message box.
            </param>
            <param name="caption">
                The text to display in the title bar of the message box.
            </param>
            <returns>
                One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.
            </returns>
        </member>
        <member name="M:SilDev.Forms.MessageBoxEx.Show(System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions)">
            <summary>
                Displays a message box with the specified text, buttons, icon, default
                button, and options.
            </summary>
            <param name="text">
                The text to display in the message box.
            </param>
            <param name="buttons">
                One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"/> values that specifies which
                buttons to display in the message box.
            </param>
            <param name="icon">
                One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"/> values that specifies which icon to
                display in the message box.
            </param>
            <param name="defButton">
                One of the <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"/> values that specifies the
                default button for the message box.
            </param>
            <param name="options">
                One of the <see cref="T:System.Windows.Forms.MessageBoxOptions"/> values that specifies which
                display and association options will be used for the message box. You may
                pass in 0 if you wish to use the defaults.
            </param>
            <returns>
                One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.
            </returns>
        </member>
        <member name="M:SilDev.Forms.MessageBoxEx.Show(System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton)">
            <summary>
                Displays a message box with the specified text, buttons, icon, and default
                button.
            </summary>
            <param name="text">
                The text to display in the message box.
            </param>
            <param name="buttons">
                One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"/> values that specifies which
                buttons to display in the message box.
            </param>
            <param name="icon">
                One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"/> values that specifies which icon to
                display in the message box.
            </param>
            <param name="defButton">
                One of the <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"/> values that specifies the
                default button for the message box.
            </param>
            <returns>
                One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.
            </returns>
        </member>
        <member name="M:SilDev.Forms.MessageBoxEx.Show(System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon)">
            <summary>
                Displays a message box with the specified text, buttons, and icon.
            </summary>
            <param name="text">
                The text to display in the message box.
            </param>
            <param name="buttons">
                One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"/> values that specifies which
                buttons to display in the message box.
            </param>
            <param name="icon">
                One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"/> values that specifies which icon to
                display in the message box.
            </param>
            <returns>
                One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.
            </returns>
        </member>
        <member name="M:SilDev.Forms.MessageBoxEx.Show(System.String,System.Windows.Forms.MessageBoxButtons)">
            <summary>
                Displays a message box with the specified text, and buttons.
            </summary>
            <param name="text">
                The text to display in the message box.
            </param>
            <param name="buttons">
                One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"/> values that specifies which
                buttons to display in the message box.
            </param>
            <returns>
                One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.
            </returns>
        </member>
        <member name="M:SilDev.Forms.MessageBoxEx.Show(System.String)">
            <summary>
                Displays a message box with the specified text.
            </summary>
            <param name="text">
                The text to display in the message box.
            </param>
            <returns>
                One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.
            </returns>
        </member>
        <member name="T:SilDev.Forms.PanelFakeProgressBar">
            <summary>
                Provides panel functions that are used as a progress bar. This enables a
                more flexible design than <see cref="T:System.Windows.Forms.ProgressBar"/> and is very comfortable
                to use compared to a complete <see cref="T:System.Windows.Forms.ProgressBar"/> overhaul.
            </summary>
        </member>
        <member name="P:SilDev.Forms.PanelFakeProgressBar.ErrorForeColor">
            <summary>
                Gets or sets the foreground color that is used when an error occurs.
            </summary>
        </member>
        <member name="P:SilDev.Forms.PanelFakeProgressBar.CompleteForeColor">
            <summary>
                Gets or sets the foreground color that is used when the progress has
                reached 100 percent.
            </summary>
        </member>
        <member name="M:SilDev.Forms.PanelFakeProgressBar.SetProgress(System.Windows.Forms.Panel,System.Int32,System.Int32)">
            <summary>
                Sets the current position of the fake progress bar.
            </summary>
            <param name="panel">
                The fake progress bar <see cref="T:System.Windows.Forms.Panel"/> control.
            </param>
            <param name="value">
                The position to be set.
            </param>
            <param name="maxValue">
                The maximum range.
            </param>
        </member>
        <member name="M:SilDev.Forms.PanelFakeProgressBar.SetProgress(System.Int32,System.Int32)">
            <summary>
                Sets the current position of the fake progress bar.
            </summary>
            <param name="value">
                The position to be set.
            </param>
            <param name="maxValue">
                The maximum range.
            </param>
        </member>
        <member name="T:SilDev.Forms.PictureBoxNonClickable">
            <summary>
                Represents a Windows non-click-able picture box control for displaying an
                image.
            </summary>
        </member>
        <member name="M:SilDev.Forms.PictureBoxNonClickable.#ctor(System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Forms.PictureBoxNonClickable"/>
                picture box class.
            </summary>
            <param name="clickable">
                <see langword="true"/> to determine that the picture box is click-able;
                otherwise, <see langword="false"/>.
            </param>
            ReSharper disable SuspiciousTypeConversion.Global
        </member>
        <member name="M:SilDev.Forms.PictureBoxNonClickable.WndProc(System.Windows.Forms.Message@)">
            <summary>
                Processes Windows messages.
            </summary>
            <param name="m">
                The Windows <see cref="T:System.Windows.Forms.Message"/> to process.
            </param>
        </member>
        <member name="T:SilDev.Forms.ProgressBarEx">
            <summary>
                Expands the functionality for the <see cref="T:System.Windows.Forms.ProgressBar"/> class.
            </summary>
        </member>
        <member name="M:SilDev.Forms.ProgressBarEx.JumpToEnd(System.Windows.Forms.ProgressBar)">
            <summary>
                Skips the very long animation and jumps directly to the
                <see cref="P:System.Windows.Forms.ProgressBar.Maximum"/>.
            </summary>
            <param name="progressBar">
                The <see cref="T:System.Windows.Forms.ProgressBar"/> to progress.
            </param>
        </member>
        <member name="T:SilDev.Forms.ProgressCircle">
            <summary>
                Represents a <see cref="T:SilDev.Forms.ProgressCircle"/> control.
            </summary>
        </member>
        <member name="P:SilDev.Forms.ProgressCircle.Active">
            <summary>
                Gets or sets a value indicating whether this <see cref="T:SilDev.Forms.ProgressCircle"/>
                is active.
            </summary>
        </member>
        <member name="P:SilDev.Forms.ProgressCircle.Spokes">
            <summary>
                Gets or sets the number of spokes.
            </summary>
        </member>
        <member name="P:SilDev.Forms.ProgressCircle.Thickness">
            <summary>
                Gets or sets the spoke thickness.
            </summary>
        </member>
        <member name="P:SilDev.Forms.ProgressCircle.InnerRadius">
            <summary>
                Gets or sets the inner circle radius.
            </summary>
        </member>
        <member name="P:SilDev.Forms.ProgressCircle.OuterRadius">
            <summary>
                Gets or sets the outer circle radius.
            </summary>
        </member>
        <member name="P:SilDev.Forms.ProgressCircle.RotationSpeed">
            <summary>
                Gets or sets the rotation speed.
            </summary>
        </member>
        <member name="P:SilDev.Forms.ProgressCircle.ForeColor">
            <summary>
                Gets or sets the foreground color of the control.
            </summary>
        </member>
        <member name="M:SilDev.Forms.ProgressCircle.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Forms.ProgressCircle"/> class.
            </summary>
        </member>
        <member name="M:SilDev.Forms.ProgressCircle.SetAppearance(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Sets the circle appearance.
            </summary>
            <param name="spokes">
                The number of spokes.
            </param>
            <param name="thickness">
                The spoke thickness.
            </param>
            <param name="innerRadius">
                The inner circle radius.
            </param>
            <param name="outerRadius">
                The outer circle radius.
            </param>
        </member>
        <member name="M:SilDev.Forms.ProgressCircle.GetPreferredSize(System.Drawing.Size)">
            <summary>
                Retrieves the size of a rectangular area into which a control can be
                fitted.
            </summary>
            <param name="size">
                The custom-sized area for a control.
            </param>
        </member>
        <member name="M:SilDev.Forms.ProgressCircle.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
                Raises the <see cref="T:System.Windows.Forms.Control"/>.Paint event.
            </summary>
        </member>
        <member name="T:SilDev.Forms.RichTextBoxEx">
            <summary>
                Expands the functionality for the <see cref="T:System.Windows.Forms.RichTextBox"/> class.
            </summary>
        </member>
        <member name="M:SilDev.Forms.RichTextBoxEx.MarkText(System.Windows.Forms.RichTextBox,System.String,System.Drawing.Color,System.Nullable{System.Drawing.Color},System.Drawing.Font)">
            <summary>
                Marks the specified text in this <see cref="T:System.Windows.Forms.RichTextBox"/> control.
            </summary>
            <param name="richTextBox">
                The <see cref="T:System.Windows.Forms.RichTextBox"/> control to change.
            </param>
            <param name="text">
                The text to mark.
            </param>
            <param name="foreColor">
                The new foreground color.
            </param>
            <param name="backColor">
                The new background color.
            </param>
            <param name="font">
                The new font.
            </param>
        </member>
        <member name="M:SilDev.Forms.RichTextBoxEx.MarkLine(System.Windows.Forms.RichTextBox,System.String,System.String,System.Drawing.Color,System.Nullable{System.Drawing.Color},System.Drawing.Font)">
            <summary>
                Marks the text depending on two specified keywords in this
                <see cref="T:System.Windows.Forms.RichTextBox"/> control.
            </summary>
            <param name="richTextBox">
                The <see cref="T:System.Windows.Forms.RichTextBox"/> control to change.
            </param>
            <param name="startKeyword">
                The start keyword for the text to mark.
            </param>
            <param name="endKeyword">
                The end keyword for the text to mark.
            </param>
            <param name="foreColor">
                The new foreground color.
            </param>
            <param name="backColor">
                The new background color.
            </param>
            <param name="font">
                The new font.
            </param>
        </member>
        <member name="M:SilDev.Forms.RichTextBoxEx.MarkInLine(System.Windows.Forms.RichTextBox,System.String,System.Int32,System.Drawing.Color,System.Nullable{System.Drawing.Color},System.Drawing.Font)">
            <summary>
                Marks the specified text in this <see cref="T:System.Windows.Forms.RichTextBox"/> control.
            </summary>
            <param name="richTextBox">
                The <see cref="T:System.Windows.Forms.RichTextBox"/> control to change.
            </param>
            <param name="keyword">
                The text to mark.
            </param>
            <param name="count">
                The number of keywords to be marked.
            </param>
            <param name="foreColor">
                The new foreground color.
            </param>
            <param name="backColor">
                The new background color.
            </param>
            <param name="font">
                The new font.
            </param>
        </member>
        <member name="M:SilDev.Forms.RichTextBoxEx.SetDefaultContextMenuStrip(System.Windows.Forms.RichTextBox,System.Windows.Forms.IWin32Window)">
            <summary>
                Sets a default <see cref="T:System.Windows.Forms.ContextMenuStrip"/> to this
                <see cref="T:System.Windows.Forms.RichTextBox"/> with cut, copy, paste, select all, load file,
                save file and undo.
            </summary>
            <param name="richTextBox">
                The <see cref="T:System.Windows.Forms.RichTextBox"/> control to add the
                <see cref="T:System.Windows.Forms.ContextMenuStrip"/>.
            </param>
            <param name="owner">
                An implementation of <see cref="T:System.Windows.Forms.IWin32Window"/> that will own modal dialog
                boxes.
            </param>
        </member>
        <member name="T:SilDev.Forms.TextBoxEx">
            <summary>
                Expands the functionality for the <see cref="T:System.Windows.Forms.TextBox"/> class.
            </summary>
        </member>
        <member name="M:SilDev.Forms.TextBoxEx.DrawSearchSymbol(System.Windows.Forms.TextBox,System.Nullable{System.Drawing.Color})">
            <summary>
                Draws a search symbol on the right side of this <see cref="T:System.Windows.Forms.TextBox"/>.
            </summary>
            <param name="textBox">
                The <see cref="T:System.Windows.Forms.TextBox"/> control to change.
            </param>
            <param name="color">
                The search symbol color, <see cref="T:System.Windows.Forms.TextBox"/>.ForeColor is used by
                default.
            </param>
        </member>
        <member name="M:SilDev.Forms.TextBoxEx.AutoVerticalScrollBar(System.Windows.Forms.TextBox)">
            <summary>
                Displays the vertical scroll bar as needed.
                <para>
                    Hint: This function has no effect if word wrap is disabled.
                </para>
            </summary>
            <param name="textBox">
                The <see cref="T:System.Windows.Forms.TextBox"/> control to change.
            </param>
        </member>
        <member name="T:SilDev.Forms.NotifyBoxSound">
            <summary>
                Provides enumerated constants used to retrieves the play sound of the
                notify box.
            </summary>
        </member>
        <member name="T:SilDev.Forms.NotifyBoxStartPosition">
            <summary>
                Provides enumerated constants used to retrieves the start position of the
                notify box.
            </summary>
        </member>
        <member name="T:SilDev.Forms.NotifyBox">
            <summary>
                Represents a notification window, similar with a system tray notification,
                which presents a notification to the user.
            </summary>
        </member>
        <member name="P:SilDev.Forms.NotifyBox.Opacity">
            <summary>
                Gets or sets the opacity level for the notify box.
            </summary>
        </member>
        <member name="P:SilDev.Forms.NotifyBox.BackColor">
            <summary>
                Gets or sets the background color for the notify box.
            </summary>
        </member>
        <member name="P:SilDev.Forms.NotifyBox.BorderColor">
            <summary>
                Gets or sets the border color for the notify box.
            </summary>
        </member>
        <member name="P:SilDev.Forms.NotifyBox.CaptionColor">
            <summary>
                Gets or sets the caption color for the notify box.
            </summary>
        </member>
        <member name="P:SilDev.Forms.NotifyBox.TextColor">
            <summary>
                Gets or sets the text color for the notify box.
            </summary>
        </member>
        <member name="P:SilDev.Forms.NotifyBox.TopMost">
            <summary>
                Specifies that the notify box is placed above all non-topmost windows.
            </summary>
        </member>
        <member name="P:SilDev.Forms.NotifyBox.IsAlive">
            <summary>
                Gets a value indicating the execution status of the current notify box.
            </summary>
        </member>
        <member name="M:SilDev.Forms.NotifyBox.#ctor(System.Double,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Forms.NotifyBox"/> class.
            </summary>
            <param name="opacity">
                The opacity level.
            </param>
            <param name="backColor">
                The background color.
            </param>
            <param name="borderColor">
                The border color.
            </param>
            <param name="captionColor">
                The caption color.
            </param>
            <param name="textColor">
                The text color.
            </param>
            <param name="topMost">
                <see langword="true"/> to place the notify box above all non-topmost
                windows; otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Forms.NotifyBox.#ctor(System.Double,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Forms.NotifyBox"/> class.
            </summary>
        </member>
        <member name="M:SilDev.Forms.NotifyBox.#ctor(System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Forms.NotifyBox"/> class.
            </summary>
        </member>
        <member name="M:SilDev.Forms.NotifyBox.Show(System.String,System.String,SilDev.Forms.NotifyBoxStartPosition,SilDev.Forms.NotifyBoxSound,System.UInt16)">
            <summary>
                Displays a notify box with the specified text, caption, position, sound,
                duration, and borders.
            </summary>
            <param name="text">
                The notification text to display in the notify box.
            </param>
            <param name="caption">
                The caption text to display in the notify box.
            </param>
            <param name="position">
                The window position for the notify box.
            </param>
            <param name="sound">
                The play sound for the notify box.
            </param>
            <param name="duration">
                The duration of the time, in milliseconds, which the notify box remains
                active.
            </param>
        </member>
        <member name="M:SilDev.Forms.NotifyBox.Show(System.String,System.String,SilDev.Forms.NotifyBoxStartPosition,System.UInt16)">
            <summary>
                Displays a notify box with the specified text, caption, position, duration,
                and borders.
            </summary>
            <param name="text">
                The notification text to display in the notify box.
            </param>
            <param name="caption">
                The caption text to display in the notify box.
            </param>
            <param name="position">
                The window position for the notify box.
            </param>
            <param name="duration">
                The duration of the time, in milliseconds, which the notify box remains
                active.
            </param>
        </member>
        <member name="M:SilDev.Forms.NotifyBox.Show(System.String,System.String,SilDev.Forms.NotifyBoxSound,System.UInt16)">
            <summary>
                Displays a notify box with the specified text, caption, sound, duration,
                and borders.
            </summary>
            <param name="text">
                The notification text to display in the notify box.
            </param>
            <param name="caption">
                The caption text to display in the notify box.
            </param>
            <param name="sound">
                The play sound for the notify box.
            </param>
            <param name="duration">
                The duration of the time, in milliseconds, which the notify box remains
                active.
            </param>
        </member>
        <member name="M:SilDev.Forms.NotifyBox.Show(System.String,System.String,System.UInt16)">
            <summary>
                Displays a notify box with the specified text, caption, duration, and
                borders.
            </summary>
            <param name="text">
                The notification text to display in the notify box.
            </param>
            <param name="caption">
                The caption text to display in the notify box.
            </param>
            <param name="duration">
                The duration of the time, in milliseconds, which the notify box remains
                active.
            </param>
        </member>
        <member name="M:SilDev.Forms.NotifyBox.Close">
            <summary>
                Closes the current notify box.
            </summary>
        </member>
        <member name="M:SilDev.Forms.NotifyBox.Abort">
            <summary>
                Terminates the current notify box.
            </summary>
        </member>
        <member name="M:SilDev.Forms.NotifyBox.NotifyBoxForm.Dispose(System.Boolean)">
            <summary>
                Disposes of the resources (other than memory) used by the
                <see cref="T:System.Windows.Forms.Form"/>.
            </summary>
        </member>
        <member name="T:SilDev.Forms.NotifyBoxEx">
            <summary>
                Displays a notification window, similar with a system tray notification,
                which presents a notification to the user.
            </summary>
        </member>
        <member name="M:SilDev.Forms.NotifyBoxEx.Show(System.String,System.String,SilDev.Forms.NotifyBoxStartPosition,SilDev.Forms.NotifyBoxSound,System.UInt16,System.Boolean,System.Double,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)">
            <summary>
                Displays a notification box with the specified parameters.
            </summary>
            <param name="text">
                The notification text to display in the notify box.
            </param>
            <param name="caption">
                The caption text to display in the notify box.
            </param>
            <param name="position">
                The window position for the notify box.
            </param>
            <param name="sound">
                The play sound for the notify box.
            </param>
            <param name="duration">
                The duration of the time, in milliseconds, which the notify box remains
                active.
            </param>
            <param name="topMost">
                <see langword="true"/> to place the notify box above all non-topmost
                windows; otherwise, <see langword="false"/>.
            </param>
            <param name="opacity">
                The opacity level.
            </param>
            <param name="backColor">
                The background color.
            </param>
            <param name="borderColor">
                The border color.
            </param>
            <param name="captionColor">
                The caption color.
            </param>
            <param name="textColor">
                The text color.
            </param>
        </member>
        <member name="M:SilDev.Forms.NotifyBoxEx.Show(System.String,System.String,SilDev.Forms.NotifyBoxStartPosition,SilDev.Forms.NotifyBoxSound,System.Boolean,System.Double,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)">
            <summary>
                Displays a notification box with the specified parameters for 5 seconds.
            </summary>
            <param name="text">
                The notification text to display in the notify box.
            </param>
            <param name="caption">
                The caption text to display in the notify box.
            </param>
            <param name="position">
                The window position for the notify box.
            </param>
            <param name="sound">
                The play sound for the notify box.
            </param>
            <param name="topMost">
                <see langword="true"/> to place the notify box above all non-topmost
                windows; otherwise, <see langword="false"/>.
            </param>
            <param name="opacity">
                The opacity level.
            </param>
            <param name="backColor">
                The background color.
            </param>
            <param name="borderColor">
                The border color.
            </param>
            <param name="captionColor">
                The caption color.
            </param>
            <param name="textColor">
                The text color.
            </param>
        </member>
        <member name="M:SilDev.Forms.NotifyBoxEx.Show(System.String,System.String,SilDev.Forms.NotifyBoxStartPosition,System.UInt16,System.Boolean,System.Double,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)">
            <summary>
                Displays a notification box with the specified parameters.
            </summary>
            <param name="text">
                The notification text to display in the notify box.
            </param>
            <param name="caption">
                The caption text to display in the notify box.
            </param>
            <param name="position">
                The window position for the notify box.
            </param>
            <param name="duration">
                The duration of the time, in milliseconds, which the notify box remains
                active.
            </param>
            <param name="topMost">
                <see langword="true"/> to place the notify box above all non-topmost
                windows; otherwise, <see langword="false"/>.
            </param>
            <param name="opacity">
                The opacity level.
            </param>
            <param name="backColor">
                The background color.
            </param>
            <param name="borderColor">
                The border color.
            </param>
            <param name="captionColor">
                The caption color.
            </param>
            <param name="textColor">
                The text color.
            </param>
        </member>
        <member name="M:SilDev.Forms.NotifyBoxEx.Show(System.String,System.String,SilDev.Forms.NotifyBoxStartPosition,System.Boolean,System.Double,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)">
            <summary>
                Displays a notification box with the specified parameters for 5 seconds.
            </summary>
            <param name="text">
                The notification text to display in the notify box.
            </param>
            <param name="caption">
                The caption text to display in the notify box.
            </param>
            <param name="position">
                The window position for the notify box.
            </param>
            <param name="topMost">
                <see langword="true"/> to place the notify box above all non-topmost
                windows; otherwise, <see langword="false"/>.
            </param>
            <param name="opacity">
                The opacity level.
            </param>
            <param name="backColor">
                The background color.
            </param>
            <param name="borderColor">
                The border color.
            </param>
            <param name="captionColor">
                The caption color.
            </param>
            <param name="textColor">
                The text color.
            </param>
        </member>
        <member name="T:SilDev.Ini.IniDirect">
            <summary>
                Provides static functions for accessing INI files using the Win32 API.
            </summary>
        </member>
        <member name="M:SilDev.Ini.IniDirect.Read(System.String,System.String,System.String)">
            <summary>
                Retrieves the value from the specified section of an INI file.
                <para>
                    The Win32-API without file caching is used for reading in this case.
                    Please note that empty sections are not permitted.
                </para>
            </summary>
            <param name="file">
                The file path of the INI file to read.
            </param>
            <param name="section">
                The name of the section containing the key name.
            </param>
            <param name="key">
                The name of the key whose associated value is to be retrieved.
            </param>
        </member>
        <member name="M:SilDev.Ini.IniDirect.Write(System.String,System.String,System.String,System.Object,System.Boolean,System.Boolean)">
            <summary>
                Copies the <see cref="T:System.String"/> representation of the specified
                <see cref="T:System.Object"/> value into the specified section of an INI file. If
                the file does not exist, it is created.
                <para>
                    The Win32-API is used for writing in this case. Please note that empty
                    sections are not permitted and that this function writes all changes
                    directly on the disk, which means that the entire file is rewritten
                    every time. This causes many write accesses when used incorrectly.
                </para>
            </summary>
            <param name="file">
                The path of the INI file to write.
            </param>
            <param name="section">
                The name of the section to which the value will be copied.
            </param>
            <param name="key">
                The name of the key to be associated with a value.
                <para>
                    If this parameter is <see langword="null"/>, the entire section,
                    including all entries within the section, is deleted.
                </para>
            </param>
            <param name="value">
                The value to be written to the file.
                <para>
                    If this parameter is <see langword="null"/>, the key pointed to by the
                    key parameter is deleted.
                </para>
            </param>
            <param name="forceOverwrite">
                <see langword="true"/> to enable overwriting of a key with the same value
                as specified; otherwise, <see langword="false"/>.
            </param>
            <param name="skipExistValue">
                <see langword="true"/> to skip an existing value, even it is not the same
                value as specified; otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="T:SilDev.Ini.IniFileFormat">
            <summary>
                The file format of the INI document.
            </summary>
        </member>
        <member name="F:SilDev.Ini.IniFileFormat.Default">
            <summary>
                Standard INI file format.
            </summary>
        </member>
        <member name="F:SilDev.Ini.IniFileFormat.Regedit4">
            <summary>
                Windows Registry Editor Version 4 file format.
            </summary>
        </member>
        <member name="F:SilDev.Ini.IniFileFormat.Regedit5">
            <summary>
                Windows Registry Editor Version 5 file format.
            </summary>
        </member>
        <member name="T:SilDev.Ini.IniDocument">
            <summary>
                Represents an INI document.
            </summary>
        </member>
        <member name="P:SilDev.Ini.IniDocument.Count">
            <summary>
                Gets the number of elements in this instance.
            </summary>
        </member>
        <member name="P:SilDev.Ini.IniDocument.Document">
            <summary>
                Gets the raw object that is used to manage the complete data of this
                instance.
                <para>
                    Please use the indexer of this instance to update the content of this
                    <see cref="P:SilDev.Ini.IniDocument.Document"/>.
                </para>
            </summary>
        </member>
        <member name="P:SilDev.Ini.IniDocument.Comparer">
            <summary>
                Gets the value that determines how sections and keys are compared
                internally in this instance to allow duplicates if case-sensitive, or to
                avoid if case-insensitive.
            </summary>
        </member>
        <member name="P:SilDev.Ini.IniDocument.Sections">
            <summary>
                Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the sections of this
                instance.
            </summary>
        </member>
        <member name="P:SilDev.Ini.IniDocument.FileFormat">
            <summary>
                Gets or sets the file format of this instance.
            </summary>
        </member>
        <member name="P:SilDev.Ini.IniDocument.FilePath">
            <summary>
                Gets or sets the file path of this instance.
            </summary>
        </member>
        <member name="P:SilDev.Ini.IniDocument.Item(System.String,System.String,System.Int32)">
            <summary>
                Gets or sets the value under the specified index of the specified key in
                the specified section of this instance.
            </summary>
            <param name="section">
                The name of the section. Must be <see langword="null"/> to handle values of
                a non-section key.
            </param>
            <param name="key">
                The name of the key in the section.
            </param>
            <param name="index">
                The index of the key whose the value is associated.
            </param>
        </member>
        <member name="P:SilDev.Ini.IniDocument.Item(System.String,System.String,System.Int32,System.Type)">
            <summary>
                Gets or sets the value under the specified index of the specified key in
                the specified section of this instance.
                <para>
                    If possible, the return value is converted to the specified type;
                    otherwise, <see langword="null"/> is returned.
                </para>
            </summary>
            <param name="section">
                The name of the section. Must be <see langword="null"/> to handle values of
                a non-section key.
            </param>
            <param name="key">
                The name of the key in the section.
            </param>
            <param name="index">
                The index of the key whose the value is associated.
            </param>
            <param name="returnType">
                The type to which the return value should be converted.
            </param>
        </member>
        <member name="P:SilDev.Ini.IniDocument.Item(System.String,System.String,System.Type)">
            <summary>
                Gets or sets the first value of the specified key in the specified section
                of this instance.
                <para>
                    If possible, the return value is converted to the specified type;
                    otherwise, <see langword="null"/> is returned.
                </para>
            </summary>
            <param name="section">
                The name of the section. Must be <see langword="null"/> to handle values of
                a non-section key.
            </param>
            <param name="key">
                The name of the key in the section.
            </param>
            <param name="returnType">
                The type to which the return value should be converted.
            </param>
        </member>
        <member name="P:SilDev.Ini.IniDocument.Item(System.String,System.String,System.Int32,System.Object)">
            <summary>
                Gets or sets the value under the specified index of the specified key in
                the specified section of this instance.
                <para>
                    If possible, the return value is converted to the type of the specified
                    default object; otherwise, <see langword="null"/> is returned.
                </para>
            </summary>
            <param name="section">
                The name of the section. Must be <see langword="null"/> to handle values of
                a non-section key.
            </param>
            <param name="key">
                The name of the key in the section.
            </param>
            <param name="index">
                The index of the key whose the value is associated.
            </param>
            <param name="defValue">
                The default value that is returned if no value is found.
                <para>
                    Should be <see langword="null"/> if a new object value is to be set.
                </para>
            </param>
        </member>
        <member name="P:SilDev.Ini.IniDocument.Item(System.String,System.String,System.Object)">
            <summary>
                Gets or sets the first value of the specified key in the specified section
                of this instance.
                <para>
                    If possible, the return value is converted to the type of the specified
                    default object; otherwise, <see langword="null"/> is returned.
                </para>
            </summary>
            <param name="section">
                The name of the section. Must be <see langword="null"/> to handle values of
                a non-section key.
            </param>
            <param name="key">
                The name of the key in the section.
            </param>
            <param name="defValue">
                The default value that is returned if no value is found.
                <para>
                    Should be <see langword="null"/> if a new object value is to be set.
                </para>
            </param>
        </member>
        <member name="P:SilDev.Ini.IniDocument.Item(System.String)">
            <summary>
                Gets key/value dictionary of a specific section from this instance.
            </summary>
            <param name="section">
                The name of the section. Must be <see langword="null"/> for access
                non-section.
            </param>
        </member>
        <member name="M:SilDev.Ini.IniDocument.#ctor(System.String,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Ini.IniDocument"/> class with the
                specified parameters.
            </summary>
            <param name="fileOrContent">
                The path or content of an INI file.
            </param>
            <param name="ignoreCase">
                <see langword="true"/> to ignore the case of sections and keys; otherwise,
                <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Ini.IniDocument.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Ini.IniDocument"/> class with the
                specified parameter.
            </summary>
            <param name="fileOrContent">
                The path or content of an INI file.
            </param>
        </member>
        <member name="M:SilDev.Ini.IniDocument.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Ini.IniDocument"/> class.
            </summary>
        </member>
        <member name="M:SilDev.Ini.IniDocument.#ctor(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{System.String}}},SilDev.Ini.IniFileFormat)">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Ini.IniDocument"/> class with the
                specified parameter.
            </summary>
            <param name="dictionary">
                The <see cref="T:System.Collections.Generic.IDictionary`2"/> representation of an INI file.
            </param>
        </member>
        <member name="M:SilDev.Ini.IniDocument.LoadFrom(System.String,System.Boolean)">
            <summary>
                Loads the full content of an INI file or an INI file formatted string value
                into this instance.
            </summary>
            <param name="fileOrContent">
                The path or content of an INI file.
            </param>
            <param name="ignoreCase">
                <see langword="true"/> to ignore the case of sections and keys; otherwise,
                <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Ini.IniDocument.Load(System.Boolean)">
            <summary>
                Loads the content of the file at <see cref="P:SilDev.Ini.IniDocument.FilePath"/> into this instance.
            </summary>
            <param name="ignoreCase">
                <see langword="true"/> to ignore the case of sections and keys; otherwise,
                <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Ini.IniDocument.SaveTo(System.String,System.Boolean)">
            <summary>
                Saves the string representation of this instance to the specified path.
            </summary>
            <param name="path">
                The path to file to be written.
            </param>
            <param name="setNewFilePath">
                <see langword="true"/> to set a new value of the <see cref="P:SilDev.Ini.IniDocument.FilePath"/>
                property; otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Ini.IniDocument.Save">
            <summary>
                Saves the string representation of this instance to <see cref="P:SilDev.Ini.IniDocument.FilePath"/>.
            </summary>
        </member>
        <member name="M:SilDev.Ini.IniDocument.ContainsSection(System.String)">
            <summary>
                Determines whether this instance contains a specific section.
            </summary>
            <param name="section">
                The section to locate in this instance.
            </param>
        </member>
        <member name="M:SilDev.Ini.IniDocument.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object for this instance.
            </summary>
            <param name="info">
                The object that holds the serialized object data.
            </param>
            <param name="context">
                The contextual information about the source or destination.
            </param>
        </member>
        <member name="M:SilDev.Ini.IniDocument.GetValue(System.String,System.String,System.Int32)">
            <summary>
                Gets the value at the specified index of a specific key under a specific
                section of this instance.
            </summary>
            <param name="section">
                The name of the section. Must be <see langword="null"/> to retrieve the
                values of a non-section key.
            </param>
            <param name="key">
                The name of the key in the section.
            </param>
            <param name="index">
                The zero-based index whose the value is associated.
            </param>
        </member>
        <member name="M:SilDev.Ini.IniDocument.AddOrUpdate(System.String,System.String,System.Int32,System.String)">
            <summary>
                Sets the specified value under the index for the specified key in the
                specified section of this instance.
            </summary>
            <param name="section">
                The name of the section. Must be <see langword="null"/> to retrieve the
                values of a non-section key.
            </param>
            <param name="key">
                The name of the key in the section.
                <para>
                    If <see langword="null"/>, the entire section is removed.
                </para>
            </param>
            <param name="index">
                The zero-based index of the value.
                <para>
                    If higher than available, a new value is added to the list of values.
                </para>
            </param>
            <param name="value">
                The value to be set.
                <para>
                    If <see langword="null"/>, the entire key is removed.
                </para>
            </param>
            <exception cref="T:SilDev.ArgumentInvalidException">
                section or key contains invalid characters.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                index is below zero.
            </exception>
        </member>
        <member name="M:SilDev.Ini.IniDocument.AddOrUpdate(System.String,System.String,System.String)">
            <summary>
                Sets the specified value under the first index for the specified key in the
                specified section of this instance.
            </summary>
            <param name="section">
                The name of the section. Must be <see langword="null"/> to retrieve the
                values of a non-section key.
            </param>
            <param name="key">
                The name of the key in the section.
                <para>
                    If <see langword="null"/>, the entire section is removed.
                </para>
            </param>
            <param name="value">
                The value to be set.
                <para>
                    If <see langword="null"/>, the entire key is removed.
                </para>
            </param>
            <exception cref="T:SilDev.ArgumentInvalidException">
                section or key contains invalid characters.
            </exception>
        </member>
        <member name="M:SilDev.Ini.IniDocument.MergeWith(SilDev.Ini.IniDocument)">
            <summary>
                Copies everything of the specified <see cref="T:SilDev.Ini.IniDocument"/> instance to
                this instance.
                <para>
                    &#9762; Please note that existing values will be overwritten.
                </para>
            </summary>
            <param name="ini">
                The <see cref="T:SilDev.Ini.IniDocument"/> instance that is merged.
            </param>
        </member>
        <member name="M:SilDev.Ini.IniDocument.Remove(System.String)">
            <summary>
                Removes all keys and their associated values from the specified section of
                this instance.
            </summary>
            <param name="section">
                The name of the section. Must be <see langword="null"/> to handle
                non-section keys.
            </param>
        </member>
        <member name="M:SilDev.Ini.IniDocument.Remove(System.String,System.String)">
            <summary>
                Removes all values from the specified key in the specified section of this
                instance.
            </summary>
            <param name="section">
                The name of the section. Must be <see langword="null"/> to handle
                non-section keys.
            </param>
            <param name="key">
                The name of the key in the section.
            </param>
        </member>
        <member name="M:SilDev.Ini.IniDocument.RemoveAt(System.String,System.String,System.Int32)">
            <summary>
                Removes the value at the specified index under the specified key in the
                specified section of this instance.
            </summary>
            <param name="section">
                The name of the section. Must be <see langword="null"/> to handle
                non-section keys.
            </param>
            <param name="key">
                The name of the key in the section.
            </param>
            <param name="index">
                The zero-based index of the value to remove.
            </param>
        </member>
        <member name="M:SilDev.Ini.IniDocument.Clear">
            <summary>
                Removes all sections from this instance.
            </summary>
        </member>
        <member name="M:SilDev.Ini.IniDocument.Sort(System.String[])">
            <summary>
                Sorts the sections and keys in this instance.
            </summary>
            <param name="topSections">
                A sequence of section names that should always be on top.
            </param>
        </member>
        <member name="M:SilDev.Ini.IniDocument.Sort">
            <summary>
                Sorts the sections and keys in this instance.
            </summary>
        </member>
        <member name="M:SilDev.Ini.IniDocument.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:SilDev.Ini.IniDocument.Equals(SilDev.Ini.IniDocument)">
            <summary>
                Determines whether this instance have same values as the specified
                <see cref="T:SilDev.Ini.IniDocument"/> instance.
            </summary>
            <param name="other">
                The <see cref="T:SilDev.Ini.IniDocument"/> instance to compare.
            </param>
        </member>
        <member name="M:SilDev.Ini.IniDocument.Equals(System.Object)">
            <summary>
                Determines whether this instance have same values as the specified
                <see cref="T:System.Object"/>.
            </summary>
            <param name="other">
                The  <see cref="T:System.Object"/> to compare.
            </param>
        </member>
        <member name="M:SilDev.Ini.IniDocument.ToString">
            <summary>
                Returns a string that represents the current <see cref="T:SilDev.Ini.IniDocument"/>
                object.
            </summary>
        </member>
        <member name="M:SilDev.Ini.IniDocument.op_Equality(SilDev.Ini.IniDocument,SilDev.Ini.IniDocument)">
            <summary>
                Determines whether two specified <see cref="T:SilDev.Ini.IniDocument"/> instances have
                same values.
            </summary>
            <param name="left">
                The first <see cref="T:SilDev.Ini.IniDocument"/> instance to compare.
            </param>
            <param name="right">
                The second <see cref="T:SilDev.Ini.IniDocument"/> instance to compare.
            </param>
        </member>
        <member name="M:SilDev.Ini.IniDocument.op_Inequality(SilDev.Ini.IniDocument,SilDev.Ini.IniDocument)">
            <summary>
                Determines whether two specified <see cref="T:SilDev.Ini.IniDocument"/> instances have
                different values.
            </summary>
            <param name="left">
                The first <see cref="T:SilDev.Ini.IniDocument"/> instance to compare.
            </param>
            <param name="right">
                The second <see cref="T:SilDev.Ini.IniDocument"/> instance to compare.
            </param>
        </member>
        <member name="T:SilDev.Ini.IniReader">
            <summary>
                Provides the functionality for parsing INI documents.
            </summary>
        </member>
        <member name="M:SilDev.Ini.IniReader.Parse(System.String)">
            <summary>
                Converts the content of an INI file or an INI file formatted string value
                to an equivalent <see cref="T:SilDev.Ini.IniDocument"/> object.
            </summary>
            <param name="fileOrContent">
                The path or content of an INI file.
            </param>
        </member>
        <member name="M:SilDev.Ini.IniReader.TryParse(System.String,SilDev.Ini.IniDocument@)">
            <summary>
                Converts the content of an INI file or an INI file formatted string value
                to an equivalent <see cref="T:SilDev.Ini.IniDocument"/> object.
            </summary>
            <param name="fileOrContent">
                The path or content of an INI file.
            </param>
            <param name="result">
                The result <see cref="T:SilDev.Ini.IniDocument"/> object.
            </param>
        </member>
        <member name="T:SilDev.Ini.IniWriter">
            <summary>
                Provides the functionality for writing INI documents.
            </summary>
        </member>
        <member name="M:SilDev.Ini.IniWriter.WriteTo(SilDev.Ini.IniDocument,System.IO.Stream)">
            <summary>
                Writes the string representation of a specific <see cref="T:SilDev.Ini.IniDocument"/>
                object to the specified destination stream.
            </summary>
            <param name="source">
                The <see cref="T:SilDev.Ini.IniDocument"/> object to write.
            </param>
            <param name="destStream">
                The destination stream to be written.
            </param>
            <exception cref="T:System.ArgumentNullException">
                source or destStream is null.
            </exception>
        </member>
        <member name="M:SilDev.Ini.IniWriter.WriteTo(SilDev.Ini.IniDocument,System.String)">
            <summary>
                Writes the string representation of a specific <see cref="T:SilDev.Ini.IniDocument"/>
                object to the specified destination file.
            </summary>
            <param name="source">
                The <see cref="T:SilDev.Ini.IniDocument"/> object to write.
            </param>
            <param name="destFile">
                The destination file to be written.
            </param>
        </member>
        <member name="T:SilDev.Ini.Legacy.Ini">
            <summary>
                Provides functionality to parse INI documents with automated caching
                system.
            </summary>
        </member>
        <member name="P:SilDev.Ini.Legacy.Ini.MaxCacheSize">
            <summary>
                Gets or sets the maximum number of cached files.
            </summary>
        </member>
        <member name="P:SilDev.Ini.Legacy.Ini.SortBySections">
            <summary>
                Specifies a sequence of section names to be sorted first.
            </summary>
        </member>
        <member name="P:SilDev.Ini.Legacy.Ini.FilePath">
            <summary>
                Gets or sets a default INI file.
            </summary>
        </member>
        <member name="M:SilDev.Ini.Legacy.Ini.SaveCache(System.String,System.String,System.Boolean)">
            <summary>
                Save the cached data to the specified file.
            </summary>
            <param name="cacheFilePath">
                The full file path of the cache file to create.
            </param>
            <param name="fileOrContent">
                The full file path or content of an INI file. If this parameter is NULL,
                all cached data are saved.
            </param>
            <param name="compress">
                <see langword="true"/> to compress the cache; otherwise,
                <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Ini.Legacy.Ini.LoadCache(System.String)">
            <summary>
                Loads the data of a cache file into memory.
                <para>
                    Please note that <see cref="P:SilDev.Ini.Legacy.Ini.MaxCacheSize"/> is ignored in this case.
                </para>
            </summary>
            <param name="cacheFilePath">
                The full path of a cache file.
            </param>
        </member>
        <member name="M:SilDev.Ini.Legacy.Ini.GetRegex(System.Boolean)">
            <summary>
                Gets the regular expression to convert the INI data into an accessible
                format.
            </summary>
            <param name="allowEmptySection">
                <see langword="true"/> to allow key value pairs without section; otherwise,
                <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Ini.Legacy.Ini.GetFile">
            <summary>
                Gets the full path of the default INI file.
            </summary>
        </member>
        <member name="M:SilDev.Ini.Legacy.Ini.SetFile(System.String[])">
            <summary>
                Specifies an INI file to use as default.
            </summary>
            <param name="paths">
                An array of parts of the path.
            </param>
        </member>
        <member name="M:SilDev.Ini.Legacy.Ini.Detach(System.String)">
            <summary>
                Removes the read content of an INI file from cache.
            </summary>
            <param name="fileOrContent">
                The full file path or content of an INI file.
            </param>
        </member>
        <member name="M:SilDev.Ini.Legacy.Ini.GetSections(System.String,System.Boolean)">
            <summary>
                Retrieves all section names of an INI file or an INI file formatted string
                value.
            </summary>
            <param name="fileOrContent">
                The full file path or content of an INI file.
            </param>
            <param name="sorted">
                <see langword="true"/> to sort the sections; otherwise,
                <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Ini.Legacy.Ini.GetSections(System.Boolean)">
            <summary>
                Retrieves all section names of an INI file or an INI file formatted string
                value.
            </summary>
            <param name="sorted">
                <see langword="true"/> to sort the sections; otherwise,
                <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Ini.Legacy.Ini.RemoveSection(System.String,System.String)">
            <summary>
                Removes the specified section including all associated keys of an INI file
                or an INI file formatted string value.
            </summary>
            <param name="section">
                The name of the section to remove.
            </param>
            <param name="fileOrContent">
                The full file path or content of an INI file.
            </param>
        </member>
        <member name="M:SilDev.Ini.Legacy.Ini.GetKeys(System.String,System.String,System.Boolean)">
            <summary>
                Retrieves all key names of an INI file or an INI file formatted string
                value.
            </summary>
            <param name="section">
                The name of the section to get the key names. The value must be NULL to get
                all the key names of the specified fileOrContent parameter.
            </param>
            <param name="fileOrContent">
                The full file path or content of an INI file.
            </param>
            <param name="sorted">
                <see langword="true"/> to sort keys; otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Ini.Legacy.Ini.GetKeys(System.String,System.Boolean)">
            <summary>
                Retrieves all key names of an INI file or an INI file formatted string
                value.
            </summary>
            <param name="section">
                The name of the section to get the key names. The value must be NULL to get
                all the key names of the specified fileOrContent parameter.
            </param>
            <param name="sorted">
                <see langword="true"/> to sort keys; otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Ini.Legacy.Ini.RemoveKey(System.String,System.String,System.String)">
            <summary>
                Removes the specified key from the specified section, of an INI file or an
                INI file formatted string value.
            </summary>
            <param name="section">
                The name of the section containing the key to remove.
            </param>
            <param name="key">
                The name of the key to remove.
            </param>
            <param name="fileOrContent">
                The full file path or content of an INI file.
            </param>
        </member>
        <member name="M:SilDev.Ini.Legacy.Ini.ReadAll(System.String,System.Boolean)">
            <summary>
                Retrieves the full content of an INI file or an INI file formatted string
                value.
            </summary>
            <param name="fileOrContent">
                The full file path or content of an INI file.
            </param>
            <param name="sorted">
                <see langword="true"/> to sort the sections and keys; otherwise,
                <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Ini.Legacy.Ini.ReadAll(System.Boolean)">
            <summary>
                Retrieves the full content of an INI file or an INI file formatted string
                value.
            </summary>
            <param name="sorted">
                <see langword="true"/> to sort the sections and keys; otherwise,
                <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Ini.Legacy.Ini.Read(System.String,System.String,System.String,System.Boolean,System.Int32)">
            <summary>
                Retrieves a <see cref="T:System.String"/> value from the specified section in an INI
                file or an INI file formatted string value.
            </summary>
            <param name="section">
                The name of the section containing the key name. The value must be NULL for
                a non-section key.
            </param>
            <param name="key">
                The name of the key whose associated value is to be retrieved.
            </param>
            <param name="fileOrContent">
                The full file path or content of an INI file.
            </param>
            <param name="reread">
                <see langword="true"/> to reread the INI file; otherwise,
                <see langword="false"/>.
            </param>
            <param name="index">
                The value index used to handle multiple key value pairs.
            </param>
        </member>
        <member name="M:SilDev.Ini.Legacy.Ini.ReadOnly(System.String,System.String,System.String,System.Int32)">
            <summary>
                Retrieves a <see cref="T:System.String"/> value from the specified section in an INI
                file or an INI file formatted string value and release all cached resources
                used by the specified INI file or the INI file formatted string value.
            </summary>
            <param name="section">
                The name of the section containing the key name. The value must be NULL for
                a non-section key.
            </param>
            <param name="key">
                The name of the key whose associated value is to be retrieved.
            </param>
            <param name="fileOrContent">
                The full file path or content of an INI file.
            </param>
            <param name="index">
                The value index used to handle multiple key value pairs.
            </param>
        </member>
        <member name="M:SilDev.Ini.Legacy.Ini.Read``1(System.String,System.String,``0,System.String,System.Boolean)">
            <summary>
                Retrieves a value from the specified section in an INI file or an INI file
                formatted string value.
            </summary>
            <typeparam name="TValue">
                The value type.
            </typeparam>
            <param name="section">
                The name of the section containing the key name.
            </param>
            <param name="key">
                The name of the key whose associated value is to be retrieved.
            </param>
            <param name="defValue">
                The value that is used as default.
            </param>
            <param name="fileOrContent">
                The full file path or content of an INI file.
            </param>
            <param name="reread">
                <see langword="true"/> to reread the INI file; otherwise,
                <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Ini.Legacy.Ini.ReadOnly``1(System.String,System.String,``0,System.String)">
            <summary>
                Retrieves a value from the specified section in an INI file or an INI file
                formatted string value and release all cached resources used by the
                specified INI file or the INI file formatted string value.
            </summary>
            <typeparam name="TValue">
                The value type.
            </typeparam>
            <param name="section">
                The name of the section containing the key name.
            </param>
            <param name="key">
                The name of the key whose associated value is to be retrieved.
            </param>
            <param name="defValue">
                The value that is used as default.
            </param>
            <param name="fileOrContent">
                The full file path or content of an INI file.
            </param>
        </member>
        <member name="M:SilDev.Ini.Legacy.Ini.ReadDirect(System.String,System.String,System.String)">
            <summary>
                Retrieves a <see cref="T:System.String"/> value from the specified section in an INI
                file.
                <para>
                    The Win32-API without file caching is used for reading in this case.
                </para>
            </summary>
            <param name="section">
                The name of the section containing the key name.
            </param>
            <param name="key">
                The name of the key whose associated value is to be retrieved.
            </param>
            <param name="file">
                The full file path of an INI file.
            </param>
        </member>
        <member name="M:SilDev.Ini.Legacy.Ini.WriteAll(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}}},System.String,System.Boolean,System.Boolean)">
            <summary>
                Writes the specified content to an INI file on the disk.
            </summary>
            <param name="content">
                The content based on <see cref="M:SilDev.Ini.Legacy.Ini.ReadAll(System.String,System.Boolean)"/>.
                <para>
                    If this parameter is NULL, the function writes all the cached data from
                    the specified INI file to the disk.
                </para>
            </param>
            <param name="file">
                The full file path of an INI file.
                <para>
                    If this parameter is NULL, the default INI file is used.
                </para>
            </param>
            <param name="sorted">
                <see langword="true"/> to sort the sections and keys; otherwise,
                <see langword="false"/>.
            </param>
            <param name="detach">
                <see langword="true"/> to release all cached resources used by the
                specified INI file; otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Ini.Legacy.Ini.WriteAll(System.String,System.Boolean,System.Boolean)">
            <summary>
                Writes all the cached data from the specified INI file to the disk.
            </summary>
            <param name="file">
                The full file path of an INI file.
                <para>
                    If this parameter is NULL, the default INI file is used.
                </para>
            </param>
            <param name="sorted">
                <see langword="true"/> to sort the sections and keys; otherwise,
                <see langword="false"/>.
            </param>
            <param name="detach">
                <see langword="true"/> to release all cached resources used by the
                specified INI file; otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Ini.Legacy.Ini.Write``1(System.String,System.String,``0,System.String,System.Boolean,System.Boolean,System.Int32)">
            <summary>
                Copies the specified value into the specified section of an INI file.
                <para>
                    This function updates only the cache and has no effect on the file
                    until <see cref="M:SilDev.Ini.Legacy.Ini.WriteAll(System.String,System.Boolean,System.Boolean)"/> is called.
                </para>
            </summary>
            <typeparam name="TValue">
                The value type.
            </typeparam>
            <param name="section">
                The name of the section to which the value will be copied.
            </param>
            <param name="key">
                The name of the key to be associated with a value.
                <para>
                    If this parameter is NULL, the entire section, including all entries
                    within the section, is deleted.
                </para>
            </param>
            <param name="value">
                The value to be written to the file.
                <para>
                    If this parameter is NULL, the key pointed to by the key parameter is
                    deleted.
                </para>
            </param>
            <param name="fileOrContent">
                The full file path or content of an INI file.
            </param>
            <param name="forceOverwrite">
                <see langword="true"/> to enable overwriting of a key with the same value
                as specified; otherwise, <see langword="false"/>.
            </param>
            <param name="skipExistValue">
                <see langword="true"/> to skip an existing value, even it is not the same
                value as specified; otherwise, <see langword="false"/>.
            </param>
            <param name="index">
                The value index used to handle multiple key value pairs.
            </param>
        </member>
        <member name="M:SilDev.Ini.Legacy.Ini.Write``1(System.String,System.String,``0,System.Boolean,System.Boolean,System.Int32)">
            <summary>
                Copies the specified value into the specified section of an INI file.
                <para>
                    This function updates only the cache and has no effect on the file
                    until <see cref="M:SilDev.Ini.Legacy.Ini.WriteAll(System.String,System.Boolean,System.Boolean)"/> is called.
                </para>
            </summary>
            <typeparam name="TValue">
                The value type.
            </typeparam>
            <param name="section">
                The name of the section to which the value will be copied.
            </param>
            <param name="key">
                The name of the key to be associated with a value.
                <para>
                    If this parameter is NULL, the entire section, including all entries
                    within the section, is deleted.
                </para>
            </param>
            <param name="value">
                The value to be written to the file.
                <para>
                    If this parameter is NULL, the key pointed to by the key parameter is
                    deleted.
                </para>
            </param>
            <param name="forceOverwrite">
                <see langword="true"/> to enable overwriting of a key with the same value
                as specified; otherwise, <see langword="false"/>.
            </param>
            <param name="skipExistValue">
                <see langword="true"/> to skip an existing value, even it is not the same
                value as specified; otherwise, <see langword="false"/>.
            </param>
            <param name="index">
                The value index used to handle multiple key value pairs.
            </param>
        </member>
        <member name="M:SilDev.Ini.Legacy.Ini.WriteDirect(System.String,System.String,System.Object,System.String,System.Boolean,System.Boolean)">
            <summary>
                Copies the <see cref="T:System.String"/> representation of the specified
                <see cref="T:System.Object"/> value into the specified section of an INI file. If
                the file does not exist, it is created.
                <para>
                    The Win32-API is used for writing in this case. Please note that this
                    function writes all changes directly on the disk. This causes many
                    write accesses when used incorrectly.
                </para>
            </summary>
            <param name="section">
                The name of the section to which the value will be copied.
            </param>
            <param name="key">
                The name of the key to be associated with a value.
                <para>
                    If this parameter is NULL, the entire section, including all entries
                    within the section, is deleted.
                </para>
            </param>
            <param name="value">
                The value to be written to the file.
                <para>
                    If this parameter is NULL, the key pointed to by the key parameter is
                    deleted.
                </para>
            </param>
            <param name="file">
                The full path of an INI file.
            </param>
            <param name="forceOverwrite">
                <see langword="true"/> to enable overwriting of a key with the same value
                as specified; otherwise, <see langword="false"/>.
            </param>
            <param name="skipExistValue">
                <see langword="true"/> to skip an existing value, even it is not the same
                value as specified; otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="T:SilDev.Investment.CacheInvestor">
            <summary>
                Provides simple global caching of elements.
            </summary>
        </member>
        <member name="M:SilDev.Investment.CacheInvestor.GetId``1">
            <summary>
                Gets the default reference identifier of the provided type.
            </summary>
            <typeparam name="TElement">
                The type of the element.
            </typeparam>
        </member>
        <member name="M:SilDev.Investment.CacheInvestor.AddDefault``1(System.Int32)">
            <summary>
                Adds a default instance for the provided type under the specified
                identifier.
            </summary>
            <typeparam name="TElement">
                The type of the element.
            </typeparam>
            <param name="id">
                The reference identifier.
            </param>
        </member>
        <member name="M:SilDev.Investment.CacheInvestor.AddDefault``1">
            <summary>
                Adds a default instance for the provided type under its default identifier.
            </summary>
            <typeparam name="TElement">
                The type of the element.
            </typeparam>
        </member>
        <member name="M:SilDev.Investment.CacheInvestor.AddItem``1(System.Int32,``0)">
            <summary>
                Adds the specified element under the specified identifier.
            </summary>
            <typeparam name="TElement">
                The type of the element.
            </typeparam>
            <param name="id">
                The reference identifier.
            </param>
            <param name="element">
                The element to be added.
            </param>
        </member>
        <member name="M:SilDev.Investment.CacheInvestor.AddItem``1(``0)">
            <summary>
                Adds the specified element under the default identifier of the provided
                type.
            </summary>
            <typeparam name="TElement">
                The type of the element.
            </typeparam>
            <param name="element">
                The value to be added.
            </param>
        </member>
        <member name="M:SilDev.Investment.CacheInvestor.AddOrUpdate``1(System.Int32,``0)">
            <summary>
                Adds or updates an element under the specified identifier.
            </summary>
            <typeparam name="TElement">
                The type of the element.
            </typeparam>
            <param name="id">
                The reference identifier.
            </param>
            <param name="element">
                The element to be added or updated.
            </param>
        </member>
        <member name="M:SilDev.Investment.CacheInvestor.AddOrUpdate``1(``0)">
            <summary>
                Adds or updates an element under the default identifier of the provided
                type.
            </summary>
            <typeparam name="TElement">
                The type of the element.
            </typeparam>
            <param name="element">
                The element to be added or updated.
            </param>
        </member>
        <member name="M:SilDev.Investment.CacheInvestor.Update``1(System.Int32,``0)">
            <summary>
                Updates an element under the specified identifier.
            </summary>
            <typeparam name="TElement">
                The type of the element.
            </typeparam>
            <param name="id">
                The reference identifier.
            </param>
            <param name="element">
                The element to be updated.
            </param>
        </member>
        <member name="M:SilDev.Investment.CacheInvestor.Update``1(``0)">
            <summary>
                Updates an element under the default identifier of the provided type.
            </summary>
            <typeparam name="TElement">
                The type of the element.
            </typeparam>
            <param name="element">
                The element to be updated.
            </param>
        </member>
        <member name="M:SilDev.Investment.CacheInvestor.GetDefault``1">
            <summary>
                Gets the default element under the default identifier of the provided type.
                <para>
                    If it does not exist, it will be created.
                </para>
            </summary>
            <typeparam name="TElement">
                The type of the element.
            </typeparam>
        </member>
        <member name="M:SilDev.Investment.CacheInvestor.GetItem``1(System.Int32)">
            <summary>
                Gets the element associated with the specified identifier.
            </summary>
            <typeparam name="TElement">
                The type of the element.
            </typeparam>
            <param name="id">
                The reference identifier.
            </param>
        </member>
        <member name="M:SilDev.Investment.CacheInvestor.GetItem``1">
            <summary>
                Gets the element associated with the default identifier of the provided
                type.
            </summary>
            <typeparam name="TElement">
                The type of the element.
            </typeparam>
        </member>
        <member name="M:SilDev.Investment.CacheInvestor.TryGetItem``1(System.Int32,``0@)">
            <summary>
                Gets the element associated with the specified identifier.
            </summary>
            <typeparam name="TElement">
                The type of the element.
            </typeparam>
            <param name="id">
                The reference identifier.
            </param>
            <param name="result">
                When this method returns <see langword="true"/>, the value associated with
                the specified identifier; otherwise, the default value for the provided
                type.
            </param>
        </member>
        <member name="M:SilDev.Investment.CacheInvestor.TryGetItem``1(``0@)">
            <summary>
                Gets the element associated with the default identifier of the provided
                type.
            </summary>
            <typeparam name="TElement">
                The type of the element.
            </typeparam>
            <param name="result">
                When this method returns <see langword="true"/>, the value associated with
                the specified identifier; otherwise, the default value for the provided
                type.
            </param>
        </member>
        <member name="M:SilDev.Investment.CacheInvestor.RemoveItem``1(System.Int32)">
            <summary>
                Removes the element associated with the specified identifier.
            </summary>
            <typeparam name="TElement">
                The type of the element.
            </typeparam>
            <param name="id">
                The reference identifier.
            </param>
        </member>
        <member name="M:SilDev.Investment.CacheInvestor.RemoveItem``1">
            <summary>
                Removes the element associated with the default identifier of the provided
                type.
            </summary>
            <typeparam name="TElement">
                The type of the element.
            </typeparam>
        </member>
        <member name="T:SilDev.Investment.ValueItemHost`1">
            <summary>
                Defines a collection type for <see cref="T:SilDev.Investment.ValueItem`1"/> instances.
            </summary>
            <typeparam name="TKey">
                The enumeration type of the key.
                <para>
                    It is strongly recommended to avoid using multiple keys with the same
                    values.
                </para>
            </typeparam>
        </member>
        <member name="P:SilDev.Investment.ValueItemHost`1.ItemDictionary">
            <summary>
                Gets the collection of keys and values.
            </summary>
        </member>
        <member name="M:SilDev.Investment.ValueItemHost`1.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Investment.ValueItemHost`1"/>.
            </summary>
        </member>
        <member name="M:SilDev.Investment.ValueItemHost`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Investment.ValueItemHost`1"/> class
                with serialized data.
            </summary>
            <param name="info">
                The object that holds the serialized object data.
            </param>
            <param name="context">
                The contextual information about the source or destination.
            </param>
        </member>
        <member name="M:SilDev.Investment.ValueItemHost`1.Load(System.String,SilDev.Investment.ValueItemHost{`0},System.Boolean)">
            <summary>
                Deserializes the specified file into this instance graph.
            </summary>
            <param name="path">
                The file to deserialize.
            </param>
            <param name="defValue">
                The default value.
            </param>
            <param name="merge">
                <see langword="true"/> to merge the current elements with the new ones;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Investment.ValueItemHost`1.Save(System.String,System.Boolean)">
            <summary>
                Creates a new file, writes this instance graph into to the file, and then
                closes the file.
            </summary>
            <param name="path">
                The file to create.
            </param>
            <param name="overwrite">
                <see langword="true"/> to allow an existing file to be overwritten;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Investment.ValueItemHost`1.AddItem``1(`0,SilDev.Investment.ValueItem{``0})">
            <summary>
                Adds the specified item to this instance that is addressed to the specified
                key.
            </summary>
            <typeparam name="TValue">
                The type of values stored in the item.
            </typeparam>
            <param name="key">
                The key of the element to add.
            </param>
            <param name="item">
                The element to add.
            </param>
        </member>
        <member name="M:SilDev.Investment.ValueItemHost`1.AddItem``1(`0,``0,``0,``0,``0,System.Func{``0,``0},System.Func{``0,``0})">
            <summary>
                Adds to this instance a newly created item from the specified values that
                is addressed to the specified key.
            </summary>
            <typeparam name="TValue">
                The type of values stored in the item.
            </typeparam>
            <param name="key">
                The key of the element to add.
            </param>
            <param name="value">
                The value to be set.
            </param>
            <param name="defValue">
                The value used as default.
            </param>
            <param name="minValue">
                The minimum value. Must be smaller than the maximum value.
            </param>
            <param name="maxValue">
                The maximum value. Must be larger than the minimum value.
            </param>
            <param name="getValidationFunc">
                The method that is called when <see cref="P:SilDev.Investment.ValueItem`1.Value"/> is
                get.
                <para>
                    Please note that <see cref="T:System.Func`2"/> methods cannot be
                    serialized.
                </para>
            </param>
            <param name="setValidationFunc">
                The method that is called when <see cref="P:SilDev.Investment.ValueItem`1.Value"/> is
                set.
                <para>
                    Please note that <see cref="T:System.Func`2"/> methods cannot be
                    serialized.
                </para>
            </param>
        </member>
        <member name="M:SilDev.Investment.ValueItemHost`1.AddItem``1(`0,``0,``0,System.Func{``0,``0},System.Func{``0,``0})">
            <summary>
                Adds to this instance a newly created item from the specified values that
                is addressed to the specified key.
            </summary>
            <typeparam name="TValue">
                The type of values stored in the item.
            </typeparam>
            <param name="key">
                The key of the element to add.
            </param>
            <param name="value">
                The value to be set.
            </param>
            <param name="defValue">
                The value used as default.
            </param>
            <param name="getValidationFunc">
                The method that is called when <see cref="P:SilDev.Investment.ValueItem`1.Value"/> is
                get.
                <para>
                    Please note that <see cref="T:System.Func`2"/> methods cannot be
                    serialized.
                </para>
            </param>
            <param name="setValidationFunc">
                The method that is called when <see cref="P:SilDev.Investment.ValueItem`1.Value"/> is
                set.
                <para>
                    Please note that <see cref="T:System.Func`2"/> methods cannot be
                    serialized.
                </para>
            </param>
        </member>
        <member name="M:SilDev.Investment.ValueItemHost`1.Clear(System.Boolean)">
            <summary>
                Removes all keys and values from this instance.
            </summary>
            <param name="removeOnlyInvalidElements">
                <see langword="true"/> to remove only invalid elements; otherwise,
                <see langword="false"/>.
                <para>
                    Please note that elements can become invalid if the associated key has
                    been deleted.
                </para>
            </param>
        </member>
        <member name="M:SilDev.Investment.ValueItemHost`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object for this instance.
            </summary>
            <param name="info">
                The object that holds the serialized object data.
            </param>
            <param name="context">
                The contextual information about the source or destination.
            </param>
        </member>
        <member name="M:SilDev.Investment.ValueItemHost`1.GetKeyName(`0)">
            <summary>
                Retrieves the name associated with the specified key.
            </summary>
            <param name="key">
                The key associated with the name.
            </param>
        </member>
        <member name="M:SilDev.Investment.ValueItemHost`1.GetKeyNames(System.Boolean)">
            <summary>
                Retrieves all valid key names.
            </summary>
        </member>
        <member name="M:SilDev.Investment.ValueItemHost`1.GetKeys">
            <summary>
                Retrieves all valid keys.
            </summary>
        </member>
        <member name="M:SilDev.Investment.ValueItemHost`1.GetItem``1(`0)">
            <summary>
                Gets the element associated with the specified key.
            </summary>
            <typeparam name="TValue">
                The type of values stored in the element.
            </typeparam>
            <param name="key">
                The key of the element to be retrieved.
            </param>
        </member>
        <member name="M:SilDev.Investment.ValueItemHost`1.RemoveItem(`0)">
            <summary>
                Removes the element associated with the specified key from this instance.
            </summary>
            <param name="key">
                The key of the element to be deleted.
            </param>
        </member>
        <member name="M:SilDev.Investment.ValueItemHost`1.GetValue``1(`0)">
            <summary>
                Gets the value of the element associated with the specified key.
            </summary>
            <typeparam name="TValue">
                The type of values stored in the element.
            </typeparam>
            <param name="key">
                The key of the element to retrieve its value.
            </param>
        </member>
        <member name="M:SilDev.Investment.ValueItemHost`1.SetValue``1(`0,``0)">
            <summary>
                Sets the value of the element associated with the specified key.
            </summary>
            <typeparam name="TValue">
                The type of values stored in the element.
            </typeparam>
            <param name="key">
                The key of the element whose value should be set.
            </param>
            <param name="value">
                The value to be set.
            </param>
        </member>
        <member name="M:SilDev.Investment.ValueItemHost`1.Sort">
            <summary>
                Sorts the elements in the entire <see cref="P:SilDev.Investment.ValueItemHost`1.ItemDictionary"/> using the
                <see cref="T:SilDev.AlphaNumericComparer"/> comparer.
            </summary>
        </member>
        <member name="M:SilDev.Investment.ValueItemHost`1.Equals(SilDev.Investment.ValueItemHost{`0})">
            <summary>
                Determines whether this instance has the same values as another.
            </summary>
            <param name="other">
                The other <see cref="T:SilDev.Investment.ValueItemHost`1"/> instance to compare.
            </param>
        </member>
        <member name="M:SilDev.Investment.ValueItemHost`1.Equals(System.Object)">
            <summary>
                Determines whether this instance has the same values as another.
            </summary>
            <param name="other">
                The other <see cref="T:SilDev.Investment.ValueItemHost`1"/> instance object to compare.
            </param>
        </member>
        <member name="M:SilDev.Investment.ValueItemHost`1.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:SilDev.Investment.ValueItemHost`1.ToString">
            <summary>
                Returns the string representation of this instance.
            </summary>
        </member>
        <member name="M:SilDev.Investment.ValueItemHost`1.op_Equality(SilDev.Investment.ValueItemHost{`0},SilDev.Investment.ValueItemHost{`0})">
            <summary>
                Determines whether two specified <see cref="T:SilDev.Investment.ValueItemHost`1"/>
                instances have same values.
            </summary>
            <param name="left">
                The first <see cref="T:SilDev.Investment.ValueItemHost`1"/> instance to compare.
            </param>
            <param name="right">
                The second <see cref="T:SilDev.Investment.ValueItemHost`1"/> instance to compare.
            </param>
        </member>
        <member name="M:SilDev.Investment.ValueItemHost`1.op_Inequality(SilDev.Investment.ValueItemHost{`0},SilDev.Investment.ValueItemHost{`0})">
            <summary>
                Determines whether two specified <see cref="T:SilDev.Investment.ValueItemHost`1"/>
                instances have different values.
            </summary>
            <param name="left">
                The first <see cref="T:SilDev.Investment.ValueItemHost`1"/> instance to compare.
            </param>
            <param name="right">
                The second <see cref="T:SilDev.Investment.ValueItemHost`1"/> instance to compare.
            </param>
        </member>
        <member name="T:SilDev.Investment.ValueItem`1">
            <summary>
                Defines a value type that can store and retrieve data.
            </summary>
            <typeparam name="TValue">
                The type of the value.
            </typeparam>
        </member>
        <member name="P:SilDev.Investment.ValueItem`1.MinMaxValidation">
            <summary>
                Gets the value that determines whether <see cref="P:SilDev.Investment.ValueItem`1.Value"/> is validated by
                <see cref="P:SilDev.Investment.ValueItem`1.MinValue"/> and <see cref="P:SilDev.Investment.ValueItem`1.MaxValue"/>.
            </summary>
        </member>
        <member name="P:SilDev.Investment.ValueItem`1.MinValue">
            <summary>
                Gets the minimum value, if available; otherwise, the default value is
                returned.
            </summary>
        </member>
        <member name="P:SilDev.Investment.ValueItem`1.MaxValue">
            <summary>
                Gets the maximum value, if available; otherwise, the default value is
                returned.
            </summary>
        </member>
        <member name="P:SilDev.Investment.ValueItem`1.DefValue">
            <summary>
                Gets the default value.
            </summary>
        </member>
        <member name="P:SilDev.Investment.ValueItem`1.Value">
            <summary>
                Gets or sets the value.
            </summary>
        </member>
        <member name="P:SilDev.Investment.ValueItem`1.ValueGetValidationFunc">
            <summary>
                Gets the method that is called when <see cref="P:SilDev.Investment.ValueItem`1.Value"/> is get, if
                available; otherwise, the default value is returned.
                <para>
                    Please note that <see cref="T:System.Func`2"/> methods cannot be
                    serialized.
                </para>
            </summary>
        </member>
        <member name="P:SilDev.Investment.ValueItem`1.ValueSetValidationFunc">
            <summary>
                Gets the method that is called when <see cref="P:SilDev.Investment.ValueItem`1.Value"/> is set, if
                available; otherwise, the default value is returned.
                <para>
                    Please note that <see cref="T:System.Func`2"/> methods cannot be
                    serialized.
                </para>
            </summary>
        </member>
        <member name="M:SilDev.Investment.ValueItem`1.#ctor(`0,`0,`0,`0,System.Func{`0,`0},System.Func{`0,`0})">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Investment.ValueItem`1"/> with the
                specified value, default value, minimum value and maximum value.
            </summary>
            <param name="value">
                The value to be set.
            </param>
            <param name="defValue">
                The value used as default.
            </param>
            <param name="minValue">
                The minimum value. Must be smaller than the maximum value.
            </param>
            <param name="maxValue">
                The maximum value. Must be larger than the minimum value.
            </param>
            <param name="getValidationFunc">
                The method that is called when <see cref="P:SilDev.Investment.ValueItem`1.Value"/> is get.
                <para>
                    Please note that <see cref="T:System.Func`2"/> methods cannot be
                    serialized.
                </para>
            </param>
            <param name="setValidationFunc">
                The method that is called when <see cref="P:SilDev.Investment.ValueItem`1.Value"/> is set.
                <para>
                    Please note that <see cref="T:System.Func`2"/> methods cannot be
                    serialized.
                </para>
            </param>
        </member>
        <member name="M:SilDev.Investment.ValueItem`1.#ctor(`0,`0,System.Func{`0,`0},System.Func{`0,`0})">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Investment.ValueItem`1"/> with the
                specified value and default value.
            </summary>
            <param name="value">
                The value to be set.
            </param>
            <param name="defValue">
                The value used as default.
            </param>
            <param name="getValidationFunc">
                The method that is called when <see cref="P:SilDev.Investment.ValueItem`1.Value"/> is get.
                <para>
                    Please note that <see cref="T:System.Func`2"/> methods cannot be
                    serialized.
                </para>
            </param>
            <param name="setValidationFunc">
                The method that is called when <see cref="P:SilDev.Investment.ValueItem`1.Value"/> is set.
                <para>
                    Please note that <see cref="T:System.Func`2"/> methods cannot be
                    serialized.
                </para>
            </param>
        </member>
        <member name="M:SilDev.Investment.ValueItem`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Investment.ValueItem`1"/> class
                with serialized data.
            </summary>
            <param name="info">
                The object that holds the serialized object data.
            </param>
            <param name="context">
                The contextual information about the source or destination.
            </param>
        </member>
        <member name="M:SilDev.Investment.ValueItem`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object for this instance.
            </summary>
            <param name="info">
                The object that holds the serialized object data.
            </param>
            <param name="context">
                The contextual information about the source or destination.
            </param>
        </member>
        <member name="M:SilDev.Investment.ValueItem`1.Equals(SilDev.Investment.ValueItem{`0})">
            <summary>
                Determines whether this instance has the same values as another.
            </summary>
            <param name="other">
                The other <see cref="T:SilDev.Investment.ValueItem`1"/> instance to compare.
            </param>
        </member>
        <member name="M:SilDev.Investment.ValueItem`1.Equals(System.Object)">
            <summary>
                Determines whether this instance has the same values as another.
            </summary>
            <param name="other">
                The other <see cref="T:SilDev.Investment.ValueItem`1"/> instance object to compare.
            </param>
        </member>
        <member name="M:SilDev.Investment.ValueItem`1.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:SilDev.Investment.ValueItem`1.ToString">
            <summary>
                Returns the string representation of this instance.
            </summary>
        </member>
        <member name="M:SilDev.Investment.ValueItem`1.ValidateGetValue(`0)">
            <summary>
                Ensures that the specified value is valid. If <see cref="P:SilDev.Investment.ValueItem`1.MinValue"/> and
                <see cref="P:SilDev.Investment.ValueItem`1.MaxValue"/> have been set and are valid, the specified value is
                calibrated if it is not between <see cref="P:SilDev.Investment.ValueItem`1.MinValue"/> and
                <see cref="P:SilDev.Investment.ValueItem`1.MaxValue"/>. If the value is default, it also ensures that
                <see cref="P:SilDev.Investment.ValueItem`1.DefValue"/> is returned instead.
                <para>
                    Please note that this method is automatically used for the
                    <see cref="P:SilDev.Investment.ValueItem`1.Value"/> setter and overwriting can lead to an unexpected
                    result when setting values.
                </para>
            </summary>
            <param name="value">
                The value to validate.
            </param>
        </member>
        <member name="M:SilDev.Investment.ValueItem`1.ValidateSetValue(`0)">
            <summary>
                Ensures that the specified value is valid. If <see cref="P:SilDev.Investment.ValueItem`1.MinValue"/> and
                <see cref="P:SilDev.Investment.ValueItem`1.MaxValue"/> have been set and are valid, the specified value is
                calibrated if it is not between <see cref="P:SilDev.Investment.ValueItem`1.MinValue"/> and
                <see cref="P:SilDev.Investment.ValueItem`1.MaxValue"/>. If the value is default, it also ensures that
                <see cref="P:SilDev.Investment.ValueItem`1.DefValue"/> is returned instead.
                <para>
                    Please note that this method is automatically used for the
                    <see cref="P:SilDev.Investment.ValueItem`1.Value"/> setter and overwriting can lead to an unexpected
                    result when setting values.
                </para>
            </summary>
            <param name="value">
                The value to validate.
            </param>
        </member>
        <member name="M:SilDev.Investment.ValueItem`1.op_Equality(SilDev.Investment.ValueItem{`0},SilDev.Investment.ValueItem{`0})">
            <summary>
                Determines whether two specified <see cref="T:SilDev.Investment.ValueItem`1"/> instances
                have same values.
            </summary>
            <param name="left">
                The first <see cref="T:SilDev.Investment.ValueItem`1"/> instance to compare.
            </param>
            <param name="right">
                The second <see cref="T:SilDev.Investment.ValueItem`1"/> instance to compare.
            </param>
        </member>
        <member name="M:SilDev.Investment.ValueItem`1.op_Inequality(SilDev.Investment.ValueItem{`0},SilDev.Investment.ValueItem{`0})">
            <summary>
                Determines whether two specified <see cref="T:SilDev.Investment.ValueItem`1"/> instances
                have different values.
            </summary>
            <param name="left">
                The first <see cref="T:SilDev.Investment.ValueItem`1"/> instance to compare.
            </param>
            <param name="right">
                The second <see cref="T:SilDev.Investment.ValueItem`1"/> instance to compare.
            </param>
        </member>
        <member name="T:SilDev.Investment.CounterInvestor`1">
            <summary>
                A base class that provides numerical values that are used as counters.
            </summary>
            <typeparam name="TCounter">
                The type of the counters.
            </typeparam>
        </member>
        <member name="M:SilDev.Investment.CounterInvestor`1.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Investment.CounterInvestor`1"/>
                class.
                <para>
                    Allowed types: <see cref="T:System.Char"/>, <see cref="T:System.SByte"/>,
                    <see cref="T:System.Byte"/>, <see cref="T:System.Int16"/>, <see cref="T:System.UInt16"/>,
                    <see cref="T:System.Int32"/>, <see cref="T:System.UInt32"/>, <see cref="T:System.Int64"/>,
                    <see cref="T:System.UInt64"/>, and <see cref="T:System.Decimal"/>.
                </para>
            </summary>
            <exception cref="T:System.NotSupportedException">
                The generic type is not char, sbyte, byte, short, ushort, int, uint, long,
                ulong, or decimal.
            </exception>
        </member>
        <member name="M:SilDev.Investment.CounterInvestor`1.Increase(System.Int32)">
            <summary>
                Increases the value of the counter associated with the specified index.
            </summary>
            <param name="index">
                The index of the counter.
            </param>
        </member>
        <member name="M:SilDev.Investment.CounterInvestor`1.Reset(System.Int32)">
            <summary>
                Resets the value of the counter associated with the specified index.
            </summary>
            <param name="index">
                The index of the counter.
            </param>
        </member>
        <member name="M:SilDev.Investment.CounterInvestor`1.GetValue(System.Int32)">
            <summary>
                Gets the value of the counter associated with the specified index.
            </summary>
            <param name="index">
                The index of the counter.
            </param>
        </member>
        <member name="T:SilDev.Investment.RandomInvestor">
            <summary>
                A base class that provides multiple <see cref="T:System.Random"/> instances.
            </summary>
        </member>
        <member name="M:SilDev.Investment.RandomInvestor.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Investment.RandomInvestor"/> class.
            </summary>
        </member>
        <member name="M:SilDev.Investment.RandomInvestor.GetGenerator(System.Int32)">
            <summary>
                Gets the <see cref="T:System.Random"/> instance associated with the specified seed.
            </summary>
            <param name="seed">
                A number used to calculate a starting value for the pseudo-random number
                sequence.
            </param>
        </member>
        <member name="T:SilDev.CultureConfig">
            <summary>
                Provides information about a specific culture (called a locale for
                unmanaged code development) that is used in all related library functions.
            </summary>
        </member>
        <member name="P:SilDev.CultureConfig.GlobalCultureInfo">
            <summary>
                Gets or sets the default <see cref="T:System.Globalization.CultureInfo"/> object value.
                <para>
                    Default: <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>
                </para>
            </summary>
        </member>
        <member name="P:SilDev.CultureConfig.GlobalStringComparison">
            <summary>
                Gets or sets the default <see cref="T:System.StringComparison"/> value. (Please note
                that the "Ignore case" statement will be removed.)
                <para>
                    Default: <see cref="F:System.StringComparison.Ordinal"/>
                </para>
            </summary>
        </member>
        <member name="P:SilDev.CultureConfig.GlobalStringComparisonIgnoreCase">
            <summary>
                Gets or sets the default <see cref="T:System.StringComparison"/> value. (Please note
                that the "ignore case" statement is always used.)
                <para>
                    Default: <see cref="F:System.StringComparison.OrdinalIgnoreCase"/>
                </para>
            </summary>
        </member>
        <member name="T:SilDev.Media.IrrKlangPlayer">
            <summary>
                Provides basic functionality of the IrrKlang library.
                <para>
                    &#9888; Please note that this class requires the latest binaries of the
                    IrrKlang library.
                </para>
                <para>
                    &#127968; Visit: <see href="https://www.ambiera.com/irrklang/"/>
                </para>
            </summary>
        </member>
        <member name="M:SilDev.Media.IrrKlangPlayer.Play(System.IO.Stream,System.Boolean,System.Int32)">
            <summary>
                Plays the sound data from the specified stream.
            </summary>
            <param name="stream">
                The sound data to play.
            </param>
            <param name="loop">
                <see langword="true"/> to repeat the sound track; otherwise,
                <see langword="false"/>.
            </param>
            <param name="volume">
                The sound volume value, in percent.
            </param>
        </member>
        <member name="M:SilDev.Media.IrrKlangPlayer.Play(System.IO.Stream,System.Int32)">
            <summary>
                Plays the sound data from the specified stream.
            </summary>
            <param name="stream">
                The sound data to play.
            </param>
            <param name="volume">
                The sound volume value, in percent.
            </param>
        </member>
        <member name="M:SilDev.Media.IrrKlangPlayer.Play(System.Byte[],System.Boolean,System.Int32)">
            <summary>
                Plays the sound data from the specified sequence of bytes.
            </summary>
            <param name="bytes">
                The sound data to play.
            </param>
            <param name="loop">
                <see langword="true"/> to repeat the sound track; otherwise,
                <see langword="false"/>.
            </param>
            <param name="volume">
                The sound volume value, in percent.
            </param>
        </member>
        <member name="M:SilDev.Media.IrrKlangPlayer.Play(System.Byte[],System.Int32)">
            <summary>
                Plays the sound data from the specified sequence of bytes.
            </summary>
            <param name="bytes">
                The sound data to play.
            </param>
            <param name="volume">
                The sound volume value, in percent.
            </param>
        </member>
        <member name="M:SilDev.Media.IrrKlangPlayer.Play(System.String,System.Boolean,System.Int32)">
            <summary>
                Plays the specified sound file.
            </summary>
            <param name="path">
                The file to play.
            </param>
            <param name="loop">
                <see langword="true"/> to repeat the sound track; otherwise,
                <see langword="false"/>.
            </param>
            <param name="volume">
                The sound volume value, in percent.
            </param>
        </member>
        <member name="M:SilDev.Media.IrrKlangPlayer.Play(System.String,System.Int32)">
            <summary>
                Plays the specified sound file.
            </summary>
            <param name="path">
                The file to play.
            </param>
            <param name="volume">
                The sound volume value, in percent.
            </param>
        </member>
        <member name="M:SilDev.Media.IrrKlangPlayer.Stop">
            <summary>
                Stops playing sounds.
            </summary>
        </member>
        <member name="T:SilDev.Media.MediaDeviceManager">
            <summary>
                Provides functionality to control the volume of applications.
            </summary>
        </member>
        <member name="M:SilDev.Media.MediaDeviceManager.GetApplicationVolume(System.String)">
            <summary>
                Retrieves the volume of the specified application.
            </summary>
            <param name="name">
                The name of the application.
            </param>
        </member>
        <member name="M:SilDev.Media.MediaDeviceManager.GetApplicationMute(System.String)">
            <summary>
                Determines whether the specified application is muted.
            </summary>
            <param name="name">
                The name of the application.
            </param>
        </member>
        <member name="M:SilDev.Media.MediaDeviceManager.SetApplicationVolume(System.String,System.Single)">
            <summary>
                Sets the volume of the specified application.
            </summary>
            <param name="name">
                The name of the application to change.
            </param>
            <param name="level">
                The volume level to set.
            </param>
        </member>
        <member name="M:SilDev.Media.MediaDeviceManager.SetApplicationMute(System.String,System.Boolean)">
            <summary>
                Mutes the volume of the specified application.
            </summary>
            <param name="name">
                The name of the application to change.
            </param>
            <param name="mute">
                <see langword="true"/> to mute; otherwise, <see langword="false"/> to
                unmute.
            </param>
        </member>
        <member name="T:SilDev.Media.WindowsPlayer">
            <summary>
                Provides basic functionality of the Windows library to play audio files.
            </summary>
        </member>
        <member name="M:SilDev.Media.WindowsPlayer.TimeBeginPeriod(System.UInt32)">
            <summary>
                Requests a minimum resolution for periodic timers.
            </summary>
            <param name="uPeriod">
                Minimum timer resolution, in milliseconds, for the application or device
                driver. A lower value specifies a higher (more accurate) resolution.
            </param>
        </member>
        <member name="M:SilDev.Media.WindowsPlayer.TimeEndPeriod(System.UInt32)">
            <summary>
                Clears a previously set minimum timer resolution.
            </summary>
            <param name="uPeriod">
                Minimum timer resolution specified in the previous call to the
                <see cref="M:SilDev.Media.WindowsPlayer.TimeBeginPeriod(System.UInt32)"/> function.
            </param>
        </member>
        <member name="M:SilDev.Media.WindowsPlayer.GetSoundVolume">
            <summary>
                Retrieves the sound volume of the current application.
            </summary>
            <exception cref="T:System.ComponentModel.Win32Exception">
            </exception>
        </member>
        <member name="M:SilDev.Media.WindowsPlayer.SetSoundVolume(System.Int32)">
            <summary>
                Sets the specified sound volume of the current application.
            </summary>
            <param name="value">
                The sound volume value, in percent.
            </param>
            <exception cref="T:System.ComponentModel.Win32Exception">
            </exception>
        </member>
        <member name="M:SilDev.Media.WindowsPlayer.Play(System.String,System.Boolean,System.Int32)">
            <summary>
                Plays the specified sound file.
            </summary>
            <param name="path">
                THe full path of the sound file to play.
            </param>
            <param name="loop">
                <see langword="true"/> to loop the sound; otherwise,
                <see langword="false"/>.
            </param>
            <param name="volume">
                The sound volume value, in percent.
            </param>
        </member>
        <member name="M:SilDev.Media.WindowsPlayer.Play(System.String,System.Int32)">
            <summary>
                Plays the specified sound file.
            </summary>
            <param name="path">
                THe full path of the sound file to play.
            </param>
            <param name="volume">
                The sound volume value, in percent.
            </param>
        </member>
        <member name="M:SilDev.Media.WindowsPlayer.Stop">
            <summary>
                Stops playing sounds.
            </summary>
        </member>
        <member name="T:SilDev.Media.BasicPlayer">
            <summary>
                Provides functionality for playing WAV files and controlling the volume of
                applications.
            </summary>
        </member>
        <member name="M:SilDev.Media.BasicPlayer.PlayWave(System.String)">
            <summary>
                Plays audio data from the specified path.
            </summary>
            <param name="path">
                The sound data to play.
            </param>
        </member>
        <member name="M:SilDev.Media.BasicPlayer.PlayWave(System.IO.Stream)">
            <summary>
                Plays audio data from the specified stream.
            </summary>
            <param name="stream">
                The sound data to play.
            </param>
        </member>
        <member name="M:SilDev.Media.BasicPlayer.PlayWaveAsync(System.String)">
            <summary>
                Plays audio data from the specified path.
            </summary>
            <param name="path">
                The sound data to play.
            </param>
        </member>
        <member name="M:SilDev.Media.BasicPlayer.PlayWaveAsync(System.IO.Stream)">
            <summary>
                Plays audio data from the specified stream. This method does not block the
                calling thread.
            </summary>
            <param name="stream">
                The sound data to play.
            </param>
        </member>
        <member name="T:SilDev.ProcessPrincipal">
            <summary>
                Provides the functionality to handle the current principal name.
            </summary>
        </member>
        <member name="P:SilDev.ProcessPrincipal.Name">
            <summary>
                Gets the original name of the current principal.
                <para>
                    This variable is only set if <see cref="M:SilDev.ProcessPrincipal.GetOriginalName"/> was
                    previously called.
                </para>
            </summary>
        </member>
        <member name="M:SilDev.ProcessPrincipal.GetOriginalName">
            <summary>
                Retrieves the original name of the current principal.
            </summary>
        </member>
        <member name="M:SilDev.ProcessPrincipal.ChangeName(System.String)">
            <summary>
                Changes the name of the current principal.
            </summary>
            <param name="newName">
                The new name for the current principal, which cannot be longer than the
                original one.
            </param>
        </member>
        <member name="M:SilDev.ProcessPrincipal.RestoreName">
            <summary>
                Restores the name of the current principal.
            </summary>
        </member>
        <member name="T:SilDev.QuickWmi.Win32_OperatingSystem">
            <summary>
                Provides quick access to <see cref="T:SilDev.QuickWmi.Win32_OperatingSystem"/> WMI class
                properties.
            </summary>
            ReSharper disable CommentTypo InconsistentNaming
        </member>
        <member name="P:SilDev.QuickWmi.Win32_OperatingSystem.BootDevice">
            <summary>
                Gets the name of the disk drive from which the Windows operating system
                starts.
                <para>
                    Example: "\\Device\Harddisk0"
                </para>
            </summary>
        </member>
        <member name="P:SilDev.QuickWmi.Win32_OperatingSystem.BuildNumber">
            <summary>
                Gets the build number of an operating system. It can be used for more
                precise version information than product release version numbers.
                <para>
                    Example: "1381".
                </para>
            </summary>
        </member>
        <member name="P:SilDev.QuickWmi.Win32_OperatingSystem.BuildType">
            <summary>
                Gets the type of build used for an operating system.
                <para>
                    Examples: "retail build", "checked build"
                </para>
            </summary>
        </member>
        <member name="P:SilDev.QuickWmi.Win32_OperatingSystem.Caption">
            <summary>
                Gets the operating system version.
                <para>
                    Example: "Microsoft Windows 7 Enterprise"
                </para>
            </summary>
        </member>
        <member name="P:SilDev.QuickWmi.Win32_OperatingSystem.CodeSet">
            <summary>
                Gets the code page value an operating system uses. A code page contains a
                character table that an operating system uses to translate strings for
                different languages. The American National Standards Institute (ANSI) lists
                values that represent defined code pages. If an operating system does not
                use an ANSI code page, this member is set to 0 (zero). The CodeSet string
                can use a maximum of six characters to define the code page value.
            </summary>
        </member>
        <member name="P:SilDev.QuickWmi.Win32_OperatingSystem.CountryCode">
            <summary>
                Gets the code for the country/region that an operating system uses. Values
                are based on international phone dialing prefixes-also referred to as IBM
                country/region codes. This property can use a maximum of six characters to
                define the country/region code value.
                <para>
                    Example: "1" (United States)
                </para>
            </summary>
        </member>
        <member name="P:SilDev.QuickWmi.Win32_OperatingSystem.CreationClassName">
            <summary>
                Gets the name of the first concrete class that appears in the inheritance
                chain used in the creation of an instance. When used with other key
                properties of the class, this property allows all instances of this class
                and its subclasses to be identified uniquely.
            </summary>
        </member>
        <member name="P:SilDev.QuickWmi.Win32_OperatingSystem.CSCreationClassName">
            <summary>
                Gets the creation class name of the scoping computer system.
            </summary>
        </member>
        <member name="P:SilDev.QuickWmi.Win32_OperatingSystem.CSDVersion">
            <summary>
                Gets a <see langword="null"/>-terminated string that indicates the latest
                service pack installed on a computer. If no service pack is installed, the
                string is <see langword="null"/>.
            </summary>
        </member>
        <member name="P:SilDev.QuickWmi.Win32_OperatingSystem.CSName">
            <summary>
                Gets the name of the scoping computer system.
            </summary>
        </member>
        <member name="P:SilDev.QuickWmi.Win32_OperatingSystem.CurrentTimeZone">
            <summary>
                Gets the number, in minutes, an operating system is offset from Greenwich
                mean time (GMT). The number is positive, negative, or zero.
            </summary>
        </member>
        <member name="P:SilDev.QuickWmi.Win32_OperatingSystem.DataExecutionPrevention_32BitApplications">
            <summary>
                Gets the Data Execution Prevention. When the Data Execution Prevention
                hardware feature is available, this property indicates that the feature is
                set to work for 32-bit applications if <see langword="true"/>. On 64-bit
                computers, the Data Execution Prevention feature is configured in the Boot
                Configuration Data (BCD) store and the properties in
                <see cref="T:SilDev.QuickWmi.Win32_OperatingSystem"/> are set accordingly.
            </summary>
        </member>
        <member name="P:SilDev.QuickWmi.Win32_OperatingSystem.DataExecutionPrevention_Available">
            <summary>
                Gets the Data Execution Prevention that is a hardware feature to prevent
                buffer overrun attacks by stopping the execution of code on data-type
                memory pages. If <see langword="true"/>, then this feature is available. On
                64-bit computers, the Data Execution Prevention feature is configured in
                the BCD store and the properties in <see cref="T:SilDev.QuickWmi.Win32_OperatingSystem"/> are
                set accordingly.
            </summary>
        </member>
        <member name="P:SilDev.QuickWmi.Win32_OperatingSystem.DataExecutionPrevention_Drivers">
            <summary>
                Gets the Data Execution Prevention. When the Data Execution Prevention
                hardware feature is available, this property indicates that the feature is
                set to work for drivers if <see langword="true"/>. On 64-bit computers, the
                Data Execution Prevention feature is configured in the BCD store and the
                properties in <see cref="T:SilDev.QuickWmi.Win32_OperatingSystem"/> are set accordingly.
            </summary>
        </member>
        <member name="P:SilDev.QuickWmi.Win32_OperatingSystem.DataExecutionPrevention_SupportPolicy">
            <summary>
                Gets the value indicating which Data Execution Prevention (DEP) setting is
                applied. The DEP setting specifies the extent to which DEP applies to
                32-bit applications on the system. DEP is always applied to the Windows
                kernel.
                <para>
                    Always Off (0): DEP is turned off for all 32-bit applications on the
                    computer with no exceptions. This setting is not available for the user
                    interface.
                </para>
                <para>
                    Always On (1): DEP is enabled for all 32-bit applications on the
                    computer. This setting is not available for the user interface.
                </para>
                <para>
                    Opt In (2): DEP is enabled for a limited number of binaries, the
                    kernel, and all Windows-based services. However, it is off by default
                    for all 32-bit applications. A user or administrator must explicitly
                    choose either the Always On or the Opt Out setting before DEP can be
                    applied to 32-bit applications.
                </para>
                <para>
                    Opt Out (3): DEP is enabled by default for all 32-bit applications. A
                    user or administrator can explicitly remove support for a 32-bit
                    application by adding the application to an exceptions list.
                </para>
            </summary>
        </member>
        <member name="P:SilDev.QuickWmi.Win32_OperatingSystem.Debug">
            <summary>
                Gets the value indicating that the operating system is a checked (debug)
                build. If <see langword="true"/>, the debugging version is installed.
                Checked builds provide error checking, argument verification, and system
                debugging code. Additional code in a checked binary generates a kernel
                debugger error message and breaks into the debugger. This helps immediately
                determine the cause and location of the error. Performance may be affected
                in a checked build due to the additional code that is executed.
            </summary>
        </member>
        <member name="P:SilDev.QuickWmi.Win32_OperatingSystem.Description">
            <summary>
                Gets the description of the Windows operating system. Some user interfaces
                for example, those that allow editing of this description, limit its length
                to 48 characters.
            </summary>
        </member>
        <member name="P:SilDev.QuickWmi.Win32_OperatingSystem.Distributed">
            <summary>
                Gets the value that specifies if the operating system is distributed across
                several computer system nodes. If so, these nodes should be grouped as a
                cluster.
            </summary>
        </member>
        <member name="P:SilDev.QuickWmi.Win32_OperatingSystem.EncryptionLevel">
            <summary>
                Gets the encryption level for secure transactions: 40-bit, 128-bit, or
                n-bit.
            </summary>
        </member>
        <member name="P:SilDev.QuickWmi.Win32_OperatingSystem.ForegroundApplicationBoost">
            <summary>
                Gets the value that increases in priority is given to the foreground
                application. Application boost is implemented by giving an application more
                execution time slices (quantum lengths).
            </summary>
        </member>
        <member name="P:SilDev.QuickWmi.Win32_OperatingSystem.FreePhysicalMemory">
            <summary>
                Gets the number, in kilobytes, of physical memory currently unused and
                available.
            </summary>
        </member>
        <member name="P:SilDev.QuickWmi.Win32_OperatingSystem.FreeSpaceInPagingFiles">
            <summary>
                Gets the number, in kilobytes, that can be mapped into the operating system
                paging files without causing any other pages to be swapped out.
            </summary>
        </member>
        <member name="P:SilDev.QuickWmi.Win32_OperatingSystem.FreeVirtualMemory">
            <summary>
                Gets the number, in kilobytes, of virtual memory currently unused and
                available.
            </summary>
        </member>
        <member name="P:SilDev.QuickWmi.Win32_OperatingSystem.InstallDate">
            <summary>
                Gets the install date of the operating system.
            </summary>
        </member>
        <member name="P:SilDev.QuickWmi.Win32_OperatingSystem.LargeSystemCache">
            <summary>
                Gets the operating system cache optimize option.
                <para>
                    0: Optimize memory for applications.
                </para>
                <para>
                    1: Optimize memory for system performance.
                </para>
            </summary>
        </member>
        <member name="P:SilDev.QuickWmi.Win32_OperatingSystem.LastBootUpTime">
            <summary>
                Gets the date and time the operating system was last restarted.
            </summary>
        </member>
        <member name="P:SilDev.QuickWmi.Win32_OperatingSystem.LocalDateTime">
            <summary>
                Gets the operating system version of the local date and time-of-day.
            </summary>
        </member>
        <member name="P:SilDev.QuickWmi.Win32_OperatingSystem.Locale">
            <summary>
                Gets the language identifier used by the operating system. A language
                identifier is a standard international numeric abbreviation for a
                country/region. Each language has a unique language identifier (LANGID), a
                16-bit value that consists of a primary language identifier and a secondary
                language identifier.
            </summary>
        </member>
        <member name="P:SilDev.QuickWmi.Win32_OperatingSystem.Manufacturer">
            <summary>
                Gets the name of the operating system manufacturer. For Windows-based
                systems, this value is "Microsoft Corporation".
            </summary>
        </member>
        <member name="P:SilDev.QuickWmi.Win32_OperatingSystem.MaxNumberOfProcesses">
            <summary>
                Gets the maximum number of process contexts the operating system can
                support. The default value set by the provider is 4294967295 (0xFFFFFFFF).
                If there is no fixed maximum, the value should be 0 (zero). On systems that
                have a fixed maximum, this object can help diagnose failures that occur
                when the maximum is reached-if unknown, enter 4294967295 (0xFFFFFFFF).
            </summary>
        </member>
        <member name="P:SilDev.QuickWmi.Win32_OperatingSystem.MaxProcessMemorySize">
            <summary>
                Gets the maximum number, in kilobytes, of memory that can be allocated to a
                process. For operating systems with no virtual memory, typically this value
                is equal to the total amount of physical memory minus the memory used by
                the BIOS and the operating system. For some operating systems, this value
                may be infinity, in which case 0 (zero) should be entered. In other cases,
                this value could be a constant, for example, 2G or 4G.
            </summary>
        </member>
        <member name="P:SilDev.QuickWmi.Win32_OperatingSystem.MUILanguages">
            <summary>
                Gets the Multilingual User Interface Pack (MUI Pack) languages installed on
                the computer. For example, "en-us". MUI Pack languages are resource files
                that can be installed on the English version of the operating system. When
                an MUI Pack is installed, you can can change the user interface language to
                one of 33 supported languages.
            </summary>
        </member>
        <member name="P:SilDev.QuickWmi.Win32_OperatingSystem.Name">
            <summary>
                Gets the name of the operating system instance within a computer system.
            </summary>
        </member>
        <member name="P:SilDev.QuickWmi.Win32_OperatingSystem.NumberOfLicensedUsers">
            <summary>
                Gets the number of user licenses for the operating system. If unlimited,
                enter 0 (zero). If unknown, enter -1.
            </summary>
        </member>
        <member name="P:SilDev.QuickWmi.Win32_OperatingSystem.NumberOfProcesses">
            <summary>
                Gets the number of process contexts currently loaded or running on the
                operating system.
            </summary>
        </member>
        <member name="P:SilDev.QuickWmi.Win32_OperatingSystem.NumberOfUsers">
            <summary>
                Gets the number of user sessions for which the operating system is storing
                state information currently.
            </summary>
        </member>
        <member name="P:SilDev.QuickWmi.Win32_OperatingSystem.OperatingSystemSKU">
            <summary>
                Gets the Stock Keeping Unit (SKU) number for the operating system.
            </summary>
        </member>
        <member name="P:SilDev.QuickWmi.Win32_OperatingSystem.Organization">
            <summary>
                Gets the company name for the registered user of the operating system.
            </summary>
        </member>
        <member name="P:SilDev.QuickWmi.Win32_OperatingSystem.OSArchitecture">
            <summary>
                Gets the architecture of the operating system, as opposed to the processor.
                This property can be localized.
            </summary>
        </member>
        <member name="P:SilDev.QuickWmi.Win32_OperatingSystem.OSLanguage">
            <summary>
                Gets the language version of the operating system installed. The following
                list lists the possible values. Example: 0x0807 (German, Switzerland).
            </summary>
        </member>
        <member name="P:SilDev.QuickWmi.Win32_OperatingSystem.OSProductSuite">
            <summary>
                Gets the installed and licensed system product additions to the operating
                system. For example, the value of 146 (0x92) for OSProductSuite indicates
                Enterprise, Terminal Services, and Data Center (bits one, four, and seven
                set). The following list lists possible values.
            </summary>
        </member>
        <member name="P:SilDev.QuickWmi.Win32_OperatingSystem.OSType">
            <summary>
                Gets the type of operating system.
            </summary>
        </member>
        <member name="P:SilDev.QuickWmi.Win32_OperatingSystem.OtherTypeDescription">
            <summary>
                Gets the additional description for the current operating system version.
            </summary>
        </member>
        <member name="P:SilDev.QuickWmi.Win32_OperatingSystem.PAEEnabled">
            <summary>
                Gets the value that specifies whether the physical address extensions (PAE)
                are enabled by the operating system running on Intel processors. PAE allows
                applications to address more than 4 GB of physical memory. When PAE is
                enabled, the operating system uses three-level linear address translation
                rather than two-level. Providing more physical memory to an application
                reduces the need to swap memory to the page file and increases performance.
            </summary>
        </member>
        <member name="P:SilDev.QuickWmi.Win32_OperatingSystem.PortableOperatingSystem">
            <summary>
                Gets the value that specifies whether the operating system booted from an
                external USB device. If <see langword="true"/>, the operating system has
                detected it is booting on a supported locally connected storage device.
            </summary>
        </member>
        <member name="P:SilDev.QuickWmi.Win32_OperatingSystem.Primary">
            <summary>
                Gets the value that specifies whether this is the primary operating system.
            </summary>
        </member>
        <member name="P:SilDev.QuickWmi.Win32_OperatingSystem.ProductType">
            <summary>
                Gets additional system information.
            </summary>
        </member>
        <member name="P:SilDev.QuickWmi.Win32_OperatingSystem.RegisteredUser">
            <summary>
                Gets the name of the registered user of the operating system.
                <para>
                    Example: "Ben Smith"
                </para>
            </summary>
        </member>
        <member name="P:SilDev.QuickWmi.Win32_OperatingSystem.SerialNumber">
            <summary>
                Gets the operating system product serial identification number.
                <para>
                    Example: "10497-OEM-0031416-71674"
                </para>
            </summary>
        </member>
        <member name="P:SilDev.QuickWmi.Win32_OperatingSystem.ServicePackMajorVersion">
            <summary>
                Gets the major version number of the service pack installed on the computer
                system. If no service pack has been installed, the value is 0 (zero).
            </summary>
        </member>
        <member name="P:SilDev.QuickWmi.Win32_OperatingSystem.ServicePackMinorVersion">
            <summary>
                Gets the minor version number of the service pack installed on the computer
                system. If no service pack has been installed, the value is 0 (zero).
            </summary>
        </member>
        <member name="P:SilDev.QuickWmi.Win32_OperatingSystem.SizeStoredInPagingFiles">
            <summary>
                Gets the total number of kilobytes that can be stored in the operating
                system paging files-0 (zero) indicates that there are no paging files. Be
                aware that this number does not represent the actual physical size of the
                paging file on disk.
            </summary>
        </member>
        <member name="P:SilDev.QuickWmi.Win32_OperatingSystem.Status">
            <summary>
                Gets the current status of the object. Various operational and
                nonoperational statuses can be defined. Operational statuses include: "OK",
                "Degraded", and "Pred Fail" (an element, such as a SMART-enabled hard disk
                drive may function properly, but predicts a failure in the near future).
                Nonoperational statuses include: "Error", "Starting", "Stopping", and
                "Service". The Service status applies to administrative work, such as
                mirror-resilvering of a disk, reload of a user permissions list, or other
                administrative work. Not all such work is online, but the managed element
                is neither "OK" nor in one of the other states.
            </summary>
        </member>
        <member name="P:SilDev.QuickWmi.Win32_OperatingSystem.SuiteMask">
            <summary>
                Gets the bit flags that identify the product suites available on the
                system.
            </summary>
        </member>
        <member name="P:SilDev.QuickWmi.Win32_OperatingSystem.SystemDevice">
            <summary>
                Gets the physical disk partition on which the operating system is
                installed.
            </summary>
        </member>
        <member name="P:SilDev.QuickWmi.Win32_OperatingSystem.SystemDirectory">
            <summary>
                Gets the system directory of the operating system.
                <para>
                    Example: "C:\WINDOWS\SYSTEM32"
                </para>
            </summary>
        </member>
        <member name="P:SilDev.QuickWmi.Win32_OperatingSystem.SystemDrive">
            <summary>
                Gets the letter of the disk drive on which the operating system resides.
                <para>
                    Example: "C:"
                </para>
            </summary>
        </member>
        <member name="P:SilDev.QuickWmi.Win32_OperatingSystem.TotalSwapSpaceSize">
            <summary>
                Gets the total swap space in kilobytes. This value may be NULL
                (unspecified) if the swap space is not distinguished from page files.
                However, some operating systems distinguish these concepts. For example, in
                UNIX, whole processes can be swapped out when the free page list falls and
                remains below a specified amount.
            </summary>
        </member>
        <member name="P:SilDev.QuickWmi.Win32_OperatingSystem.TotalVirtualMemorySize">
            <summary>
                Gets the number, in kilobytes, of virtual memory. For example, this may be
                calculated by adding the amount of total RAM to the amount of paging space,
                that is, adding the amount of memory in or aggregated by the computer
                system to the property, <see cref="P:SilDev.QuickWmi.Win32_OperatingSystem.SizeStoredInPagingFiles"/>.
            </summary>
        </member>
        <member name="P:SilDev.QuickWmi.Win32_OperatingSystem.TotalVisibleMemorySize">
            <summary>
                Gets the total amount, in kilobytes, of physical memory available to the
                operating system. This value does not necessarily indicate the
                <see langword="true"/> amount of physical memory, but what is reported to
                the operating system as available to it.
            </summary>
        </member>
        <member name="P:SilDev.QuickWmi.Win32_OperatingSystem.Version">
            <summary>
                Gets the version number of the operating system.
            </summary>
        </member>
        <member name="P:SilDev.QuickWmi.Win32_OperatingSystem.WindowsDirectory">
            <summary>
                Gets the Windows directory of the operating system.
                <para>
                    Example: "C:\WINDOWS"
                </para>
            </summary>
        </member>
        <member name="T:SilDev.Comparison">
            <summary>
                Provides static methods and base classes used for the comparison of two or
                more objects.
            </summary>
        </member>
        <member name="M:SilDev.Comparison.IsNotEmpty(System.Object)">
            <summary>
                Determines whether the specified object is not empty.
            </summary>
            <param name="value">
                The object to check.
            </param>
        </member>
        <member name="M:SilDev.Comparison.IsNullable``1(``0)">
            <summary>
                Determines whether the specified value is nullable.
            </summary>
            <param name="value">
                The value to check.
            </param>
        </member>
        <member name="M:SilDev.Comparison.IsBetween``1(``0,``0,``0)">
            <summary>
                Determines whether the value of this object instance is between two
                specified values.
            </summary>
            <typeparam name="TSource">
                The type of the source.
            </typeparam>
            <param name="source">
                The value to compare.
            </param>
            <param name="start">
                The start index value.
            </param>
            <param name="end">
                The end index value.
            </param>
        </member>
        <member name="M:SilDev.Comparison.ContainsEx(System.String,System.StringComparison,System.String)">
            <summary>
                Determines whether the specified strings occurs within this string. A
                parameter specifies the culture, case, and sort rules used in the
                comparison.
            </summary>
            <param name="source">
                The string to browse.
            </param>
            <param name="comparisonType">
                One of the enumeration values that specifies the rules for the search.
            </param>
            <param name="target0">
                The string to seek.
            </param>
        </member>
        <member name="M:SilDev.Comparison.ContainsEx(System.String,System.StringComparison,System.String,System.String)">
            <summary>
                Determines whether one of the specified strings occurs within this string.
                A parameter specifies the culture, case, and sort rules used in the
                comparison.
            </summary>
            <param name="source">
                The string to browse.
            </param>
            <param name="comparisonType">
                One of the enumeration values that specifies the rules for the search.
            </param>
            <param name="target0">
                The first string to seek.
            </param>
            <param name="target1">
                The second string to seek.
            </param>
        </member>
        <member name="M:SilDev.Comparison.ContainsEx(System.String,System.StringComparison,System.String,System.String,System.String)">
            <summary>
                Determines whether one of the specified strings occurs within this string.
                A parameter specifies the culture, case, and sort rules used in the
                comparison.
            </summary>
            <param name="source">
                The string to browse.
            </param>
            <param name="comparisonType">
                One of the enumeration values that specifies the rules for the search.
            </param>
            <param name="target0">
                The first string to seek.
            </param>
            <param name="target1">
                The second string to seek.
            </param>
            <param name="target2">
                The second string to seek.
            </param>
        </member>
        <member name="M:SilDev.Comparison.ContainsEx(System.String,System.StringComparison,System.String[])">
            <summary>
                Determines whether one of the specified strings occurs within this string.
                A parameter specifies the culture, case, and sort rules used in the
                comparison.
            </summary>
            <param name="source">
                The string to browse.
            </param>
            <param name="comparisonType">
                One of the enumeration values that specifies the rules for the search.
            </param>
            <param name="targets">
                The sequence of strings to seek.
            </param>
        </member>
        <member name="M:SilDev.Comparison.ContainsEx(System.String,System.String)">
            <summary>
                Determines whether the specified string occurs within this string. The
                <see cref="F:System.StringComparison.OrdinalIgnoreCase"/> parameter is used for this
                comparison.
            </summary>
            <param name="source">
                The string to browse.
            </param>
            <param name="target0">
                The first string to seek.
            </param>
        </member>
        <member name="M:SilDev.Comparison.ContainsEx(System.String,System.String,System.String)">
            <summary>
                Determines whether one of the specified strings occurs within this string.
                The <see cref="F:System.StringComparison.OrdinalIgnoreCase"/> parameter is used for
                this comparison.
            </summary>
            <param name="source">
                The string to browse.
            </param>
            <param name="target0">
                The first string to seek.
            </param>
            <param name="target1">
                The second string to seek.
            </param>
        </member>
        <member name="M:SilDev.Comparison.ContainsEx(System.String,System.String,System.String,System.String)">
            <summary>
                Determines whether one of the specified strings occurs within this string.
                The <see cref="F:System.StringComparison.OrdinalIgnoreCase"/> parameter is used for
                this comparison.
            </summary>
            <param name="source">
                The string to browse.
            </param>
            <param name="target0">
                The first string to seek.
            </param>
            <param name="target1">
                The second string to seek.
            </param>
            <param name="target2">
                The second string to seek.
            </param>
        </member>
        <member name="M:SilDev.Comparison.ContainsEx(System.String,System.String[])">
            <summary>
                Determines whether one of the specified strings occurs within this string.
                The <see cref="F:System.StringComparison.OrdinalIgnoreCase"/> parameter is used for
                this comparison.
            </summary>
            <param name="source">
                The string to browse.
            </param>
            <param name="targets">
                The sequence of strings to seek.
            </param>
        </member>
        <member name="M:SilDev.Comparison.ContainsEx(System.String,System.StringComparison,System.Char)">
            <summary>
                Determines whether the specified character occurs within this string. A
                parameter specifies the culture, case, and sort rules used in the
                comparison.
            </summary>
            <param name="source">
                The string to browse.
            </param>
            <param name="comparisonType">
                One of the enumeration values that specifies the rules for the search.
            </param>
            <param name="target0">
                The string to seek.
            </param>
        </member>
        <member name="M:SilDev.Comparison.ContainsEx(System.String,System.StringComparison,System.Char,System.Char)">
            <summary>
                Determines whether one of the specified characters occurs within this
                string. A parameter specifies the culture, case, and sort rules used in the
                comparison.
            </summary>
            <param name="source">
                The string to browse.
            </param>
            <param name="comparisonType">
                One of the enumeration values that specifies the rules for the search.
            </param>
            <param name="target0">
                The first string to seek.
            </param>
            <param name="target1">
                The second string to seek.
            </param>
        </member>
        <member name="M:SilDev.Comparison.ContainsEx(System.String,System.StringComparison,System.Char,System.Char,System.Char)">
            <summary>
                Determines whether one of the specified characters occurs within this
                string. A parameter specifies the culture, case, and sort rules used in the
                comparison.
            </summary>
            <param name="source">
                The string to browse.
            </param>
            <param name="comparisonType">
                One of the enumeration values that specifies the rules for the search.
            </param>
            <param name="target0">
                The first string to seek.
            </param>
            <param name="target1">
                The second string to seek.
            </param>
            <param name="target2">
                The second string to seek.
            </param>
        </member>
        <member name="M:SilDev.Comparison.ContainsEx(System.String,System.StringComparison,System.Char[])">
            <summary>
                Determines whether one of the specified characters occurs within this
                string. A parameter specifies the culture, case, and sort rules used in the
                comparison.
            </summary>
            <param name="source">
                The string to browse.
            </param>
            <param name="comparisonType">
                One of the enumeration values that specifies the rules for the search.
            </param>
            <param name="targets">
                The sequence of characters to seek.
            </param>
        </member>
        <member name="M:SilDev.Comparison.ContainsEx(System.String,System.Char)">
            <summary>
                Determines whether the specified character occurs within this string. The
                <see cref="F:System.StringComparison.OrdinalIgnoreCase"/> parameter is used for this
                comparison.
            </summary>
            <param name="source">
                The string to browse.
            </param>
            <param name="target0">
                The character to seek.
            </param>
        </member>
        <member name="M:SilDev.Comparison.ContainsEx(System.String,System.Char,System.Char)">
            <summary>
                Determines whether one of the specified characters occurs within this
                string. The <see cref="F:System.StringComparison.OrdinalIgnoreCase"/> parameter is
                used for this comparison.
            </summary>
            <param name="source">
                The string to browse.
            </param>
            <param name="target0">
                The first string to seek.
            </param>
            <param name="target1">
                The second string to seek.
            </param>
        </member>
        <member name="M:SilDev.Comparison.ContainsEx(System.String,System.Char,System.Char,System.Char)">
            <summary>
                Determines whether one of the specified characters occurs within this
                string. The <see cref="F:System.StringComparison.OrdinalIgnoreCase"/> parameter is
                used for this comparison.
            </summary>
            <param name="source">
                The string to browse.
            </param>
            <param name="target0">
                The first string to seek.
            </param>
            <param name="target1">
                The second string to seek.
            </param>
            <param name="target2">
                The second string to seek.
            </param>
        </member>
        <member name="M:SilDev.Comparison.ContainsEx(System.String,System.Char[])">
            <summary>
                Determines whether one of the specified characters occurs within this
                string. The <see cref="F:System.StringComparison.OrdinalIgnoreCase"/> parameter is
                used for this comparison.
            </summary>
            <param name="source">
                The string to browse.
            </param>
            <param name="targets">
                The sequence of characters to seek.
            </param>
        </member>
        <member name="M:SilDev.Comparison.ContainsItem``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
                Determines whether the specified element occurs within this sequence of
                elements.
            </summary>
            <typeparam name="TElement">
                The type of the element.
            </typeparam>
            <param name="source">
                The sequence to browse.
            </param>
            <param name="target0">
                The element to seek.
            </param>
        </member>
        <member name="M:SilDev.Comparison.ContainsItem``1(System.Collections.Generic.IEnumerable{``0},``0,``0)">
            <summary>
                Determines whether one of specified elements occurs within this sequence of
                elements.
            </summary>
            <typeparam name="TElement">
                The type of the element.
            </typeparam>
            <param name="source">
                The sequence to browse.
            </param>
            <param name="target0">
                The first element to seek.
            </param>
            <param name="target1">
                The second element to seek.
            </param>
        </member>
        <member name="M:SilDev.Comparison.ContainsItem``1(System.Collections.Generic.IEnumerable{``0},``0,``0,``0)">
            <summary>
                Determines whether one of specified elements occurs within this sequence of
                elements.
            </summary>
            <typeparam name="TElement">
                The type of the element.
            </typeparam>
            <param name="source">
                The sequence to browse.
            </param>
            <param name="target0">
                The first element to seek.
            </param>
            <param name="target1">
                The second element to seek.
            </param>
            <param name="target2">
                The third element to seek.
            </param>
        </member>
        <member name="M:SilDev.Comparison.ContainsItem``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
                Determines whether one of specified elements occurs within this sequence of
                elements.
            </summary>
            <typeparam name="TElement">
                The type of the element.
            </typeparam>
            <param name="source">
                The sequence to browse.
            </param>
            <param name="targets">
                The sequence of elements to seek.
            </param>
        </member>
        <member name="M:SilDev.Comparison.ContainsItem(System.Collections.Generic.IEnumerable{System.String},System.StringComparison,System.String)">
            <summary>
                Determines whether the specified element occurs within this sequence of
                elements.
            </summary>
            <param name="source">
                The sequence to browse.
            </param>
            <param name="comparisonType">
                One of the enumeration values that specifies the rules for the search.
            </param>
            <param name="target0">
                The string to seek.
            </param>
        </member>
        <member name="M:SilDev.Comparison.ContainsItem(System.Collections.Generic.IEnumerable{System.String},System.StringComparison,System.String,System.String)">
            <summary>
                Determines whether one of specified elements occurs within this sequence of
                elements.
            </summary>
            <param name="source">
                The sequence to browse.
            </param>
            <param name="comparisonType">
                One of the enumeration values that specifies the rules for the search.
            </param>
            <param name="target0">
                The first string to seek.
            </param>
            <param name="target1">
                The second string to seek.
            </param>
        </member>
        <member name="M:SilDev.Comparison.ContainsItem(System.Collections.Generic.IEnumerable{System.String},System.StringComparison,System.String,System.String,System.String)">
            <summary>
                Determines whether one of specified elements occurs within this sequence of
                elements.
            </summary>
            <param name="source">
                The sequence to browse.
            </param>
            <param name="comparisonType">
                One of the enumeration values that specifies the rules for the search.
            </param>
            <param name="target0">
                The first string to seek.
            </param>
            <param name="target1">
                The second string to seek.
            </param>
            <param name="target2">
                The third string to seek.
            </param>
        </member>
        <member name="M:SilDev.Comparison.ContainsItem(System.Collections.Generic.IEnumerable{System.String},System.StringComparison,System.String[])">
            <summary>
                Determines whether one of specified elements occurs within this sequence of
                elements.
            </summary>
            <param name="source">
                The sequence to browse.
            </param>
            <param name="comparisonType">
                One of the enumeration values that specifies the rules for the search.
            </param>
            <param name="targets">
                The sequence of strings to seek.
            </param>
        </member>
        <member name="M:SilDev.Comparison.ContainsItem(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
                Determines whether the specified string occurs within this sequence of
                strings. The <see cref="P:SilDev.CultureConfig.GlobalStringComparisonIgnoreCase"/>
                parameter is used for this comparison.
            </summary>
            <param name="source">
                The sequence to browse.
            </param>
            <param name="target0">
                The string to seek.
            </param>
        </member>
        <member name="M:SilDev.Comparison.ContainsItem(System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <summary>
                Determines whether one of the specified strings occurs within this sequence
                of strings. The
                <see cref="P:SilDev.CultureConfig.GlobalStringComparisonIgnoreCase"/> parameter is
                used for this comparison.
            </summary>
            <param name="source">
                The sequence to browse.
            </param>
            <param name="target0">
                The first string to seek.
            </param>
            <param name="target1">
                The second string to seek.
            </param>
        </member>
        <member name="M:SilDev.Comparison.ContainsItem(System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.String)">
            <summary>
                Determines whether one of the specified strings occurs within this sequence
                of strings. The
                <see cref="P:SilDev.CultureConfig.GlobalStringComparisonIgnoreCase"/> parameter is
                used for this comparison.
            </summary>
            <param name="source">
                The sequence to browse.
            </param>
            <param name="target0">
                The first string to seek.
            </param>
            <param name="target1">
                The second string to seek.
            </param>
            <param name="target2">
                The third string to seek.
            </param>
        </member>
        <member name="M:SilDev.Comparison.ContainsItem(System.Collections.Generic.IEnumerable{System.String},System.String[])">
            <summary>
                Determines whether one of specified strings occurs within this sequence of
                strings. The <see cref="P:SilDev.CultureConfig.GlobalStringComparisonIgnoreCase"/>
                parameter is used for this comparison.
            </summary>
            <param name="source">
                The sequence to browse.
            </param>
            <param name="targets">
                The sequence of strings to seek.
            </param>
        </member>
        <member name="M:SilDev.Comparison.StartsWithEx(System.String,System.StringComparison,System.String)">
            <summary>
                Determines whether the beginning of this string matches the specified
                string. A parameter specifies the culture, case, and sort rules used in the
                comparison.
            </summary>
            <param name="source">
                The string to check.
            </param>
            <param name="comparisonType">
                One of the enumeration values that specifies the rules for the search.
            </param>
            <param name="target0">
                The string to compare.
            </param>
        </member>
        <member name="M:SilDev.Comparison.StartsWithEx(System.String,System.StringComparison,System.String,System.String)">
            <summary>
                Determines whether the beginning of this string matches one of the
                specified strings. A parameter specifies the culture, case, and sort rules
                used in the comparison.
            </summary>
            <param name="source">
                The string to check.
            </param>
            <param name="comparisonType">
                One of the enumeration values that specifies the rules for the search.
            </param>
            <param name="target0">
                The first string to compare.
            </param>
            <param name="target1">
                The second string to compare.
            </param>
        </member>
        <member name="M:SilDev.Comparison.StartsWithEx(System.String,System.StringComparison,System.String,System.String,System.String)">
            <summary>
                Determines whether the beginning of this string matches one of the
                specified strings. A parameter specifies the culture, case, and sort rules
                used in the comparison.
            </summary>
            <param name="source">
                The string to check.
            </param>
            <param name="comparisonType">
                One of the enumeration values that specifies the rules for the search.
            </param>
            <param name="target0">
                The first string to compare.
            </param>
            <param name="target1">
                The second string to compare.
            </param>
            <param name="target2">
                The third string to compare.
            </param>
        </member>
        <member name="M:SilDev.Comparison.StartsWithEx(System.String,System.StringComparison,System.String[])">
            <summary>
                Determines whether the beginning of this string matches one of the
                specified strings. A parameter specifies the culture, case, and sort rules
                used in the comparison.
            </summary>
            <param name="source">
                The string to check.
            </param>
            <param name="comparisonType">
                One of the enumeration values that specifies the rules for the search.
            </param>
            <param name="targets">
                The sequence of strings to compare.
            </param>
        </member>
        <member name="M:SilDev.Comparison.StartsWithEx(System.String,System.String)">
            <summary>
                Determines whether the beginning of this string matches the specified
                string. The <see cref="F:System.StringComparison.OrdinalIgnoreCase"/> parameter is
                used for this comparison.
            </summary>
            <param name="source">
                The string to check.
            </param>
            <param name="target0">
                The string to compare.
            </param>
        </member>
        <member name="M:SilDev.Comparison.StartsWithEx(System.String,System.String,System.String)">
            <summary>
                Determines whether the beginning of this string matches one of the
                specified strings. The <see cref="F:System.StringComparison.OrdinalIgnoreCase"/>
                parameter is used for this comparison.
            </summary>
            <param name="source">
                The string to check.
            </param>
            <param name="target0">
                The first string to compare.
            </param>
            <param name="target1">
                The second string to compare.
            </param>
        </member>
        <member name="M:SilDev.Comparison.StartsWithEx(System.String,System.String,System.String,System.String)">
            <summary>
                Determines whether the beginning of this string matches one of the
                specified strings. The <see cref="F:System.StringComparison.OrdinalIgnoreCase"/>
                parameter is used for this comparison.
            </summary>
            <param name="source">
                The string to check.
            </param>
            <param name="target0">
                The first string to compare.
            </param>
            <param name="target1">
                The second string to compare.
            </param>
            <param name="target2">
                The third string to compare.
            </param>
        </member>
        <member name="M:SilDev.Comparison.StartsWithEx(System.String,System.String[])">
            <summary>
                Determines whether the beginning of this string matches one of the
                specified strings. The <see cref="F:System.StringComparison.OrdinalIgnoreCase"/>
                parameter is used for this comparison.
            </summary>
            <param name="source">
                The string to check.
            </param>
            <param name="targets">
                The sequence of strings to compare.
            </param>
        </member>
        <member name="M:SilDev.Comparison.StartsWithEx(System.String,System.StringComparison,System.Char)">
            <summary>
                Determines whether the beginning of this string matches the specified
                character. A parameter specifies the culture, case, and sort rules used in
                the comparison.
            </summary>
            <param name="source">
                The string to check.
            </param>
            <param name="comparisonType">
                One of the enumeration values that specifies the rules for the search.
            </param>
            <param name="target0">
                The character to compare.
            </param>
        </member>
        <member name="M:SilDev.Comparison.StartsWithEx(System.String,System.StringComparison,System.Char,System.Char)">
            <summary>
                Determines whether the beginning of this string matches one of the
                specified characters. A parameter specifies the culture, case, and sort
                rules used in the comparison.
            </summary>
            <param name="source">
                The string to check.
            </param>
            <param name="comparisonType">
                One of the enumeration values that specifies the rules for the search.
            </param>
            <param name="target0">
                The first character to compare.
            </param>
            <param name="target1">
                The second character to compare.
            </param>
        </member>
        <member name="M:SilDev.Comparison.StartsWithEx(System.String,System.StringComparison,System.Char,System.Char,System.Char)">
            <summary>
                Determines whether the beginning of this string matches one of the
                specified characters. A parameter specifies the culture, case, and sort
                rules used in the comparison.
            </summary>
            <param name="source">
                The string to check.
            </param>
            <param name="comparisonType">
                One of the enumeration values that specifies the rules for the search.
            </param>
            <param name="target0">
                The first character to compare.
            </param>
            <param name="target1">
                The second character to compare.
            </param>
            <param name="target2">
                The third character to compare.
            </param>
        </member>
        <member name="M:SilDev.Comparison.StartsWithEx(System.String,System.StringComparison,System.Char[])">
            <summary>
                Determines whether the beginning of this string matches one of the
                specified characters. A parameter specifies the culture, case, and sort
                rules used in the comparison.
            </summary>
            <param name="source">
                The string to check.
            </param>
            <param name="comparisonType">
                One of the enumeration values that specifies the rules for the search.
            </param>
            <param name="targets">
                The sequence of characters to compare.
            </param>
        </member>
        <member name="M:SilDev.Comparison.StartsWithEx(System.String,System.Char)">
            <summary>
                Determines whether the beginning of this string matches the specified
                character. The <see cref="F:System.StringComparison.OrdinalIgnoreCase"/> parameter
                is used for this comparison.
            </summary>
            <param name="source">
                The string to check.
            </param>
            <param name="target0">
                The character to compare.
            </param>
        </member>
        <member name="M:SilDev.Comparison.StartsWithEx(System.String,System.Char,System.Char)">
            <summary>
                Determines whether the beginning of this string matches one of the
                specified characters. The <see cref="F:System.StringComparison.OrdinalIgnoreCase"/>
                parameter is used for this comparison.
            </summary>
            <param name="source">
                The string to check.
            </param>
            <param name="target0">
                The first character to compare.
            </param>
            <param name="target1">
                The second character to compare.
            </param>
        </member>
        <member name="M:SilDev.Comparison.StartsWithEx(System.String,System.Char,System.Char,System.Char)">
            <summary>
                Determines whether the beginning of this string matches one of the
                specified characters. The <see cref="F:System.StringComparison.OrdinalIgnoreCase"/>
                parameter is used for this comparison.
            </summary>
            <param name="source">
                The string to check.
            </param>
            <param name="target0">
                The first character to compare.
            </param>
            <param name="target1">
                The second character to compare.
            </param>
            <param name="target2">
                The third character to compare.
            </param>
        </member>
        <member name="M:SilDev.Comparison.StartsWithEx(System.String,System.Char[])">
            <summary>
                Determines whether the beginning of this string matches one of the
                specified characters. The <see cref="F:System.StringComparison.OrdinalIgnoreCase"/>
                parameter is used for this comparison.
            </summary>
            <param name="source">
                The string to check.
            </param>
            <param name="targets">
                The sequence of characters to compare.
            </param>
        </member>
        <member name="M:SilDev.Comparison.EndsWithEx(System.String,System.StringComparison,System.String)">
            <summary>
                Determines whether the end of this string matches the specified string. A
                parameter specifies the culture, case, and sort rules used in the
                comparison.
            </summary>
            <param name="source">
                The string to check.
            </param>
            <param name="comparisonType">
                One of the enumeration values that specifies the rules for the search.
            </param>
            <param name="target0">
                The string to compare.
            </param>
        </member>
        <member name="M:SilDev.Comparison.EndsWithEx(System.String,System.StringComparison,System.String,System.String)">
            <summary>
                Determines whether the end of this string matches one of the specified
                strings. A parameter specifies the culture, case, and sort rules used in
                the comparison.
            </summary>
            <param name="source">
                The string to check.
            </param>
            <param name="comparisonType">
                One of the enumeration values that specifies the rules for the search.
            </param>
            <param name="target0">
                The first string to compare.
            </param>
            <param name="target1">
                The second string to compare.
            </param>
        </member>
        <member name="M:SilDev.Comparison.EndsWithEx(System.String,System.StringComparison,System.String,System.String,System.String)">
            <summary>
                Determines whether the end of this string matches one of the specified
                strings. A parameter specifies the culture, case, and sort rules used in
                the comparison.
            </summary>
            <param name="source">
                The string to check.
            </param>
            <param name="comparisonType">
                One of the enumeration values that specifies the rules for the search.
            </param>
            <param name="target0">
                The first string to compare.
            </param>
            <param name="target1">
                The second string to compare.
            </param>
            <param name="target2">
                The third string to compare.
            </param>
        </member>
        <member name="M:SilDev.Comparison.EndsWithEx(System.String,System.StringComparison,System.String[])">
            <summary>
                Determines whether the end of this string matches one of the specified
                strings. A parameter specifies the culture, case, and sort rules used in
                the comparison.
            </summary>
            <param name="source">
                The string to check.
            </param>
            <param name="comparisonType">
                One of the enumeration values that specifies the rules for the search.
            </param>
            <param name="targets">
                The sequence of strings to compare.
            </param>
        </member>
        <member name="M:SilDev.Comparison.EndsWithEx(System.String,System.String)">
            <summary>
                Determines whether the end of this string matches the specified string. The
                <see cref="F:System.StringComparison.OrdinalIgnoreCase"/> parameter is used for this
                comparison.
            </summary>
            <param name="source">
                The string to check.
            </param>
            <param name="target0">
                The string to compare.
            </param>
        </member>
        <member name="M:SilDev.Comparison.EndsWithEx(System.String,System.String,System.String)">
            <summary>
                Determines whether the end of this string matches one of the specified
                strings. The <see cref="F:System.StringComparison.OrdinalIgnoreCase"/> parameter is
                used for this comparison.
            </summary>
            <param name="source">
                The string to check.
            </param>
            <param name="target0">
                The first string to compare.
            </param>
            <param name="target1">
                The second string to compare.
            </param>
        </member>
        <member name="M:SilDev.Comparison.EndsWithEx(System.String,System.String,System.String,System.String)">
            <summary>
                Determines whether the end of this string matches one of the specified
                strings. The <see cref="F:System.StringComparison.OrdinalIgnoreCase"/> parameter is
                used for this comparison.
            </summary>
            <param name="source">
                The string to check.
            </param>
            <param name="target0">
                The first string to compare.
            </param>
            <param name="target1">
                The second string to compare.
            </param>
            <param name="target2">
                The third string to compare.
            </param>
        </member>
        <member name="M:SilDev.Comparison.EndsWithEx(System.String,System.String[])">
            <summary>
                Determines whether the end of this string matches one of the specified
                strings. The <see cref="F:System.StringComparison.OrdinalIgnoreCase"/> parameter is
                used for this comparison.
            </summary>
            <param name="source">
                The string to check.
            </param>
            <param name="targets">
                The sequence of strings to compare.
            </param>
        </member>
        <member name="M:SilDev.Comparison.EndsWithEx(System.String,System.StringComparison,System.Char[])">
            <summary>
                Determines whether the end of this string matches one of the specified
                characters. A parameter specifies the culture, case, and sort rules used in
                the comparison.
            </summary>
            <param name="source">
                The string to check.
            </param>
            <param name="comparisonType">
                One of the enumeration values that specifies the rules for the search.
            </param>
            <param name="targets">
                The sequence of characters to compare.
            </param>
        </member>
        <member name="M:SilDev.Comparison.EndsWithEx(System.String,System.Char)">
            <summary>
                Determines whether the end of this string matches the specified character.
                The <see cref="F:System.StringComparison.OrdinalIgnoreCase"/> parameter is used for
                this comparison.
            </summary>
            <param name="source">
                The string to check.
            </param>
            <param name="target0">
                The character to compare.
            </param>
        </member>
        <member name="M:SilDev.Comparison.EndsWithEx(System.String,System.Char,System.Char)">
            <summary>
                Determines whether the end of this string matches one of the specified
                characters. The <see cref="F:System.StringComparison.OrdinalIgnoreCase"/> parameter
                is used for this comparison.
            </summary>
            <param name="source">
                The string to check.
            </param>
            <param name="target0">
                The first character to compare.
            </param>
            <param name="target1">
                The second character to compare.
            </param>
        </member>
        <member name="M:SilDev.Comparison.EndsWithEx(System.String,System.Char,System.Char,System.Char)">
            <summary>
                Determines whether the end of this string matches one of the specified
                characters. The <see cref="F:System.StringComparison.OrdinalIgnoreCase"/> parameter
                is used for this comparison.
            </summary>
            <param name="source">
                The string to check.
            </param>
            <param name="target0">
                The first character to compare.
            </param>
            <param name="target1">
                The second character to compare.
            </param>
            <param name="target2">
                The third character to compare.
            </param>
        </member>
        <member name="M:SilDev.Comparison.EndsWithEx(System.String,System.Char[])">
            <summary>
                Determines whether the end of this string matches one of the specified
                characters. The <see cref="F:System.StringComparison.OrdinalIgnoreCase"/> parameter
                is used for this comparison.
            </summary>
            <param name="source">
                The string to check.
            </param>
            <param name="targets">
                The sequence of characters to compare.
            </param>
        </member>
        <member name="M:SilDev.Comparison.EqualsEx(System.String,System.StringComparison,System.String)">
            <summary>
                Determines whether this string is the same as one of the specified strings.
                A parameter specifies the culture, case, and sort rules used in the
                comparison.
            </summary>
            <param name="source">
                The first string to compare.
            </param>
            <param name="comparisonType">
                The comparison type that specifies the culture, case, and sort rules.
            </param>
            <param name="target0">
                The string to compare with the first string.
            </param>
        </member>
        <member name="M:SilDev.Comparison.EqualsEx(System.String,System.StringComparison,System.String,System.String)">
            <summary>
                Determines whether this string is the same as one of the specified strings.
                A parameter specifies the culture, case, and sort rules used in the
                comparison.
            </summary>
            <param name="source">
                The first string to compare.
            </param>
            <param name="comparisonType">
                The comparison type that specifies the culture, case, and sort rules.
            </param>
            <param name="target0">
                One of strings to compare with the first string.
            </param>
            <param name="target1">
                One of strings to compare with the first string.
            </param>
        </member>
        <member name="M:SilDev.Comparison.EqualsEx(System.String,System.StringComparison,System.String,System.String,System.String)">
            <summary>
                Determines whether this string is the same as one of the specified strings.
                A parameter specifies the culture, case, and sort rules used in the
                comparison.
            </summary>
            <param name="source">
                The first string to compare.
            </param>
            <param name="comparisonType">
                The comparison type that specifies the culture, case, and sort rules.
            </param>
            <param name="target0">
                One of strings to compare with the first string.
            </param>
            <param name="target1">
                One of strings to compare with the first string.
            </param>
            <param name="target2">
                One of strings to compare with the first string.
            </param>
        </member>
        <member name="M:SilDev.Comparison.EqualsEx(System.String,System.StringComparison,System.String[])">
            <summary>
                Determines whether this string is the same as one of the specified strings.
                A parameter specifies the culture, case, and sort rules used in the
                comparison.
            </summary>
            <param name="source">
                The first string to compare.
            </param>
            <param name="comparisonType">
                The comparison type that specifies the culture, case, and sort rules.
            </param>
            <param name="targets">
                The sequence of strings to compare with the first string.
            </param>
        </member>
        <member name="M:SilDev.Comparison.EqualsEx(System.String,System.String)">
            <summary>
                Determines whether this string is the same as the specified string. The
                <see cref="F:System.StringComparison.OrdinalIgnoreCase"/> parameter is used for this
                comparison.
            </summary>
            <param name="source">
                The first string to compare.
            </param>
            <param name="target0">
                The string to compare with the first string.
            </param>
        </member>
        <member name="M:SilDev.Comparison.EqualsEx(System.String,System.String,System.String)">
            <summary>
                Determines whether this string is the same as one of the specified strings.
                The <see cref="F:System.StringComparison.OrdinalIgnoreCase"/> parameter is used for
                this comparison.
            </summary>
            <param name="source">
                The first string to compare.
            </param>
            <param name="target0">
                One of strings to compare with the first string.
            </param>
            <param name="target1">
                One of strings to compare with the first string.
            </param>
        </member>
        <member name="M:SilDev.Comparison.EqualsEx(System.String,System.String,System.String,System.String)">
            <summary>
                Determines whether this string is the same as one of the specified strings.
                The <see cref="F:System.StringComparison.OrdinalIgnoreCase"/> parameter is used for
                this comparison.
            </summary>
            <param name="source">
                The first string to compare.
            </param>
            <param name="target0">
                One of strings to compare with the first string.
            </param>
            <param name="target1">
                One of strings to compare with the first string.
            </param>
            <param name="target2">
                One of strings to compare with the first string.
            </param>
        </member>
        <member name="M:SilDev.Comparison.EqualsEx(System.String,System.String[])">
            <summary>
                Determines whether this string is the same as one of the specified strings.
                The <see cref="F:System.StringComparison.OrdinalIgnoreCase"/> parameter is used for
                this comparison.
            </summary>
            <param name="source">
                The first string to compare.
            </param>
            <param name="targets">
                The sequence of strings to compare with the first string.
            </param>
        </member>
        <member name="M:SilDev.Comparison.SequenceStartsWith(System.Collections.Generic.IEnumerable{System.Byte},System.Byte)">
            <summary>
                Determines whether the beginning of this sequence of bytes matches the
                specified byte.
            </summary>
            <param name="source">
                The first sequence of bytes to compare.
            </param>
            <param name="target0">
                The byte to compare.
            </param>
        </member>
        <member name="M:SilDev.Comparison.SequenceStartsWith(System.Collections.Generic.IEnumerable{System.Byte},System.Byte,System.Byte)">
            <summary>
                Determines whether the beginning of this sequence of bytes matches the
                specified sequence of bytes.
            </summary>
            <param name="source">
                The first sequence of bytes to compare.
            </param>
            <param name="target0">
                The first byte to compare.
            </param>
            <param name="target1">
                The second byte to compare.
            </param>
        </member>
        <member name="M:SilDev.Comparison.SequenceStartsWith(System.Collections.Generic.IEnumerable{System.Byte},System.Byte,System.Byte,System.Byte)">
            <summary>
                Determines whether the beginning of this sequence of bytes matches the
                specified sequence of bytes.
            </summary>
            <param name="source">
                The first sequence of bytes to compare.
            </param>
            <param name="target0">
                The first byte to compare.
            </param>
            <param name="target1">
                The second byte to compare.
            </param>
            <param name="target2">
                The third byte to compare.
            </param>
        </member>
        <member name="M:SilDev.Comparison.SequenceStartsWith(System.Collections.Generic.IEnumerable{System.Byte},System.Byte[])">
            <summary>
                Determines whether the beginning of this sequence of bytes matches the
                specified sequence of bytes.
            </summary>
            <param name="source">
                The first sequence of bytes to compare.
            </param>
            <param name="target">
                The sequence of bytes to compare with the first.
            </param>
        </member>
        <member name="M:SilDev.Comparison.SequenceStartsWith(System.Collections.Generic.IEnumerable{System.Byte},System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
                Determines whether the beginning of this sequence of bytes matches the
                specified sequence of bytes.
            </summary>
            <param name="source">
                The first sequence of bytes to compare.
            </param>
            <param name="target">
                The sequence of bytes to compare with the first.
            </param>
        </member>
        <member name="M:SilDev.Comparison.SequenceStartsWith(System.Collections.Generic.IEnumerable{System.Byte},System.Collections.Generic.IEnumerable{System.Byte},System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
                Determines whether the beginning of this sequence of bytes matches one of
                the specified sequence of bytes.
            </summary>
            <param name="source">
                The first sequence of bytes to compare.
            </param>
            <param name="target0">
                One of the sequences of bytes to compare with the first.
            </param>
            <param name="target1">
                One of the sequences of bytes to compare with the first.
            </param>
        </member>
        <member name="M:SilDev.Comparison.SequenceStartsWith(System.Collections.Generic.IEnumerable{System.Byte},System.Collections.Generic.IEnumerable{System.Byte},System.Collections.Generic.IEnumerable{System.Byte},System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
                Determines whether the beginning of this sequence of bytes matches one of
                the specified sequence of bytes.
            </summary>
            <param name="source">
                The first sequence of bytes to compare.
            </param>
            <param name="target0">
                One of the sequences of bytes to compare with the first.
            </param>
            <param name="target1">
                One of the sequences of bytes to compare with the first.
            </param>
            <param name="target2">
                One of the sequences of bytes to compare with the first.
            </param>
        </member>
        <member name="M:SilDev.Comparison.SequenceStartsWith(System.Collections.Generic.IEnumerable{System.Byte},System.Collections.Generic.IEnumerable{System.Byte}[])">
            <summary>
                Determines whether the beginning of this sequence of bytes matches one of
                the specified sequences of bytes.
            </summary>
            <param name="source">
                The first sequence of bytes to compare.
            </param>
            <param name="targets">
                The sequences of bytes to compare.
            </param>
        </member>
        <member name="M:SilDev.Comparison.SequenceEndsWith(System.Collections.Generic.IEnumerable{System.Byte},System.Byte)">
            <summary>
                Determines whether the beginning of this sequence of bytes matches the
                specified byte.
            </summary>
            <param name="source">
                The first sequence of bytes to compare.
            </param>
            <param name="target0">
                The byte to compare.
            </param>
        </member>
        <member name="M:SilDev.Comparison.SequenceEndsWith(System.Collections.Generic.IEnumerable{System.Byte},System.Byte,System.Byte)">
            <summary>
                Determines whether the beginning of this sequence of bytes matches the
                specified sequence of bytes.
            </summary>
            <param name="source">
                The first sequence of bytes to compare.
            </param>
            <param name="target0">
                The first byte to compare.
            </param>
            <param name="target1">
                The second byte to compare.
            </param>
        </member>
        <member name="M:SilDev.Comparison.SequenceEndsWith(System.Collections.Generic.IEnumerable{System.Byte},System.Byte,System.Byte,System.Byte)">
            <summary>
                Determines whether the beginning of this sequence of bytes matches the
                specified sequence of bytes.
            </summary>
            <param name="source">
                The first sequence of bytes to compare.
            </param>
            <param name="target0">
                The first byte to compare.
            </param>
            <param name="target1">
                The second byte to compare.
            </param>
            <param name="target2">
                The third byte to compare.
            </param>
        </member>
        <member name="M:SilDev.Comparison.SequenceEndsWith(System.Collections.Generic.IEnumerable{System.Byte},System.Byte[])">
            <summary>
                Determines whether the end of this sequence of bytes matches the specified
                sequence of bytes.
            </summary>
            <param name="source">
                The first sequence of bytes to compare.
            </param>
            <param name="target">
                The sequence of bytes to compare with the first.
            </param>
        </member>
        <member name="M:SilDev.Comparison.SequenceEndsWith(System.Collections.Generic.IEnumerable{System.Byte},System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
                Determines whether the end of this sequence of bytes matches the specified
                sequence of bytes.
            </summary>
            <param name="source">
                The first sequence of bytes to compare.
            </param>
            <param name="target">
                The sequence of bytes to compare with the first.
            </param>
        </member>
        <member name="M:SilDev.Comparison.SequenceEndsWith(System.Collections.Generic.IEnumerable{System.Byte},System.Collections.Generic.IEnumerable{System.Byte},System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
                Determines whether the end of this sequence of bytes matches one of the
                specified sequence of bytes.
            </summary>
            <param name="source">
                The first sequence of bytes to compare.
            </param>
            <param name="target0">
                One of the sequences of bytes to compare with the first.
            </param>
            <param name="target1">
                One of the sequences of bytes to compare with the first.
            </param>
        </member>
        <member name="M:SilDev.Comparison.SequenceEndsWith(System.Collections.Generic.IEnumerable{System.Byte},System.Collections.Generic.IEnumerable{System.Byte},System.Collections.Generic.IEnumerable{System.Byte},System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
                Determines whether the end of this sequence of bytes matches one of the
                specified sequence of bytes.
            </summary>
            <param name="source">
                The first sequence of bytes to compare.
            </param>
            <param name="target0">
                One of the sequences of bytes to compare with the first.
            </param>
            <param name="target1">
                One of the sequences of bytes to compare with the first.
            </param>
            <param name="target2">
                One of the sequences of bytes to compare with the first.
            </param>
        </member>
        <member name="M:SilDev.Comparison.SequenceEndsWith(System.Collections.Generic.IEnumerable{System.Byte},System.Collections.Generic.IEnumerable{System.Byte}[])">
            <summary>
                Determines whether the end of this sequence of bytes matches one of the
                specified sequences of bytes.
            </summary>
            <param name="source">
                The first sequence of bytes to compare.
            </param>
            <param name="targets">
                The sequences of bytes to compare.
            </param>
        </member>
        <member name="M:SilDev.Comparison.SequenceEqualEx(System.Collections.Generic.IEnumerable{System.Byte},System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
                Determines whether this sequence of bytes is the same as the specified
                sequence of bytes.
            </summary>
            <param name="source">
                The first sequence of bytes to compare.
            </param>
            <param name="target0">
                The sequence of bytes to compare with the first.
            </param>
        </member>
        <member name="M:SilDev.Comparison.SequenceEqualEx(System.Collections.Generic.IEnumerable{System.Byte},System.Collections.Generic.IEnumerable{System.Byte},System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
                Determines whether this sequence of bytes is the same as one of the
                specified sequences of bytes.
            </summary>
            <param name="source">
                The first sequence of bytes to compare.
            </param>
            <param name="target0">
                One of the sequences of bytes to compare with the first.
            </param>
            <param name="target1">
                One of the sequences of bytes to compare with the first.
            </param>
        </member>
        <member name="M:SilDev.Comparison.SequenceEqualEx(System.Collections.Generic.IEnumerable{System.Byte},System.Collections.Generic.IEnumerable{System.Byte},System.Collections.Generic.IEnumerable{System.Byte},System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
                Determines whether this sequence of bytes is the same as one of the
                specified sequences of bytes.
            </summary>
            <param name="source">
                The first sequence of bytes to compare.
            </param>
            <param name="target0">
                One of the sequences of bytes to compare with the first.
            </param>
            <param name="target1">
                One of the sequences of bytes to compare with the first.
            </param>
            <param name="target2">
                One of the sequences of bytes to compare with the first.
            </param>
        </member>
        <member name="M:SilDev.Comparison.SequenceEqualEx(System.Collections.Generic.IEnumerable{System.Byte},System.Collections.Generic.IEnumerable{System.Byte}[])">
            <summary>
                Determines whether this sequence of bytes is the same as one of the
                specified sequences of bytes.
            </summary>
            <param name="source">
                The first sequence of bytes to compare.
            </param>
            <param name="targets">
                The sequences of bytes to compare with the first.
            </param>
        </member>
        <member name="M:SilDev.Comparison.SequenceEqualEx``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Determines whether two sequences are equal by comparing their elements by
                using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
                <para>
                    Please note that this method does the same as
                    <see cref="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})"/>
                    , except that parameters set to <see langword="null"/> will also
                    compare instead of throwing an exception.
                </para>
            </summary>
            <typeparam name="TSource">
                The type of the elements of the input sequences.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to compare to second.
            </param>
            <param name="target">
                An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to compare to the first sequence.
            </param>
            <param name="comparer">
                An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use to compare elements.
            </param>
        </member>
        <member name="M:SilDev.Comparison.SequenceEqualEx``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Determines whether two sequences are equal by comparing their elements by
                using the default equality comparer for their type.
                <para>
                    Please note that this method does the same as
                    <see cref="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})"/>
                    , except that parameters set to <see langword="null"/> will also
                    compare instead of throwing an exception.
                </para>
            </summary>
            <typeparam name="TSource">
                The type of the elements of the input sequences.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to compare to second.
            </param>
            <param name="target">
                An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to compare to the first sequence.
            </param>
        </member>
        <member name="T:SilDev.SymmetricKeyAlgorithm">
            <summary>
                Specifies enumerated constants used to encrypt and decrypt data.
            </summary>
        </member>
        <member name="F:SilDev.SymmetricKeyAlgorithm.Aes128">
            <summary>
                Advanced Encryption Standard (AES-128).
            </summary>
        </member>
        <member name="F:SilDev.SymmetricKeyAlgorithm.Aes192">
            <summary>
                Advanced Encryption Standard (AES-192).
            </summary>
        </member>
        <member name="F:SilDev.SymmetricKeyAlgorithm.Aes256">
            <summary>
                Advanced Encryption Standard (AES-256).
            </summary>
        </member>
        <member name="T:SilDev.BinaryToTextEncoding">
            <summary>
                Specifies enumerated constants used to encode and decode data.
            </summary>
        </member>
        <member name="F:SilDev.BinaryToTextEncoding.Base2">
            <summary>
                Binary.
            </summary>
        </member>
        <member name="F:SilDev.BinaryToTextEncoding.Base8">
            <summary>
                Octal.
            </summary>
        </member>
        <member name="F:SilDev.BinaryToTextEncoding.Base10">
            <summary>
                Decimal.
            </summary>
        </member>
        <member name="F:SilDev.BinaryToTextEncoding.Base16">
            <summary>
                Hexadecimal.
            </summary>
        </member>
        <member name="F:SilDev.BinaryToTextEncoding.Base32">
            <summary>
                Base32.
            </summary>
        </member>
        <member name="F:SilDev.BinaryToTextEncoding.Base64">
            <summary>
                Base64.
            </summary>
        </member>
        <member name="F:SilDev.BinaryToTextEncoding.Base85">
            <summary>
                Base85 (Ascii85).
            </summary>
        </member>
        <member name="F:SilDev.BinaryToTextEncoding.Base91">
            <summary>
                Base91 (basE91).
            </summary>
        </member>
        <member name="T:SilDev.ChecksumAlgorithm">
            <summary>
                Specifies enumerated constants used to encrypt data.
            </summary>
        </member>
        <member name="F:SilDev.ChecksumAlgorithm.Adler32">
            <summary>
                Adler-32.
            </summary>
        </member>
        <member name="F:SilDev.ChecksumAlgorithm.Crc16">
            <summary>
                Cyclic Redundancy Check (CRC-16).
            </summary>
        </member>
        <member name="F:SilDev.ChecksumAlgorithm.Crc32">
            <summary>
                Cyclic Redundancy Check (CRC-32).
            </summary>
        </member>
        <member name="F:SilDev.ChecksumAlgorithm.Crc64">
            <summary>
                Cyclic Redundancy Check (CRC-64).
            </summary>
        </member>
        <member name="F:SilDev.ChecksumAlgorithm.Md5">
            <summary>
                Message-Digest 5.
            </summary>
        </member>
        <member name="F:SilDev.ChecksumAlgorithm.Sha1">
            <summary>
                Secure Hash Algorithm 1.
            </summary>
        </member>
        <member name="F:SilDev.ChecksumAlgorithm.Sha256">
            <summary>
                Secure Hash Algorithm 2 (SHA-256).
            </summary>
        </member>
        <member name="F:SilDev.ChecksumAlgorithm.Sha384">
            <summary>
                Secure Hash Algorithm 2 (SHA-384).
            </summary>
        </member>
        <member name="F:SilDev.ChecksumAlgorithm.Sha512">
            <summary>
                Secure Hash Algorithm 2 (SHA-512).
            </summary>
        </member>
        <member name="T:SilDev.Crypto">
            <summary>
                Provides functionality for data encryption and decryption.
            </summary>
        </member>
        <member name="M:SilDev.Crypto.CombineHashCodes(System.Int32,System.Int32)">
            <summary>
                Combines the specified hash codes.
            </summary>
            <param name="hash1">
                The first hash code.
            </param>
            <param name="hash2">
                The second hash code.
            </param>
        </member>
        <member name="M:SilDev.Crypto.CombineHashCodes(System.Object,System.Object)">
            <summary>
                Combines the hash codes of the specified objects.
            </summary>
            <param name="obj1">
                The first object.
            </param>
            <param name="obj2">
                The second object.
            </param>
        </member>
        <member name="M:SilDev.Crypto.CombineHashCodes(System.Int32,System.Int32,System.Int32)">
            <summary>
                Combines the specified hash codes.
            </summary>
            <param name="hash1">
                The first hash code.
            </param>
            <param name="hash2">
                The second hash code.
            </param>
            <param name="hash3">
                The third hash code.
            </param>
        </member>
        <member name="M:SilDev.Crypto.CombineHashCodes(System.Object,System.Object,System.Object)">
            <summary>
                Combines the hash codes of the specified objects.
            </summary>
            <param name="obj1">
                The first object.
            </param>
            <param name="obj2">
                The second object.
            </param>
            <param name="obj3">
                The third object.
            </param>
        </member>
        <member name="M:SilDev.Crypto.CombineHashCodes(System.Int32[])">
            <summary>
                Combines the specified hash codes.
            </summary>
            <param name="hashes">
                A sequence of hash codes.
            </param>
        </member>
        <member name="M:SilDev.Crypto.CombineHashCodes(System.Object[])">
            <summary>
                Combines the hash codes of the specified objects.
            </summary>
            <param name="objects">
                A sequence of hash codes.
            </param>
        </member>
        <member name="M:SilDev.Crypto.GetGuid``1(``0,System.Boolean,SilDev.ChecksumAlgorithm,SilDev.ChecksumAlgorithm)">
            <summary>
                Encrypts this <typeparamref name="TSource"/> object with the specified
                <see cref="T:SilDev.ChecksumAlgorithm"/> and combines both hashes into a unique
                GUID.
            </summary>
            <typeparam name="TSource">
                The type of source.
            </typeparam>
            <param name="source">
                The object to encrypt.
            </param>
            <param name="braces">
                <see langword="true"/> to place the GUID between braces; otherwise,
                <see langword="false"/>.
            </param>
            <param name="algorithm1">
                The first algorithm to use.
            </param>
            <param name="algorithm2">
                The second algorithm to use.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Encrypt(System.Byte[],System.Byte[],System.Byte[],SilDev.SymmetricKeyAlgorithm)">
            <summary>
                Encrypts this sequence of bytes with the specified algorithm.
            </summary>
            <param name="bytes">
                The sequence of bytes to encrypt.
            </param>
            <param name="password">
                The sequence of bytes which is used as password.
            </param>
            <param name="salt">
                The sequence of bytes which is used as salt.
            </param>
            <param name="algorithm">
                The algorithm to use.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Encrypt(System.Byte[],System.String,System.Byte[],SilDev.SymmetricKeyAlgorithm)">
            <summary>
                Encrypts this sequence of bytes with the specified algorithm.
            </summary>
            <param name="bytes">
                The sequence of bytes to encrypt.
            </param>
            <param name="password">
                The sequence of bytes which is used as password.
            </param>
            <param name="salt">
                The sequence of bytes which is used as salt.
            </param>
            <param name="algorithm">
                The algorithm to use.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Encrypt(System.String,System.Byte[],System.Byte[],SilDev.SymmetricKeyAlgorithm)">
            <summary>
                Encrypts this string with the specified algorithm.
            </summary>
            <param name="text">
                The string to encrypt.
            </param>
            <param name="password">
                The sequence of bytes which is used as password.
            </param>
            <param name="salt">
                The sequence of bytes which is used as salt.
            </param>
            <param name="algorithm">
                The algorithm to use.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Encrypt(System.String,System.String,System.Byte[],SilDev.SymmetricKeyAlgorithm)">
            <summary>
                Encrypts this string with the specified algorithm.
            </summary>
            <param name="text">
                The string to encrypt.
            </param>
            <param name="password">
                The sequence of bytes which is used as password.
            </param>
            <param name="salt">
                The sequence of bytes which is used as salt.
            </param>
            <param name="algorithm">
                The algorithm to use.
            </param>
        </member>
        <member name="M:SilDev.Crypto.EncryptFile(System.String,System.Byte[],System.Byte[],SilDev.SymmetricKeyAlgorithm)">
            <summary>
                Encrypts this file with the specified algorithm.
            </summary>
            <param name="path">
                The full path of the file to encrypt.
            </param>
            <param name="password">
                The sequence of bytes which is used as password.
            </param>
            <param name="salt">
                The sequence of bytes which is used as salt.
            </param>
            <param name="algorithm">
                The algorithm to use.
            </param>
        </member>
        <member name="M:SilDev.Crypto.EncryptFile(System.String,System.String,System.Byte[],SilDev.SymmetricKeyAlgorithm)">
            <summary>
                Encrypts this file with the specified algorithm.
            </summary>
            <param name="path">
                The full path of the file to encrypt.
            </param>
            <param name="password">
                The string which is used as password.
            </param>
            <param name="salt">
                The sequence of bytes which is used as salt.
            </param>
            <param name="algorithm">
                The algorithm to use.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Decrypt(System.Byte[],System.Byte[],System.Byte[],SilDev.SymmetricKeyAlgorithm)">
            <summary>
                Decrypts this sequence of bytes with the specified algorithm.
            </summary>
            <param name="bytes">
                The sequence of bytes to decrypt.
            </param>
            <param name="password">
                The sequence of bytes which is used as password.
            </param>
            <param name="salt">
                The sequence of bytes which is used as salt.
            </param>
            <param name="algorithm">
                The algorithm to use.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Decrypt(System.Byte[],System.String,System.Byte[],SilDev.SymmetricKeyAlgorithm)">
            <summary>
                Decrypts this sequence of bytes with the specified algorithm.
            </summary>
            <param name="bytes">
                The sequence of bytes to decrypt.
            </param>
            <param name="password">
                The string which is used as password.
            </param>
            <param name="salt">
                The sequence of bytes which is used as salt.
            </param>
            <param name="algorithm">
                The algorithm to use.
            </param>
        </member>
        <member name="M:SilDev.Crypto.DecryptFile(System.String,System.Byte[],System.Byte[],SilDev.SymmetricKeyAlgorithm)">
            <summary>
                Decrypts this sequence of bytes with the specified algorithm.
            </summary>
            <param name="path">
                The full path of the file to decrypt.
            </param>
            <param name="password">
                The sequence of bytes which is used as password.
            </param>
            <param name="salt">
                The sequence of bytes which is used as salt.
            </param>
            <param name="algorithm">
                The algorithm to use.
            </param>
        </member>
        <member name="M:SilDev.Crypto.DecryptFile(System.String,System.String,System.Byte[],SilDev.SymmetricKeyAlgorithm)">
            <summary>
                Decrypts this sequence of bytes with the specified algorithm.
            </summary>
            <param name="path">
                The full path of the file to decrypt.
            </param>
            <param name="password">
                The string which is used as password.
            </param>
            <param name="salt">
                The sequence of bytes which is used as salt.
            </param>
            <param name="algorithm">
                The algorithm to use.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Encode(System.Byte[],SilDev.BinaryToTextEncoding)">
            <summary>
                Encodes this sequence of bytes with the specified algorithm.
            </summary>
            <param name="bytes">
                The sequence of bytes to encode.
            </param>
            <param name="algorithm">
                The algorithm to use.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Encode(System.String,SilDev.BinaryToTextEncoding)">
            <summary>
                Encodes this string with the specified algorithm.
            </summary>
            <param name="text">
                The string to encode.
            </param>
            <param name="algorithm">
                The algorithm to use.
            </param>
        </member>
        <member name="M:SilDev.Crypto.EncodeFile(System.String,SilDev.BinaryToTextEncoding)">
            <summary>
                Encodes this file into a sequence of bytes with the specified algorithm.
            </summary>
            <param name="path">
                The full path of the file to encode.
            </param>
            <param name="algorithm">
                The algorithm to use.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Decode(System.String,SilDev.BinaryToTextEncoding)">
            <summary>
                Decodes this string into a sequence of bytes with the specified algorithm.
            </summary>
            <param name="code">
                The string to decode.
            </param>
            <param name="algorithm">
                The algorithm to use.
            </param>
        </member>
        <member name="M:SilDev.Crypto.DecodeString(System.String,SilDev.BinaryToTextEncoding)">
            <summary>
                Decodes this string into a sequence of bytes with the specified algorithm.
            </summary>
            <param name="code">
                The string to decode.
            </param>
            <param name="algorithm">
                The algorithm to use.
            </param>
        </member>
        <member name="M:SilDev.Crypto.DecodeFile(System.String,SilDev.BinaryToTextEncoding)">
            <summary>
                Decodes this file into a sequence of bytes with the specified algorithm.
            </summary>
            <param name="path">
                The full path of the file to decode.
            </param>
            <param name="algorithm">
                The algorithm to use.
            </param>
        </member>
        <member name="M:SilDev.Crypto.EncryptRaw``1(``0)">
            <summary>
                Encrypts this <typeparamref name="TSource"/> object with the
                <see cref="F:SilDev.ChecksumAlgorithm.Crc32"/> algorithm.
            </summary>
            <typeparam name="TSource">
                The type of source.
            </typeparam>
            <param name="source">
                The object to encrypt.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Encrypt``1(``0,SilDev.ChecksumAlgorithm)">
            <summary>
                Encrypts this <typeparamref name="TSource"/> object with the specified
                algorithm.
            </summary>
            <typeparam name="TSource">
                The type of source.
            </typeparam>
            <param name="source">
                The object to encrypt.
            </param>
            <param name="algorithm">
                The algorithm to use.
            </param>
        </member>
        <member name="M:SilDev.Crypto.EncryptFile(System.String,SilDev.ChecksumAlgorithm)">
            <summary>
                Encrypts this file with the specified algorithm.
            </summary>
            <param name="path">
                The full path of the file to encrypt.
            </param>
            <param name="algorithm">
                The algorithm to use.
            </param>
        </member>
        <member name="T:SilDev.Crypto.Rsa">
            <summary>
                Provides static methods to handle RSA encryption and decryption.
            </summary>
        </member>
        <member name="M:SilDev.Crypto.Rsa.CreateKeyFiles(System.String,System.Int32)">
            <summary>
                Creates a public and private key pair at the specified location.
            </summary>
            <param name="dirPath">
                The directory path.
            </param>
            <param name="keySize">
                The size of the key in bits.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Rsa.EncryptBytes(System.String,System.Byte[])">
            <summary>
                Encrypts the specified sequence of bytes.
            </summary>
            <param name="publicKeyPath">
                The path to the public key file.
            </param>
            <param name="bytes">
                The data to encrypt.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Rsa.EncryptString(System.String,System.String)">
            <summary>
                Encrypts the specified string.
            </summary>
            <param name="publicKeyPath">
                The path to the public key file.
            </param>
            <param name="text">
                The text to encrypt.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Rsa.DecryptBytes(System.String,System.String)">
            <summary>
                Decrypts the specified sequence of bytes.
            </summary>
            <param name="privateKeyPath">
                The path to the private key file.
            </param>
            <param name="code">
                The cypher to decrypt.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Rsa.DecryptString(System.String,System.String)">
            <summary>
                Decrypts the specified string.
            </summary>
            <param name="privateKeyPath">
                The path to the private key file.
            </param>
            <param name="code">
                The cypher to decrypt.
            </param>
        </member>
        <member name="T:SilDev.Crypto.Aes">
            <summary>
                Provides static methods to handle AES encryption and decryption.
            </summary>
        </member>
        <member name="T:SilDev.Crypto.Aes.KeySize">
            <summary>
                Provides enumerated bits of the key size.
            </summary>
        </member>
        <member name="F:SilDev.Crypto.Aes.KeySize.Aes128">
            <summary>
                128 bits.
            </summary>
        </member>
        <member name="F:SilDev.Crypto.Aes.KeySize.Aes192">
            <summary>
                192 bits.
            </summary>
        </member>
        <member name="F:SilDev.Crypto.Aes.KeySize.Aes256">
            <summary>
                256 bits.
            </summary>
        </member>
        <member name="M:SilDev.Crypto.Aes.EncryptBytes(System.Byte[],System.Byte[],System.Byte[],SilDev.Crypto.Aes.KeySize)">
            <summary>
                Encrypts the specified sequence of bytes.
            </summary>
            <param name="bytes">
                The sequence of bytes to encrypt.
            </param>
            <param name="password">
                The sequence of bytes which is used as password.
            </param>
            <param name="salt">
                The sequence of bytes which is used as salt.
            </param>
            <param name="keySize">
                The size of the secret key.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Aes.EncryptFile(System.String,System.Byte[],System.Byte[],SilDev.Crypto.Aes.KeySize)">
            <summary>
                Encrypts the specified file.
            </summary>
            <param name="path">
                The full path of the file to encrypt.
            </param>
            <param name="password">
                The sequence of bytes which is used as password.
            </param>
            <param name="salt">
                The sequence of bytes which is used as salt.
            </param>
            <param name="keySize">
                The size of the secret key.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Aes.DecryptBytes(System.Byte[],System.Byte[],System.Byte[],SilDev.Crypto.Aes.KeySize)">
            <summary>
                Decrypts the specified sequence of bytes.
            </summary>
            <param name="code">
                The sequence of bytes to decrypt.
            </param>
            <param name="password">
                The sequence of bytes which was used as password.
            </param>
            <param name="salt">
                The sequence of bytes which was used as salt.
            </param>
            <param name="keySize">
                The size of the secret key.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Aes.DecryptFile(System.String,System.Byte[],System.Byte[],SilDev.Crypto.Aes.KeySize)">
            <summary>
                Decrypts the specified file.
            </summary>
            <param name="path">
                The full path of the file to decrypt.
            </param>
            <param name="password">
                The sequence of bytes which was used as password.
            </param>
            <param name="salt">
                The sequence of bytes which was used as salt.
            </param>
            <param name="keySize">
                The size of the secret key.
            </param>
        </member>
        <member name="T:SilDev.Crypto.BinaryToText">
            <summary>
                Represents the base class from which all implementations of binary-to-text
                encoding algorithms must derive.
            </summary>
        </member>
        <member name="F:SilDev.Crypto.BinaryToText.Separator">
            <summary>
                Gets the separator.
            </summary>
        </member>
        <member name="M:SilDev.Crypto.BinaryToText.EncodeStream(System.IO.Stream,System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
                Encodes the specified input stream into the specified output stream.
            </summary>
            <param name="inputStream">
                The input stream to encode.
            </param>
            <param name="outputStream">
                The output stream for encoding.
            </param>
            <param name="lineLength">
                The length of lines.
            </param>
            <param name="dispose">
                <see langword="true"/> to release all resources used by the input and
                output <see cref="T:System.IO.Stream"/>; otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Crypto.BinaryToText.EncodeStream(System.IO.Stream,System.IO.Stream,System.Boolean)">
            <summary>
                Encodes the specified input stream into the specified output stream.
            </summary>
            <param name="inputStream">
                The input stream to encode.
            </param>
            <param name="outputStream">
                The output stream for encoding.
            </param>
            <param name="dispose">
                <see langword="true"/> to release all resources used by the input and
                output <see cref="T:System.IO.Stream"/>; otherwise, <see langword="false"/>.
            </param>
            <exception cref="T:System.NotSupportedException">
                <see cref="M:SilDev.Crypto.BinaryToText.EncodeStream(System.IO.Stream,System.IO.Stream,System.Int32,System.Boolean)"/> method has no
                functionality.
            </exception>
        </member>
        <member name="M:SilDev.Crypto.BinaryToText.EncodeBytes(System.Byte[],System.Int32)">
            <summary>
                Encodes the specified sequence of bytes.
            </summary>
            <param name="bytes">
                The sequence of bytes to encode.
            </param>
            <param name="lineLength">
                The length of lines.
            </param>
        </member>
        <member name="M:SilDev.Crypto.BinaryToText.EncodeString(System.String,System.Int32)">
            <summary>
                Encodes the specified string.
            </summary>
            <param name="text">
                The string to encode.
            </param>
            <param name="lineLength">
                The length of lines.
            </param>
        </member>
        <member name="M:SilDev.Crypto.BinaryToText.EncodeFile(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
                Encodes the specified source file to the specified destination file.
            </summary>
            <param name="srcPath">
                The source file to encode.
            </param>
            <param name="destPath">
                The destination file to create.
            </param>
            <param name="lineLength">
                The length of lines.
            </param>
            <param name="overwrite">
                <see langword="true"/> to allow an existing file to be overwritten;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Crypto.BinaryToText.EncodeFile(System.String,System.Int32)">
            <summary>
                Encodes the specified file.
            </summary>
            <param name="path">
                The full path of the file to encode.
            </param>
            <param name="lineLength">
                The length of lines.
            </param>
        </member>
        <member name="M:SilDev.Crypto.BinaryToText.DecodeStream(System.IO.Stream,System.IO.Stream,System.Boolean)">
            <summary>
                Decodes the specified input stream into the specified output stream.
            </summary>
            <param name="inputStream">
                The input stream to decode.
            </param>
            <param name="outputStream">
                The output stream for decoding.
            </param>
            <param name="dispose">
                <see langword="true"/> to release all resources used by the input and
                output <see cref="T:System.IO.Stream"/>; otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Crypto.BinaryToText.DecodeBytes(System.String)">
            <summary>
                Decodes the specified string into a sequence of bytes.
            </summary>
            <param name="code">
                The string to decode.
            </param>
        </member>
        <member name="M:SilDev.Crypto.BinaryToText.DecodeString(System.String)">
            <summary>
                Decodes the specified string into a string.
            </summary>
            <param name="code">
                The string to decode.
            </param>
        </member>
        <member name="M:SilDev.Crypto.BinaryToText.DecodeFile(System.String,System.String,System.Boolean)">
            <summary>
                Decodes the specified source file to the specified destination file.
            </summary>
            <param name="srcPath">
                The source file to encode.
            </param>
            <param name="destPath">
                The destination file to create.
            </param>
            <param name="overwrite">
                <see langword="true"/> to allow an existing file to be overwritten;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Crypto.BinaryToText.DecodeFile(System.String)">
            <summary>
                Decodes the specified string into a sequence of bytes containing a small
                file.
            </summary>
            <param name="code">
                The string to decode.
            </param>
        </member>
        <member name="M:SilDev.Crypto.BinaryToText.WriteLine(System.IO.Stream,System.Byte,System.Int32,System.Int32@)">
            <summary>
                Write the specified byte into the stream and add a line separator depending
                on the specified line length.
            </summary>
            <param name="stream">
                The stream in which to write the single byte.
            </param>
            <param name="singleByte">
                The single byte.
            </param>
            <param name="lineLength">
                The length of lines.
            </param>
            <param name="linePos">
                The position in the line.
            </param>
        </member>
        <member name="T:SilDev.Crypto.Base2">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Crypto.Base2"/> class.
            </summary>
        </member>
        <member name="M:SilDev.Crypto.Base2.EncodeStream(System.IO.Stream,System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
                Encodes the specified input stream into the specified output stream.
            </summary>
            <param name="inputStream">
                The input stream to encode.
            </param>
            <param name="outputStream">
                The output stream for encoding.
            </param>
            <param name="lineLength">
                The length of lines.
            </param>
            <param name="dispose">
                <see langword="true"/> to release all resources used by the input and
                output <see cref="T:System.IO.Stream"/>; otherwise, <see langword="false"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
                inputStream or outputStream is null.
            </exception>
            <exception cref="T:System.ArgumentException">
                inputStream or outputStream is invalid.
            </exception>
            <exception cref="T:System.NotSupportedException">
                inputStream is not readable -or- outputStream is not writable.
            </exception>
            <exception cref="T:System.IO.IOException">
                An I/O error occurred, such as the specified file cannot be found.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Methods were called after the inputStream or outputStream was closed.
            </exception>
        </member>
        <member name="M:SilDev.Crypto.Base2.DecodeStream(System.IO.Stream,System.IO.Stream,System.Boolean)">
            <summary>
                Decodes the specified input stream into the specified output stream.
            </summary>
            <param name="inputStream">
                The input stream to decode.
            </param>
            <param name="outputStream">
                The output stream for decoding.
            </param>
            <param name="dispose">
                <see langword="true"/> to release all resources used by the input and
                output <see cref="T:System.IO.Stream"/>; otherwise, <see langword="false"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
                inputStream or outputStream is null.
            </exception>
            <exception cref="T:System.ArgumentException">
                inputStream or outputStream is invalid.
            </exception>
            <exception cref="T:System.Text.DecoderFallbackException">
                inputStream contains invalid characters.
            </exception>
            <exception cref="T:System.NotSupportedException">
                inputStream is not readable -or- outputStream is not writable.
            </exception>
            <exception cref="T:System.IO.IOException">
                An I/O error occurred, such as the specified file cannot be found.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Methods were called after the inputStream or outputStream was closed.
            </exception>
        </member>
        <member name="T:SilDev.Crypto.Base8">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Crypto.Base8"/> class.
            </summary>
        </member>
        <member name="M:SilDev.Crypto.Base8.EncodeStream(System.IO.Stream,System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
                Encodes the specified input stream into the specified output stream.
            </summary>
            <param name="inputStream">
                The input stream to encode.
            </param>
            <param name="outputStream">
                The output stream for encoding.
            </param>
            <param name="lineLength">
                The length of lines.
            </param>
            <param name="dispose">
                <see langword="true"/> to release all resources used by the input and
                output <see cref="T:System.IO.Stream"/>; otherwise, <see langword="false"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
                inputStream or outputStream is null.
            </exception>
            <exception cref="T:System.ArgumentException">
                inputStream or outputStream is invalid.
            </exception>
            <exception cref="T:System.NotSupportedException">
                inputStream is not readable -or- outputStream is not writable.
            </exception>
            <exception cref="T:System.IO.IOException">
                An I/O error occurred, such as the specified file cannot be found.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Methods were called after the inputStream or outputStream was closed.
            </exception>
        </member>
        <member name="M:SilDev.Crypto.Base8.DecodeStream(System.IO.Stream,System.IO.Stream,System.Boolean)">
            <summary>
                Decodes the specified input stream into the specified output stream.
            </summary>
            <param name="inputStream">
                The input stream to decode.
            </param>
            <param name="outputStream">
                The output stream for decoding.
            </param>
            <param name="dispose">
                <see langword="true"/> to release all resources used by the input and
                output <see cref="T:System.IO.Stream"/>; otherwise, <see langword="false"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
                inputStream or outputStream is null.
            </exception>
            <exception cref="T:System.ArgumentException">
                inputStream or outputStream is invalid.
            </exception>
            <exception cref="T:System.Text.DecoderFallbackException">
                inputStream contains invalid characters.
            </exception>
            <exception cref="T:System.NotSupportedException">
                inputStream is not readable -or- outputStream is not writable.
            </exception>
            <exception cref="T:System.IO.IOException">
                An I/O error occurred, such as the specified file cannot be found.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Methods were called after the inputStream or outputStream was closed.
            </exception>
        </member>
        <member name="T:SilDev.Crypto.Base10">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Crypto.Base10"/> class.
            </summary>
        </member>
        <member name="M:SilDev.Crypto.Base10.EncodeStream(System.IO.Stream,System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
                Encodes the specified input stream into the specified output stream.
            </summary>
            <param name="inputStream">
                The input stream to encode.
            </param>
            <param name="outputStream">
                The output stream for encoding.
            </param>
            <param name="lineLength">
                The length of lines.
            </param>
            <param name="dispose">
                <see langword="true"/> to release all resources used by the input and
                output <see cref="T:System.IO.Stream"/>; otherwise, <see langword="false"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
                inputStream or outputStream is null.
            </exception>
            <exception cref="T:System.ArgumentException">
                inputStream or outputStream is invalid.
            </exception>
            <exception cref="T:System.NotSupportedException">
                inputStream is not readable -or- outputStream is not writable.
            </exception>
            <exception cref="T:System.IO.IOException">
                An I/O error occurred, such as the specified file cannot be found.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Methods were called after the inputStream or outputStream was closed.
            </exception>
        </member>
        <member name="M:SilDev.Crypto.Base10.DecodeStream(System.IO.Stream,System.IO.Stream,System.Boolean)">
            <summary>
                Decodes the specified input stream into the specified output stream.
            </summary>
            <param name="inputStream">
                The input stream to decode.
            </param>
            <param name="outputStream">
                The output stream for decoding.
            </param>
            <param name="dispose">
                <see langword="true"/> to release all resources used by the input and
                output <see cref="T:System.IO.Stream"/>; otherwise, <see langword="false"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
                inputStream or outputStream is null.
            </exception>
            <exception cref="T:System.ArgumentException">
                inputStream or outputStream is invalid.
            </exception>
            <exception cref="T:System.Text.DecoderFallbackException">
                inputStream contains invalid characters.
            </exception>
            <exception cref="T:System.NotSupportedException">
                inputStream is not readable -or- outputStream is not writable.
            </exception>
            <exception cref="T:System.IO.IOException">
                An I/O error occurred, such as the specified file cannot be found.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Methods were called after the inputStream or outputStream was closed.
            </exception>
        </member>
        <member name="T:SilDev.Crypto.Base16">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Crypto.Base16"/> class.
            </summary>
        </member>
        <member name="M:SilDev.Crypto.Base16.EncodeStream(System.IO.Stream,System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
                Encodes the specified input stream into the specified output stream.
            </summary>
            <param name="inputStream">
                The input stream to encode.
            </param>
            <param name="outputStream">
                The output stream for encoding.
            </param>
            <param name="lineLength">
                The length of lines.
            </param>
            <param name="dispose">
                <see langword="true"/> to release all resources used by the input and
                output <see cref="T:System.IO.Stream"/>; otherwise, <see langword="false"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
                inputStream or outputStream is null.
            </exception>
            <exception cref="T:System.ArgumentException">
                inputStream or outputStream is invalid.
            </exception>
            <exception cref="T:System.NotSupportedException">
                inputStream is not readable -or- outputStream is not writable.
            </exception>
            <exception cref="T:System.IO.IOException">
                An I/O error occurred, such as the specified file cannot be found.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Methods were called after the inputStream or outputStream was closed.
            </exception>
        </member>
        <member name="M:SilDev.Crypto.Base16.DecodeStream(System.IO.Stream,System.IO.Stream,System.Boolean)">
            <summary>
                Decodes the specified input stream into the specified output stream.
            </summary>
            <param name="inputStream">
                The input stream to decode.
            </param>
            <param name="outputStream">
                The output stream for decoding.
            </param>
            <param name="dispose">
                <see langword="true"/> to release all resources used by the input and
                output <see cref="T:System.IO.Stream"/>; otherwise, <see langword="false"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
                inputStream or outputStream is null.
            </exception>
            <exception cref="T:System.ArgumentException">
                inputStream or outputStream is invalid.
            </exception>
            <exception cref="T:System.Text.DecoderFallbackException">
                inputStream contains invalid characters.
            </exception>
            <exception cref="T:System.NotSupportedException">
                inputStream is not readable -or- outputStream is not writable.
            </exception>
            <exception cref="T:System.IO.IOException">
                An I/O error occurred, such as the specified file cannot be found.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Methods were called after the inputStream or outputStream was closed.
            </exception>
        </member>
        <member name="T:SilDev.Crypto.Base32">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Crypto.Base32"/> class.
            </summary>
        </member>
        <member name="M:SilDev.Crypto.Base32.EncodeStream(System.IO.Stream,System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
                Encodes the specified input stream into the specified output stream.
            </summary>
            <param name="inputStream">
                The input stream to encode.
            </param>
            <param name="outputStream">
                The output stream for encoding.
            </param>
            <param name="lineLength">
                The length of lines.
            </param>
            <param name="dispose">
                <see langword="true"/> to release all resources used by the input and
                output <see cref="T:System.IO.Stream"/>; otherwise, <see langword="false"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
                inputStream or outputStream is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                inputStream is larger than 128 MB.
            </exception>
            <exception cref="T:System.ArgumentException">
                inputStream or outputStream is invalid.
            </exception>
            <exception cref="T:System.NotSupportedException">
                inputStream is not readable -or- outputStream is not writable.
            </exception>
            <exception cref="T:System.IO.IOException">
                An I/O error occurred, such as the specified file cannot be found.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Methods were called after the inputStream or outputStream was closed.
            </exception>
        </member>
        <member name="M:SilDev.Crypto.Base32.DecodeStream(System.IO.Stream,System.IO.Stream,System.Boolean)">
            <summary>
                Decodes the specified input stream into the specified output stream.
            </summary>
            <param name="inputStream">
                The input stream to decode.
            </param>
            <param name="outputStream">
                The output stream for decoding.
            </param>
            <param name="dispose">
                <see langword="true"/> to release all resources used by the input and
                output <see cref="T:System.IO.Stream"/>; otherwise, <see langword="false"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
                inputStream or outputStream is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                inputStream is larger than 128 MB.
            </exception>
            <exception cref="T:System.ArgumentException">
                inputStream or outputStream is invalid.
            </exception>
            <exception cref="T:System.Text.DecoderFallbackException">
                inputStream contains invalid characters.
            </exception>
            <exception cref="T:System.NotSupportedException">
                inputStream is not readable -or- outputStream is not writable.
            </exception>
            <exception cref="T:System.IO.IOException">
                An I/O error occurred, such as the specified file cannot be found.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Methods were called after the inputStream or outputStream was closed.
            </exception>
        </member>
        <member name="T:SilDev.Crypto.Base64">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Crypto.Base64"/> class.
            </summary>
        </member>
        <member name="M:SilDev.Crypto.Base64.EncodeStream(System.IO.Stream,System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
                Encodes the specified input stream into the specified output stream.
            </summary>
            <param name="inputStream">
                The input stream to encode.
            </param>
            <param name="outputStream">
                The output stream for encoding.
            </param>
            <param name="lineLength">
                The length of lines.
            </param>
            <param name="dispose">
                <see langword="true"/> to release all resources used by the input and
                output <see cref="T:System.IO.Stream"/>; otherwise, <see langword="false"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
                inputStream or outputStream is null.
            </exception>
            <exception cref="T:System.ArgumentException">
                inputStream or outputStream is invalid.
            </exception>
            <exception cref="T:System.NotSupportedException">
                inputStream is not readable -or- outputStream is not writable.
            </exception>
            <exception cref="T:System.IO.IOException">
                An I/O error occurred, such as the specified file cannot be found.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Methods were called after the inputStream or outputStream was closed.
            </exception>
        </member>
        <member name="M:SilDev.Crypto.Base64.DecodeStream(System.IO.Stream,System.IO.Stream,System.Boolean)">
            <summary>
                Decodes the specified input stream into the specified output stream.
            </summary>
            <param name="inputStream">
                The input stream to decode.
            </param>
            <param name="outputStream">
                The output stream for decoding.
            </param>
            <param name="dispose">
                <see langword="true"/> to release all resources used by the input and
                output <see cref="T:System.IO.Stream"/>; otherwise, <see langword="false"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
                inputStream or outputStream is null.
            </exception>
            <exception cref="T:System.ArgumentException">
                inputStream or outputStream is invalid.
            </exception>
            <exception cref="T:System.NotSupportedException">
                inputStream is not readable -or- outputStream is not writable.
            </exception>
            <exception cref="T:System.IO.IOException">
                An I/O error occurred, such as the specified file cannot be found.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Methods were called after the inputStream or outputStream was closed.
            </exception>
        </member>
        <member name="T:SilDev.Crypto.Base85">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Crypto.Base85"/> class.
            </summary>
        </member>
        <member name="M:SilDev.Crypto.Base85.EncodeStream(System.IO.Stream,System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
                Encodes the specified input stream into the specified output stream.
            </summary>
            <param name="inputStream">
                The input stream to encode.
            </param>
            <param name="outputStream">
                The output stream for encoding.
            </param>
            <param name="lineLength">
                The length of lines.
            </param>
            <param name="dispose">
                <see langword="true"/> to release all resources used by the input and
                output <see cref="T:System.IO.Stream"/>; otherwise, <see langword="false"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
                inputStream or outputStream is null.
            </exception>
            <exception cref="T:System.ArgumentException">
                inputStream or outputStream is invalid.
            </exception>
            <exception cref="T:System.NotSupportedException">
                inputStream is not readable -or- outputStream is not writable.
            </exception>
            <exception cref="T:System.IO.IOException">
                An I/O error occurred, such as the specified file cannot be found.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Methods were called after the inputStream or outputStream was closed.
            </exception>
        </member>
        <member name="M:SilDev.Crypto.Base85.DecodeStream(System.IO.Stream,System.IO.Stream,System.Boolean)">
            <summary>
                Decodes the specified input stream into the specified output stream.
            </summary>
            <param name="inputStream">
                The input stream to decode.
            </param>
            <param name="outputStream">
                The output stream for decoding.
            </param>
            <param name="dispose">
                <see langword="true"/> to release all resources used by the input and
                output <see cref="T:System.IO.Stream"/>; otherwise, <see langword="false"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
                inputStream or outputStream is null.
            </exception>
            <exception cref="T:System.Text.DecoderFallbackException">
                inputStream contains invalid characters.
            </exception>
            <exception cref="T:System.NotSupportedException">
                inputStream is not readable -or- outputStream is not writable.
            </exception>
            <exception cref="T:System.IO.IOException">
                An I/O error occurred, such as the specified file cannot be found.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Methods were called after the inputStream or outputStream was closed.
            </exception>
        </member>
        <member name="T:SilDev.Crypto.Base91">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Crypto.Base91"/> class.
            </summary>
        </member>
        <member name="M:SilDev.Crypto.Base91.EncodeStream(System.IO.Stream,System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
                Encodes the specified input stream into the specified output stream.
            </summary>
            <param name="inputStream">
                The input stream to encode.
            </param>
            <param name="outputStream">
                The output stream for encoding.
            </param>
            <param name="lineLength">
                The length of lines.
            </param>
            <param name="dispose">
                <see langword="true"/> to release all resources used by the input and
                output <see cref="T:System.IO.Stream"/>; otherwise, <see langword="false"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
                inputStream or outputStream is null.
            </exception>
            <exception cref="T:System.ArgumentException">
                inputStream or outputStream is invalid.
            </exception>
            <exception cref="T:System.NotSupportedException">
                inputStream is not readable -or- outputStream is not writable.
            </exception>
            <exception cref="T:System.IO.IOException">
                An I/O error occurred, such as the specified file cannot be found.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Methods were called after the inputStream or outputStream was closed.
            </exception>
        </member>
        <member name="M:SilDev.Crypto.Base91.DecodeStream(System.IO.Stream,System.IO.Stream,System.Boolean)">
            <summary>
                Decodes the specified input stream into the specified output stream.
            </summary>
            <param name="inputStream">
                The input stream to decode.
            </param>
            <param name="outputStream">
                The output stream for decoding.
            </param>
            <param name="dispose">
                <see langword="true"/> to release all resources used by the input and
                output <see cref="T:System.IO.Stream"/>; otherwise, <see langword="false"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
                inputStream or outputStream is null.
            </exception>
            <exception cref="T:System.Text.DecoderFallbackException">
                inputStream contains invalid characters.
            </exception>
            <exception cref="T:System.NotSupportedException">
                inputStream is not readable -or- outputStream is not writable.
            </exception>
            <exception cref="T:System.IO.IOException">
                An I/O error occurred, such as the specified file cannot be found.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Methods were called after the inputStream or outputStream was closed.
            </exception>
        </member>
        <member name="T:SilDev.Crypto.Checksum">
            <summary>
                Represents the base class from which all implementations of checksum
                encryption algorithms must derive.
            </summary>
        </member>
        <member name="P:SilDev.Crypto.Checksum.RawHash">
            <summary>
                Gets the computed hash code value.
            </summary>
        </member>
        <member name="P:SilDev.Crypto.Checksum.Hash">
            <summary>
                Gets the string representation of the computed hash code.
            </summary>
        </member>
        <member name="M:SilDev.Crypto.Checksum.Encrypt(System.IO.Stream)">
            <summary>
                Encrypts the specified stream.
            </summary>
            <param name="stream">
                The stream to encrypt.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Checksum.Encrypt(System.Byte[])">
            <summary>
                Encrypts the specified sequence of bytes.
            </summary>
            <param name="bytes">
                The sequence of bytes to encrypt.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Checksum.Encrypt(System.String)">
            <summary>
                Encrypts the specified string.
            </summary>
            <param name="text">
                The string to encrypt.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Checksum.EncryptFile(System.String)">
            <summary>
                Encrypts the specified file.
            </summary>
            <param name="path">
                The full path of the file to encrypt.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Checksum.Equals(SilDev.Crypto.Checksum)">
            <summary>
                Determines whether this instance have same values as the specified
                <see cref="T:SilDev.Crypto.Checksum"/> instance.
            </summary>
            <param name="other">
                The <see cref="T:SilDev.Crypto.Checksum"/> instance to compare.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Checksum.Equals(System.Object)">
            <summary>
                Determines whether this instance have same values as the specified
                <see cref="T:System.Object"/>.
            </summary>
            <param name="other">
                The  <see cref="T:System.Object"/> to compare.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Checksum.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:SilDev.Crypto.Checksum.ToString">
            <summary>
                Converts the <see cref="P:SilDev.Crypto.Checksum.RawHash"/> of this instance to its equivalent
                string representation.
            </summary>
        </member>
        <member name="M:SilDev.Crypto.Checksum.Encrypt``1(System.IO.Stream,``0)">
            <summary>
                Encrypts the specified stream with the specified
                <see cref="T:System.Security.Cryptography.HashAlgorithm"/>.
            </summary>
            <typeparam name="THashAlgorithm">
                The type of the algorithm.
            </typeparam>
            <param name="stream">
                The stream to encrypt.
            </param>
            <param name="algorithm">
                The algorithm to encrypt.
            </param>
            <exception cref="T:System.ArgumentNullException">
                algorithm is null.
            </exception>
        </member>
        <member name="M:SilDev.Crypto.Checksum.Encrypt``1(System.String,``0)">
            <summary>
                Encrypts the specified string with the specified
                <see cref="T:System.Security.Cryptography.HashAlgorithm"/>.
            </summary>
            <typeparam name="THashAlgorithm">
                The type of the algorithm.
            </typeparam>
            <param name="text">
                The string to encrypt.
            </param>
            <param name="algorithm">
                The algorithm to encrypt.
            </param>
            <exception cref="T:System.ArgumentNullException">
                algorithm is null.
            </exception>
        </member>
        <member name="M:SilDev.Crypto.Checksum.op_Equality(SilDev.Crypto.Checksum,SilDev.Crypto.Checksum)">
            <summary>
                Determines whether two specified <see cref="T:SilDev.Crypto.Checksum"/> instances have same
                values.
            </summary>
            <param name="left">
                The first <see cref="T:SilDev.Crypto.Checksum"/> instance to compare.
            </param>
            <param name="right">
                The second <see cref="T:SilDev.Crypto.Checksum"/> instance to compare.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Checksum.op_Inequality(SilDev.Crypto.Checksum,SilDev.Crypto.Checksum)">
            <summary>
                Determines whether two specified <see cref="T:SilDev.Crypto.Checksum"/> instances have
                different values.
            </summary>
            <param name="left">
                The first <see cref="T:SilDev.Crypto.Checksum"/> instance to compare.
            </param>
            <param name="right">
                The second <see cref="T:SilDev.Crypto.Checksum"/> instance to compare.
            </param>
        </member>
        <member name="T:SilDev.Crypto.Adler32">
            <summary>
                Provides functionality to compute Adler-32 hashes.
            </summary>
        </member>
        <member name="F:SilDev.Crypto.Adler32.HashLength">
            <summary>
                Gets the required hash length.
            </summary>
        </member>
        <member name="P:SilDev.Crypto.Adler32.RawHash">
            <summary>
                Gets the computed hash code value.
            </summary>
        </member>
        <member name="M:SilDev.Crypto.Adler32.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Crypto.Adler32"/> class.
            </summary>
        </member>
        <member name="M:SilDev.Crypto.Adler32.#ctor(System.IO.Stream)">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Crypto.Adler32"/> class and encrypts
                the specified stream.
            </summary>
            <param name="stream">
                The stream to encrypt.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Adler32.#ctor(System.Byte[])">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Crypto.Adler32"/> class and encrypts
                the specified sequence of bytes.
            </summary>
            <param name="bytes">
                The sequence of bytes to encrypt
            </param>
        </member>
        <member name="M:SilDev.Crypto.Adler32.#ctor(System.String,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Crypto.Adler32"/> class and encrypts
                the specified text or file.
            </summary>
            <param name="textOrFile">
                The text or file to encrypt
            </param>
            <param name="strIsFilePath">
                <see langword="true"/> if the specified value is a file path; otherwise,
                <see langword="false"/>
            </param>
        </member>
        <member name="M:SilDev.Crypto.Adler32.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Crypto.Adler32"/> class and encrypts
                the specified text.
            </summary>
            <param name="str">
                The text to encrypt
            </param>
        </member>
        <member name="M:SilDev.Crypto.Adler32.Encrypt(System.IO.Stream)">
            <summary>
                Encrypts the specified stream.
            </summary>
            <param name="stream">
                The stream to encrypt.
            </param>
            <exception cref="T:System.ArgumentNullException">
                stream is null.
            </exception>
            ReSharper disable ShiftExpressionResultEqualsZero
        </member>
        <member name="M:SilDev.Crypto.Adler32.Encrypt(System.String)">
            <summary>
                Encrypts the specified string.
            </summary>
            <param name="text">
                The string to encrypt.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Adler32.Equals(SilDev.Crypto.Checksum)">
            <summary>
                Determines whether this instance have same values as the specified
                <see cref="T:SilDev.Crypto.Checksum"/> instance.
            </summary>
            <param name="other">
                The <see cref="T:SilDev.Crypto.Checksum"/> instance to compare.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Adler32.ToString">
            <summary>
                Converts the <see cref="P:SilDev.Crypto.Adler32.RawHash"/> of this instance to its equivalent
                string representation.
            </summary>
        </member>
        <member name="T:SilDev.Crypto.Crc16">
            <summary>
                Provides functionality to compute Cyclic Redundancy Check (CRC-16) hashes.
            </summary>
        </member>
        <member name="F:SilDev.Crypto.Crc16.HashLength">
            <summary>
                Gets the required hash length.
            </summary>
        </member>
        <member name="P:SilDev.Crypto.Crc16.RawHash">
            <summary>
                Gets the raw data of computed hash.
            </summary>
        </member>
        <member name="M:SilDev.Crypto.Crc16.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Crypto.Crc16"/> class.
            </summary>
        </member>
        <member name="M:SilDev.Crypto.Crc16.#ctor(System.IO.Stream)">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Crypto.Crc16"/> class and encrypts
                the specified stream.
            </summary>
            <param name="stream">
                The stream to encrypt.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Crc16.#ctor(System.Byte[])">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Crypto.Crc16"/> class and encrypts
                the specified sequence of bytes.
            </summary>
            <param name="bytes">
                The sequence of bytes to encrypt
            </param>
        </member>
        <member name="M:SilDev.Crypto.Crc16.#ctor(System.String,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Crypto.Crc16"/> class and encrypts
                the specified text or file.
            </summary>
            <param name="textOrFile">
                The text or file to encrypt
            </param>
            <param name="strIsFilePath">
                <see langword="true"/> if the specified value is a file path; otherwise,
                <see langword="false"/>
            </param>
        </member>
        <member name="M:SilDev.Crypto.Crc16.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Crypto.Crc16"/> class and encrypts
                the specified text.
            </summary>
            <param name="str">
                The text to encrypt
            </param>
        </member>
        <member name="M:SilDev.Crypto.Crc16.Encrypt(System.IO.Stream)">
            <summary>
                Encrypts the specified stream.
            </summary>
            <param name="stream">
                The stream to encrypt.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Crc16.Encrypt(System.String)">
            <summary>
                Encrypts the specified string.
            </summary>
            <param name="text">
                The string to encrypt.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Crc16.Equals(SilDev.Crypto.Checksum)">
            <summary>
                Determines whether this instance have same values as the specified
                <see cref="T:SilDev.Crypto.Checksum"/> instance.
            </summary>
            <param name="other">
                The <see cref="T:SilDev.Crypto.Checksum"/> instance to compare.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Crc16.ToString">
            <summary>
                Converts the <see cref="P:SilDev.Crypto.Crc16.RawHash"/> of this instance to its equivalent
                string representation.
            </summary>
        </member>
        <member name="T:SilDev.Crypto.Crc32">
            <summary>
                Provides functionality to compute Cyclic Redundancy Check (CRC-32) hashes.
            </summary>
        </member>
        <member name="F:SilDev.Crypto.Crc32.HashLength">
            <summary>
                Gets the required hash length.
            </summary>
        </member>
        <member name="P:SilDev.Crypto.Crc32.RawHash">
            <summary>
                Gets the raw data of computed hash.
            </summary>
        </member>
        <member name="M:SilDev.Crypto.Crc32.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Crypto.Crc32"/> class.
            </summary>
        </member>
        <member name="M:SilDev.Crypto.Crc32.#ctor(System.IO.Stream)">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Crypto.Crc32"/> class and encrypts
                the specified stream.
            </summary>
            <param name="stream">
                The stream to encrypt.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Crc32.#ctor(System.Byte[])">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Crypto.Crc32"/> class and encrypts
                the specified sequence of bytes.
            </summary>
            <param name="bytes">
                The sequence of bytes to encrypt
            </param>
        </member>
        <member name="M:SilDev.Crypto.Crc32.#ctor(System.String,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Crypto.Crc32"/> class and encrypts
                the specified text or file.
            </summary>
            <param name="textOrFile">
                The text or file to encrypt
            </param>
            <param name="strIsFilePath">
                <see langword="true"/> if the specified value is a file path; otherwise,
                <see langword="false"/>
            </param>
        </member>
        <member name="M:SilDev.Crypto.Crc32.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Crypto.Crc32"/> class and encrypts
                the specified text.
            </summary>
            <param name="str">
                The text to encrypt
            </param>
        </member>
        <member name="M:SilDev.Crypto.Crc32.Encrypt(System.IO.Stream)">
            <summary>
                Encrypts the specified stream.
            </summary>
            <param name="stream">
                The stream to encrypt.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Crc32.Encrypt(System.String)">
            <summary>
                Encrypts the specified string.
            </summary>
            <param name="text">
                The string to encrypt.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Crc32.Equals(SilDev.Crypto.Checksum)">
            <summary>
                Determines whether this instance have same values as the specified
                <see cref="T:SilDev.Crypto.Checksum"/> instance.
            </summary>
            <param name="other">
                The <see cref="T:SilDev.Crypto.Checksum"/> instance to compare.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Crc32.ToString">
            <summary>
                Converts the <see cref="P:SilDev.Crypto.Crc32.RawHash"/> of this instance to its equivalent
                string representation.
            </summary>
        </member>
        <member name="T:SilDev.Crypto.Crc64">
            <summary>
                Provides functionality to compute Cyclic Redundancy Check (CRC-64) hashes.
            </summary>
        </member>
        <member name="F:SilDev.Crypto.Crc64.HashLength">
            <summary>
                Gets the required hash length.
            </summary>
        </member>
        <member name="P:SilDev.Crypto.Crc64.RawHash">
            <summary>
                Gets the raw data of computed hash.
            </summary>
        </member>
        <member name="M:SilDev.Crypto.Crc64.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Crypto.Crc64"/> class.
            </summary>
        </member>
        <member name="M:SilDev.Crypto.Crc64.#ctor(System.IO.Stream)">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Crypto.Crc64"/> class and encrypts
                the specified stream.
            </summary>
            <param name="stream">
                The stream to encrypt.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Crc64.#ctor(System.Byte[])">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Crypto.Crc64"/> class and encrypts
                the specified sequence of bytes.
            </summary>
            <param name="bytes">
                The sequence of bytes to encrypt
            </param>
        </member>
        <member name="M:SilDev.Crypto.Crc64.#ctor(System.String,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Crypto.Crc64"/> class and encrypts
                the specified text or file.
            </summary>
            <param name="textOrFile">
                The text or file to encrypt
            </param>
            <param name="strIsFilePath">
                <see langword="true"/> if the specified value is a file path; otherwise,
                <see langword="false"/>
            </param>
        </member>
        <member name="M:SilDev.Crypto.Crc64.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Crypto.Crc64"/> class and encrypts
                the specified text.
            </summary>
            <param name="str">
                The text to encrypt
            </param>
        </member>
        <member name="M:SilDev.Crypto.Crc64.Encrypt(System.IO.Stream)">
            <summary>
                Encrypts the specified stream.
            </summary>
            <param name="stream">
                The stream to encrypt.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Crc64.Encrypt(System.String)">
            <summary>
                Encrypts the specified string.
            </summary>
            <param name="text">
                The string to encrypt.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Crc64.Equals(SilDev.Crypto.Checksum)">
            <summary>
                Determines whether this instance have same values as the specified
                <see cref="T:SilDev.Crypto.Checksum"/> instance.
            </summary>
            <param name="other">
                The <see cref="T:SilDev.Crypto.Checksum"/> instance to compare.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Crc64.ToString">
            <summary>
                Converts the <see cref="P:SilDev.Crypto.Crc64.RawHash"/> of this instance to its equivalent
                string representation.
            </summary>
        </member>
        <member name="T:SilDev.Crypto.Md5">
            <summary>
                Provides functionality to compute Message-Digest 5 (MD5) hashes.
            </summary>
        </member>
        <member name="F:SilDev.Crypto.Md5.HashLength">
            <summary>
                Gets the required hash length.
            </summary>
        </member>
        <member name="M:SilDev.Crypto.Md5.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Crypto.Md5"/> class.
            </summary>
        </member>
        <member name="M:SilDev.Crypto.Md5.#ctor(System.IO.Stream)">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Crypto.Md5"/> class and encrypts the
                specified stream.
            </summary>
            <param name="stream">
                The stream to encrypt.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Md5.#ctor(System.Byte[])">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Crypto.Md5"/> class and encrypts the
                specified sequence of bytes.
            </summary>
            <param name="bytes">
                The sequence of bytes to encrypt
            </param>
        </member>
        <member name="M:SilDev.Crypto.Md5.#ctor(System.String,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Crypto.Md5"/> class and encrypts the
                specified text or file.
            </summary>
            <param name="textOrFile">
                The text or file to encrypt
            </param>
            <param name="strIsFilePath">
                <see langword="true"/> if the specified value is a file path; otherwise,
                <see langword="false"/>
            </param>
        </member>
        <member name="M:SilDev.Crypto.Md5.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Crypto.Md5"/> class and encrypts the
                specified text.
            </summary>
            <param name="str">
                The text to encrypt
            </param>
        </member>
        <member name="M:SilDev.Crypto.Md5.Encrypt(System.IO.Stream)">
            <summary>
                Encrypts the specified stream.
            </summary>
            <param name="stream">
                The stream to encrypt.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Md5.Encrypt(System.String)">
            <summary>
                Encrypts the specified string.
            </summary>
            <param name="text">
                The string to encrypt.
            </param>
        </member>
        <member name="T:SilDev.Crypto.Sha1">
            <summary>
                Provides functionality to compute Secure Hash Algorithm 1 (SHA-1) hashes.
            </summary>
        </member>
        <member name="F:SilDev.Crypto.Sha1.HashLength">
            <summary>
                Gets the required hash length.
            </summary>
        </member>
        <member name="M:SilDev.Crypto.Sha1.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Crypto.Sha1"/> class.
            </summary>
        </member>
        <member name="M:SilDev.Crypto.Sha1.#ctor(System.IO.Stream)">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Crypto.Sha1"/> class and encrypts the
                specified stream.
            </summary>
            <param name="stream">
                The stream to encrypt.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Sha1.#ctor(System.Byte[])">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Crypto.Sha1"/> class and encrypts the
                specified sequence of bytes.
            </summary>
            <param name="bytes">
                The sequence of bytes to encrypt
            </param>
        </member>
        <member name="M:SilDev.Crypto.Sha1.#ctor(System.String,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Crypto.Sha1"/> class and encrypts the
                specified text or file.
            </summary>
            <param name="textOrFile">
                The text or file to encrypt
            </param>
            <param name="strIsFilePath">
                <see langword="true"/> if the specified value is a file path; otherwise,
                <see langword="false"/>
            </param>
        </member>
        <member name="M:SilDev.Crypto.Sha1.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Crypto.Sha1"/> class and encrypts the
                specified text.
            </summary>
            <param name="str">
                The text to encrypt
            </param>
        </member>
        <member name="M:SilDev.Crypto.Sha1.Encrypt(System.IO.Stream)">
            <summary>
                Encrypts the specified stream.
            </summary>
            <param name="stream">
                The stream to encrypt.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Sha1.Encrypt(System.String)">
            <summary>
                Encrypts the specified string.
            </summary>
            <param name="text">
                The string to encrypt.
            </param>
        </member>
        <member name="T:SilDev.Crypto.Sha256">
            <summary>
                Provides functionality to compute Secure Hash Algorithm 2 (SHA-256) hashes.
            </summary>
        </member>
        <member name="F:SilDev.Crypto.Sha256.HashLength">
            <summary>
                Gets the required hash length.
            </summary>
        </member>
        <member name="M:SilDev.Crypto.Sha256.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Crypto.Sha256"/> class.
            </summary>
        </member>
        <member name="M:SilDev.Crypto.Sha256.#ctor(System.IO.Stream)">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Crypto.Sha256"/> class and encrypts
                the specified stream.
            </summary>
            <param name="stream">
                The stream to encrypt.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Sha256.#ctor(System.Byte[])">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Crypto.Sha256"/> class and encrypts
                the specified sequence of bytes.
            </summary>
            <param name="bytes">
                The sequence of bytes to encrypt
            </param>
        </member>
        <member name="M:SilDev.Crypto.Sha256.#ctor(System.String,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Crypto.Sha256"/> class and encrypts
                the specified text or file.
            </summary>
            <param name="textOrFile">
                The text or file to encrypt
            </param>
            <param name="strIsFilePath">
                <see langword="true"/> if the specified value is a file path; otherwise,
                <see langword="false"/>
            </param>
        </member>
        <member name="M:SilDev.Crypto.Sha256.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Crypto.Sha256"/> class and encrypts
                the specified text.
            </summary>
            <param name="str">
                The text to encrypt
            </param>
        </member>
        <member name="M:SilDev.Crypto.Sha256.Encrypt(System.IO.Stream)">
            <summary>
                Encrypts the specified stream.
            </summary>
            <param name="stream">
                The stream to encrypt.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Sha256.Encrypt(System.String)">
            <summary>
                Encrypts the specified string.
            </summary>
            <param name="text">
                The string to encrypt.
            </param>
        </member>
        <member name="T:SilDev.Crypto.Sha384">
            <summary>
                Provides functionality to compute Secure Hash Algorithm 2 (SHA-384) hashes.
            </summary>
        </member>
        <member name="F:SilDev.Crypto.Sha384.HashLength">
            <summary>
                Gets the required hash length.
            </summary>
        </member>
        <member name="M:SilDev.Crypto.Sha384.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Crypto.Sha384"/> class.
            </summary>
        </member>
        <member name="M:SilDev.Crypto.Sha384.#ctor(System.IO.Stream)">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Crypto.Sha384"/> class and encrypts
                the specified stream.
            </summary>
            <param name="stream">
                The stream to encrypt.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Sha384.#ctor(System.Byte[])">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Crypto.Sha384"/> class and encrypts
                the specified sequence of bytes.
            </summary>
            <param name="bytes">
                The sequence of bytes to encrypt
            </param>
        </member>
        <member name="M:SilDev.Crypto.Sha384.#ctor(System.String,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Crypto.Sha384"/> class and encrypts
                the specified text or file.
            </summary>
            <param name="textOrFile">
                The text or file to encrypt
            </param>
            <param name="strIsFilePath">
                <see langword="true"/> if the specified value is a file path; otherwise,
                <see langword="false"/>
            </param>
        </member>
        <member name="M:SilDev.Crypto.Sha384.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Crypto.Sha384"/> class and encrypts
                the specified text.
            </summary>
            <param name="str">
                The text to encrypt
            </param>
        </member>
        <member name="M:SilDev.Crypto.Sha384.Encrypt(System.IO.Stream)">
            <summary>
                Encrypts the specified stream.
            </summary>
            <param name="stream">
                The stream to encrypt.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Sha384.Encrypt(System.String)">
            <summary>
                Encrypts the specified string.
            </summary>
            <param name="text">
                The string to encrypt.
            </param>
        </member>
        <member name="T:SilDev.Crypto.Sha512">
            <summary>
                Provides functionality to compute Secure Hash Algorithm 2 (SHA-512) hashes.
            </summary>
        </member>
        <member name="F:SilDev.Crypto.Sha512.HashLength">
            <summary>
                Gets the required hash length.
            </summary>
        </member>
        <member name="M:SilDev.Crypto.Sha512.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Crypto.Sha512"/> class.
            </summary>
        </member>
        <member name="M:SilDev.Crypto.Sha512.#ctor(System.IO.Stream)">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Crypto.Sha512"/> class and encrypts
                the specified stream.
            </summary>
            <param name="stream">
                The stream to encrypt.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Sha512.#ctor(System.Byte[])">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Crypto.Sha512"/> class and encrypts
                the specified sequence of bytes.
            </summary>
            <param name="bytes">
                The sequence of bytes to encrypt
            </param>
        </member>
        <member name="M:SilDev.Crypto.Sha512.#ctor(System.String,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Crypto.Sha512"/> class and encrypts
                the specified text or file.
            </summary>
            <param name="textOrFile">
                The text or file to encrypt
            </param>
            <param name="strIsFilePath">
                <see langword="true"/> if the specified value is a file path; otherwise,
                <see langword="false"/>
            </param>
        </member>
        <member name="M:SilDev.Crypto.Sha512.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Crypto.Sha512"/> class and encrypts
                the specified text.
            </summary>
            <param name="str">
                The text to encrypt
            </param>
        </member>
        <member name="M:SilDev.Crypto.Sha512.Encrypt(System.IO.Stream)">
            <summary>
                Encrypts the specified stream.
            </summary>
            <param name="stream">
                The stream to encrypt.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Sha512.Encrypt(System.String)">
            <summary>
                Encrypts the specified string.
            </summary>
            <param name="text">
                The string to encrypt.
            </param>
        </member>
        <member name="T:SilDev.Desktop">
            <summary>
                Provides the functionality to manage desktop functions.
            </summary>
        </member>
        <member name="P:SilDev.Desktop.AccentColorOnTitlebar">
            <summary>
                Determines whether the accent color is shown for the system's title bars
                and borders.
            </summary>
        </member>
        <member name="P:SilDev.Desktop.AccentColorOnTaskbar">
            <summary>
                Determines whether the accent color is shown for the system's taskbar and
                start menu.
            </summary>
        </member>
        <member name="P:SilDev.Desktop.AppsUseDarkTheme">
            <summary>
                Determines whether dark mode is enabled for applications.
            </summary>
        </member>
        <member name="P:SilDev.Desktop.SystemUseDarkTheme">
            <summary>
                Determines whether dark mode is enabled for the system.
            </summary>
        </member>
        <member name="M:SilDev.Desktop.EnableDarkMode(System.IntPtr,System.Boolean)">
            <summary>
                Enables dark mode for the window under the specified handle.
                <para>
                    &#9888; Please note that this function is very limited and does not
                    work everywhere as expected.
                </para>
                <para>
                    &#9888; This feature requires at least the Windows 10 October 2018
                    Update.
                </para>
            </summary>
            <param name="hWnd">
                Handle to a window.
            </param>
            <param name="recursive">
                <see langword="true"/> to enable dark mode for child window handles;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Desktop.EnableMicaEffect(System.IntPtr)">
            <summary>
                Enables Mica effect mode for the window under the specified handle.
                <para>
                    &#9888; Please note that this function is very limited and does not
                    work everywhere as expected.
                </para>
                <para>
                    &#9888; This feature requires at least Windows 11.
                </para>
            </summary>
            <param name="hWnd">
                Handle to a window.
            </param>
        </member>
        <member name="M:SilDev.Desktop.RoundCorners(System.IntPtr,System.Boolean)">
            <summary>
                Rounds the corners of the window under the specified handle, if
                appropriate.
                <para>
                    &#9888; This feature requires at least Windows 11.
                </para>
            </summary>
            <param name="hWnd">
                Handle to a window.
            </param>
            <param name="small">
                Enables a smaller radius.
            </param>
        </member>
        <member name="M:SilDev.Desktop.GetDpi(System.IntPtr)">
            <summary>
                Gets the DPI from the specified handle to a window.
            </summary>
            <param name="hWnd">
                Handle to a window.
                <para>
                    If this value is set to default, the handle of the current desktop will
                    be used.
                </para>
            </param>
        </member>
        <member name="M:SilDev.Desktop.Refresh(System.Boolean,System.Boolean)">
            <summary>
                Refreshes the desktop.
            </summary>
            <param name="explorer">
                <see langword="true"/> to refresh all open explorer windows; otherwise,
                <see langword="false"/>.
            </param>
            <param name="extended">
                <see langword="true"/> to wait for a window to refresh, if there is no
                window available; otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Desktop.RefreshExplorer(System.Boolean)">
            <summary>
                Refreshes all open explorer windows.
            </summary>
            <param name="extended">
                <see langword="true"/> to wait for a window to refresh, if there is no
                window available; otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="T:SilDev.DirectoryEx">
            <summary>
                Provides static methods based on the <see cref="T:System.IO.Directory"/> class to
                perform directory operations.
            </summary>
        </member>
        <member name="M:SilDev.DirectoryEx.Exists(System.String)">
            <summary>
                Determines whether the specified directory exists.
            </summary>
            <param name="path">
                The directory to check.
            </param>
        </member>
        <member name="M:SilDev.DirectoryEx.MatchAttributes(System.IO.DirectoryInfo,System.IO.FileAttributes)">
            <summary>
                Determines whether the specified path specifies the specified attributes.
            </summary>
            <param name="dirInfo">
                The directory instance member that contains the directory to check.
            </param>
            <param name="attr">
                The attributes to match.
            </param>
        </member>
        <member name="M:SilDev.DirectoryEx.MatchAttributes(System.String,System.IO.FileAttributes)">
            <summary>
                Determines whether the specified path specifies the specified attributes.
            </summary>
            <param name="path">
                The directory to check.
            </param>
            <param name="attr">
                The attributes to match.
            </param>
        </member>
        <member name="M:SilDev.DirectoryEx.IsHidden(System.IO.DirectoryInfo)">
            <summary>
                Determines whether the specified directory is hidden.
            </summary>
            <param name="dirInfo">
                The directory instance member that contains the directory to check.
            </param>
        </member>
        <member name="M:SilDev.DirectoryEx.IsHidden(System.String)">
            <summary>
                Determines whether the specified directory is hidden.
            </summary>
            <param name="path">
                The file to check.
            </param>
        </member>
        <member name="M:SilDev.DirectoryEx.IsLink(System.IO.DirectoryInfo)">
            <summary>
                Determines whether the specified directory is specified as reparse point.
            </summary>
            <param name="dirInfo">
                The directory instance member that contains the directory to check.
            </param>
        </member>
        <member name="M:SilDev.DirectoryEx.IsLink(System.String)">
            <summary>
                Determines whether the specified directory is specified as reparse point.
            </summary>
            <param name="path">
                The directory to check.
            </param>
        </member>
        <member name="M:SilDev.DirectoryEx.SetAttributes(System.String,System.IO.FileAttributes)">
            <summary>
                Sets the specified attributes for the specified directory.
            </summary>
            <param name="path">
                The directory to change.
            </param>
            <param name="attr">
                The attributes to set.
            </param>
        </member>
        <member name="M:SilDev.DirectoryEx.EnumerateDirectories(System.String,System.String,System.IO.SearchOption)">
            <summary>
                Returns an enumerable collection of directory names that match a search
                pattern in a specified path, and optionally searches subdirectories.
            </summary>
            <param name="path">
                The relative or absolute path to the directory to search. This string is
                not case-sensitive.
            </param>
            <param name="searchPattern">
                The search string to match against the names of directories in path. This
                parameter can contain a combination of valid literal path and wildcard (*
                and ?) characters, but doesn't support regular expressions.
            </param>
            <param name="searchOption">
                One of the enumeration values that specifies whether the search operation
                should include only the current directory or should include all
                subdirectories.
            </param>
        </member>
        <member name="M:SilDev.DirectoryEx.EnumerateDirectories(System.String,System.IO.SearchOption)">
            <summary>
                Returns an enumerable collection of directory names that match a search
                pattern in a specified path, and optionally searches subdirectories.
            </summary>
            <param name="path">
                The relative or absolute path to the directory to search. This string is
                not case-sensitive.
            </param>
            <param name="searchOption">
                One of the enumeration values that specifies whether the search operation
                should include only the current directory or should include all
                subdirectories.
            </param>
        </member>
        <member name="M:SilDev.DirectoryEx.GetDirectories(System.String,System.String,System.IO.SearchOption)">
            <summary>
                Returns the names of the subdirectories (including their paths) that match
                the specified search pattern in the specified directory, and optionally
                searches subdirectories.
            </summary>
            <param name="path">
                The relative or absolute path to the directory to search. This string is
                not case-sensitive.
            </param>
            <param name="searchPattern">
                The search string to match against the names of directories in path. This
                parameter can contain a combination of valid literal path and wildcard (*
                and ?) characters, but doesn't support regular expressions.
            </param>
            <param name="searchOption">
                One of the enumeration values that specifies whether the search operation
                should include only the current directory or should include all
                subdirectories.
            </param>
        </member>
        <member name="M:SilDev.DirectoryEx.GetDirectories(System.String,System.IO.SearchOption)">
            <summary>
                Returns the names of the subdirectories (including their paths) that match
                the specified search pattern in the specified directory, and optionally
                searches subdirectories.
            </summary>
            <param name="path">
                The relative or absolute path to the directory to search. This string is
                not case-sensitive.
            </param>
            <param name="searchOption">
                One of the enumeration values that specifies whether the search operation
                should include only the current directory or should include all
                subdirectories.
            </param>
        </member>
        <member name="M:SilDev.DirectoryEx.EnumerateFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>
                Returns an enumerable collection of file names that match a search pattern
                in a specified path, and optionally searches subdirectories.
            </summary>
            <param name="path">
                The relative or absolute path to the directory to search. This string is
                not case-sensitive.
            </param>
            <param name="searchPattern">
                The search string to match against the names of files in path. This
                parameter can contain a combination of valid literal path and wildcard (*
                and ?) characters, but doesn't support regular expressions.
            </param>
            <param name="searchOption">
                One of the enumeration values that specifies whether the search operation
                should include only the current directory or should include all
                subdirectories.
            </param>
        </member>
        <member name="M:SilDev.DirectoryEx.EnumerateFiles(System.String,System.IO.SearchOption)">
            <summary>
                Returns an enumerable collection of file names that match a search pattern
                in a specified path, and optionally searches subdirectories.
            </summary>
            <param name="path">
                The relative or absolute path to the directory to search. This string is
                not case-sensitive.
            </param>
            <param name="searchOption">
                One of the enumeration values that specifies whether the search operation
                should include only the current directory or should include all
                subdirectories.
            </param>
        </member>
        <member name="M:SilDev.DirectoryEx.GetFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>
                Returns the names of files (including their paths) that match the specified
                search pattern in the specified directory, using a value to determine
                whether to search subdirectories.
            </summary>
            <param name="path">
                The relative or absolute path to the directory to search. This string is
                not case-sensitive.
            </param>
            <param name="searchPattern">
                The search string to match against the names of files in path. This
                parameter can contain a combination of valid literal path and wildcard (*
                and ?) characters, but doesn't support regular expressions.
            </param>
            <param name="searchOption">
                One of the enumeration values that specifies whether the search operation
                should include only the current directory or should include all
                subdirectories.
            </param>
        </member>
        <member name="M:SilDev.DirectoryEx.GetFiles(System.String,System.IO.SearchOption)">
            <summary>
                Returns the names of files (including their paths) that match the specified
                search pattern in the specified directory, using a value to determine
                whether to search subdirectories.
            </summary>
            <param name="path">
                The relative or absolute path to the directory to search. This string is
                not case-sensitive.
            </param>
            <param name="searchOption">
                One of the enumeration values that specifies whether the search operation
                should include only the current directory or should include all
                subdirectories.
            </param>
        </member>
        <member name="M:SilDev.DirectoryEx.Create(System.String)">
            <summary>
                Creates all directories and subdirectories in the specified path unless
                they already exist.
                <para>
                    &#9762; Please note that if the specified path leads to an existing
                    file, it will be deleted and a directory will be created in its place.
                </para>
            </summary>
            <param name="path">
                The directory to create.
            </param>
        </member>
        <member name="M:SilDev.DirectoryEx.CreateParent(System.String)">
            <summary>
                Creates all directories and subdirectories in the parent directory of the
                specified path unless they already exist.
            </summary>
            <param name="path">
                The path containing the directory to create.
            </param>
        </member>
        <member name="M:SilDev.DirectoryEx.Copy(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
                Copies an existing directory to a new location.
            </summary>
            <param name="srcDir">
                The directory to copy.
            </param>
            <param name="destDir">
                The fully qualified name of the destination directory.
            </param>
            <param name="subDirs">
                <see langword="true"/> to include subdirectories; otherwise,
                <see langword="false"/>.
            </param>
            <param name="overwrite">
                <see langword="true"/> to allow existing files to be overwritten;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.DirectoryEx.Copy(System.IO.DirectoryInfo,System.String,System.Boolean,System.Boolean)">
            <summary>
                Copies an existing directory to a new location.
            </summary>
            <param name="dirInfo">
                The directory instance member that contains the directory to copy.
            </param>
            <param name="destDir">
                The fully qualified name of the destination directory.
            </param>
            <param name="subDirs">
                <see langword="true"/> to include subdirectories; otherwise,
                <see langword="false"/>.
            </param>
            <param name="overwrite">
                <see langword="true"/> to allow existing files to be overwritten;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.DirectoryEx.Move(System.String,System.String,System.Boolean)">
            <summary>
                Copies an existing directory to a new location and deletes the source
                directory if this task has been completed successfully.
            </summary>
            <param name="srcDir">
                The directory to move.
            </param>
            <param name="destDir">
                The fully qualified name of the destination directory.
            </param>
            <param name="overwrite">
                <see langword="true"/> to allow existing files to be overwritten;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.DirectoryEx.Delete(System.String)">
            <summary>
                Deletes the specified directory, if it exists.
            </summary>
            <param name="path">
                The path of the directory to be deleted.
            </param>
            <exception cref="T:System.IO.IOException">
                See <see cref="M:System.IO.Directory.Delete(System.String,System.Boolean)"/>.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
                See <see cref="M:System.IO.Directory.Delete(System.String,System.Boolean)"/>.
            </exception>
        </member>
        <member name="M:SilDev.DirectoryEx.TryDelete(System.String)">
            <summary>
                Tries to delete the specified directory.
            </summary>
            <param name="path">
                The path of the directory to be deleted.
            </param>
        </member>
        <member name="M:SilDev.DirectoryEx.GetFullHashCode(System.IO.DirectoryInfo,System.Boolean)">
            <summary>
                Returns the hash code for the specified directory instance member.
            </summary>
            <param name="dirInfo">
                The directory instance member to get the hash code.
            </param>
            <param name="size">
                <see langword="true"/> to include the size of each file; otherwise,
                <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.DirectoryEx.GetFullHashCode(System.String,System.Boolean)">
            <summary>
                Returns the hash code for the specified directory instance member.
            </summary>
            <param name="path">
                The directory to get the hash code.
            </param>
            <param name="size">
                <see langword="true"/> to include the size of each file; otherwise,
                <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.DirectoryEx.GetFreeSpace(System.IO.DirectoryInfo)">
            <summary>
                Returns the total amount of free space available on the drive of the
                specified directory, in bytes.
            </summary>
            <param name="dirInfo">
                The directory instance member to check.
            </param>
        </member>
        <member name="M:SilDev.DirectoryEx.GetFreeSpace(System.String)">
            <summary>
                Returns the total amount of free space available on the drive of the
                specified directory, in bytes.
            </summary>
            <param name="path">
                The directory to check.
            </param>
        </member>
        <member name="M:SilDev.DirectoryEx.GetSize(System.IO.DirectoryInfo,System.IO.SearchOption)">
            <summary>
                Returns the size, in bytes, of the specified directory instance member.
            </summary>
            <param name="dirInfo">
                The directory instance member to get the size.
            </param>
            <param name="searchOption">
                One of the enumeration values that specifies whether the operation should
                include only the current directory or all subdirectories.
            </param>
        </member>
        <member name="M:SilDev.DirectoryEx.GetSize(System.String,System.IO.SearchOption)">
            <summary>
                Returns the size, in bytes, of the specified directory.
            </summary>
            <param name="path">
                The directory to get the size.
            </param>
            <param name="searchOption">
                One of the enumeration values that specifies whether the operation should
                include only the current directory or all subdirectories.
            </param>
        </member>
        <member name="M:SilDev.DirectoryEx.GetUniqueName(System.String,System.Int32)">
            <summary>
                Returns a unique name starting with a given prefix, followed by a hash of
                the specified length.
            </summary>
            <param name="prefix">
                This text is at the beginning of the name.
                <para>
                    Uppercase letters are converted to lowercase letters. Supported
                    characters are only from '0' to '9' and from 'a' to 'z' but can be
                    completely empty to omit the prefix.
                </para>
            </param>
            <param name="hashLen">
                The length of the hash. Valid values are 4 through 24.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                hashLen is not between 4 and 24.
            </exception>
            <exception cref="T:SilDev.ArgumentInvalidException">
                prefix contains invalid characters.
            </exception>
        </member>
        <member name="M:SilDev.DirectoryEx.GetUniqueName(System.Int32)">
            <summary>
                Returns a unique name starting with 'tmp' prefix, followed by a hash of the
                specified length.
            </summary>
            <param name="hashLen">
                The length of the hash. Valid values are 4 through 24.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                hashLen is not between 4 and 24.
            </exception>
        </member>
        <member name="M:SilDev.DirectoryEx.GetUniqueTempPath(System.String,System.Int32)">
            <summary>
                Returns the current user's temporary path in combination with unique name
                starting with a given prefix, followed by a hash of the specified length.
            </summary>
            <param name="prefix">
                This text is at the beginning of the name.
                <para>
                    Uppercase letters are converted to lowercase letters. Supported
                    characters are only from '0' to '9' and from 'a' to 'z' but can be
                    completely empty to omit the prefix.
                </para>
            </param>
            <param name="hashLen">
                The length of the hash. Valid values are 4 through 24.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                hashLen is not between 4 and 24.
            </exception>
            <exception cref="T:SilDev.ArgumentInvalidException">
                prefix contains invalid characters.
            </exception>
        </member>
        <member name="M:SilDev.DirectoryEx.GetUniqueTempPath(System.Int32)">
            <summary>
                Returns the current user's temporary path in combination with unique name
                starting with 'tmp' prefix, followed by a hash of the specified length.
            </summary>
            <param name="hashLen">
                The length of the hash. Valid values are 4 through 24.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                hashLen is not between 4 and 24.
            </exception>
        </member>
        <member name="M:SilDev.DirectoryEx.CreateShellLink(System.String,System.String,System.String,System.ValueTuple{System.String,System.Int32},System.Boolean)">
            <summary>
                Creates a link to the specified directory.
            </summary>
            <param name="targetPath">
                The directory to be linked.
            </param>
            <param name="linkPath">
                The fully qualified name of the new link.
            </param>
            <param name="startArgs">
                The arguments which applies when the link is started.
            </param>
            <param name="iconLocation">
                The icon resource path and resource identifier.
            </param>
            <param name="skipExists">
                <see langword="true"/> to skip existing shortcuts, even if the target path
                of the same; otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.DirectoryEx.CreateShellLink(System.String,System.String,System.String,System.Boolean)">
            <summary>
                Creates a link to the specified directory.
            </summary>
            <param name="targetPath">
                The directory to be linked.
            </param>
            <param name="linkPath">
                The fully qualified name of the new link.
            </param>
            <param name="startArgs">
                The arguments which applies when the link is started.
            </param>
            <param name="skipExists">
                <see langword="true"/> to skip existing shortcuts, even if the target path
                of the same; otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.DirectoryEx.CreateShellLink(System.String,System.String,System.Boolean)">
            <summary>
                Creates a link to the specified directory.
            </summary>
            <param name="targetPath">
                The directory to be linked.
            </param>
            <param name="linkPath">
                The fully qualified name of the new link.
            </param>
            <param name="skipExists">
                <see langword="true"/> to skip existing shortcuts, even if the target path
                of the same; otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.DirectoryEx.DestroyShellLink(System.String)">
            <summary>
                Removes a link of the specified directory.
            </summary>
            <param name="path">
                The shortcut to be removed.
            </param>
        </member>
        <member name="M:SilDev.DirectoryEx.GetShellLinkTarget(System.String)">
            <summary>
                Returns the target path of the specified link if the target is a directory.
            </summary>
            <param name="path">
                The link to get the target path.
            </param>
        </member>
        <member name="M:SilDev.DirectoryEx.CreateSymbolicLink(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
                Creates a symbolic link to the specified directory based on command prompt
                which allows a simple solution for the elevated execution of this order.
            </summary>
            <param name="linkPath">
                The fully qualified name of the new link.
            </param>
            <param name="srcDir">
                The directory to be linked.
            </param>
            <param name="backup">
                <see langword="true"/> to create an backup for existing files; otherwise,
                <see langword="false"/>.
            </param>
            <param name="elevated">
                <see langword="true"/> to create this link with highest privileges;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.DirectoryEx.DestroySymbolicLink(System.String,System.Boolean,System.Boolean)">
            <summary>
                Removes an symbolic link of the specified directory link based on command
                prompt which allows a simple solution for the elevated execution of this
                order.
            </summary>
            <param name="path">
                The link to be removed.
            </param>
            <param name="backup">
                <see langword="true"/> to restore found backups; otherwise,
                <see langword="false"/>.
            </param>
            <param name="elevated">
                <see langword="true"/> to remove this link with highest privileges;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.DirectoryEx.GetLocks(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Find out which processes have locked the specified directories.
            </summary>
            <param name="dirs">
                The directories to check.
            </param>
            <exception cref="T:System.ComponentModel.Win32Exception">
            </exception>
        </member>
        <member name="M:SilDev.DirectoryEx.GetLocks(System.IO.DirectoryInfo)">
            <summary>
                Returns processes that have locked files of this directory instance member.
            </summary>
            <param name="dirInfo">
                The directory instance member to check.
            </param>
        </member>
        <member name="T:SilDev.Elevation">
            <summary>
                Provides functionality for the user authorization on Windows.
            </summary>
        </member>
        <member name="P:SilDev.Elevation.CurrentPrincipal">
            <summary>
                Returns a <see cref="T:System.Security.Principal.WindowsPrincipal"/> object that represents the current
                Windows user.
            </summary>
        </member>
        <member name="P:SilDev.Elevation.IsAdministrator">
            <summary>
                Determines whether the current principal belongs to the Windows
                administrator user group.
            </summary>
        </member>
        <member name="M:SilDev.Elevation.WritableLocation(System.String)">
            <summary>
                Determines whether the current principal has enough privileges to write in
                the specified directory.
            </summary>
            <param name="path">
                The path to check.
            </param>
        </member>
        <member name="M:SilDev.Elevation.WritableLocation">
            <summary>
                Determines whether the current principal has enough privileges to write in
                the <see cref="P:SilDev.PathEx.LocalDir"/> directory.
            </summary>
        </member>
        <member name="M:SilDev.Elevation.RestartAsAdministrator(System.String)">
            <summary>
                Restarts the current process with highest privileges.
            </summary>
            <param name="cmdLineArgs">
                The command-line arguments to use when starting the application. Use null
                to use the current arguments, which are already in use.
            </param>
        </member>
        <member name="M:SilDev.Elevation.RestartAsNonAdministrator(System.String)">
            <summary>
                Restarts the current process with non-elevated privileges.
            </summary>
            <param name="cmdLineArgs">
                The command-line arguments to use when starting the application. Use null
                to use the current arguments, which are already in use.
            </param>
        </member>
        <member name="T:SilDev.EnumerableEx">
            <summary>
                Provides static methods based on the <see cref="T:System.Linq.Enumerable"/> class.
            </summary>
        </member>
        <member name="M:SilDev.EnumerableEx.AsArray``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Retrieve the array of this <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection or
                create it.
            </summary>
            <typeparam name="TSource">
                The type of the elements of source.
            </typeparam>
            <param name="source">
                The <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection.
            </param>
        </member>
        <member name="M:SilDev.EnumerableEx.AsString(System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
                Retrieve the string of this <see cref="T:System.Collections.Generic.IEnumerable`1"/> character
                collection or create it.
            </summary>
            <param name="source">
                The <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection.
            </param>
        </member>
        <member name="M:SilDev.EnumerableEx.Range``1(``0,``0)">
            <summary>
                Generates a sequence of elements within a specified range.
            </summary>
            <typeparam name="TSource">
                The type of the elements.
            </typeparam>
            <param name="from">
                The first element in the sequence.
            </param>
            <param name="to">
                The last element in the sequence.
            </param>
        </member>
        <member name="M:SilDev.EnumerableEx.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
                Performs the specified <see cref="T:System.Action`1"/> on each element of the
                <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection.
            </summary>
            <typeparam name="TSource">
                The type of the elements of source.
            </typeparam>
            <param name="source">
                The <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection.
            </param>
            <param name="action">
                The <see cref="T:System.Action`1"/> delegate to perform on each element of the
                <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection.
            </param>
            <exception cref="T:System.ArgumentNullException">
                source or action is null.
            </exception>
        </member>
        <member name="M:SilDev.EnumerableEx.ForEachAsync``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Boolean)">
            <summary>
                Performs the specified <see cref="T:System.Action`1"/> asynchronously on each
                element of the <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection.
            </summary>
            <typeparam name="TSource">
                The type of the elements of source.
            </typeparam>
            <param name="source">
                The <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection.
            </param>
            <param name="action">
                The <see cref="T:System.Action`1"/> delegate to perform on each element of the
                <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection.
            </param>
            <param name="continueOnCapturedContext">
                <see langword="true"/> to attempt to marshal the continuation back to the
                original context captured; otherwise, <see langword="false"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
                source or action is null.
            </exception>
        </member>
        <member name="M:SilDev.EnumerableEx.ForEach``2(System.Collections.Generic.IDictionary{``0,``1},System.Action{``0,``1})">
            <summary>
                Performs the specified <see cref="T:System.Action`2"/> on each element of the
                <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <typeparam name="TKey">
                The type of keys in the dictionary.
            </typeparam>
            <typeparam name="TValue">
                The type of values in the dictionary.
            </typeparam>
            <param name="source">
                The <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </param>
            <param name="action">
                The <see cref="T:System.Action`2"/> delegate to perform on each element of the
                <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
                source or action is null.
            </exception>
        </member>
        <member name="M:SilDev.EnumerableEx.ForEachAsync``2(System.Collections.Generic.IDictionary{``0,``1},System.Action{``0,``1},System.Boolean)">
            <summary>
                Performs the specified <see cref="T:System.Action`2"/> asynchronously on each
                element of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <typeparam name="TKey">
                The type of keys in the dictionary.
            </typeparam>
            <typeparam name="TValue">
                The type of values in the dictionary.
            </typeparam>
            <param name="source">
                The <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </param>
            <param name="action">
                The <see cref="T:System.Action`2"/> delegate to perform on each element of the
                <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </param>
            <param name="continueOnCapturedContext">
                <see langword="true"/> to attempt to marshal the continuation back to the
                original context captured; otherwise, <see langword="false"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
                source or action is null.
            </exception>
        </member>
        <member name="M:SilDev.EnumerableEx.RecursiveSelect``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Int64)">
            <summary>
                Projects each element of a sequence into a new form.
            </summary>
            <typeparam name="TSource">
                The type of the elements of source.
            </typeparam>
            <param name="source">
                A sequence of values to invoke a transform function on.
            </param>
            <param name="selector">
                A transform function to apply to each element.
            </param>
            <param name="timelimit">
                The time limit in milliseconds.
            </param>
            <exception cref="T:System.ArgumentNullException">
                source or selector is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                The <see cref="T:System.Collections.Generic.Stack`1"/> is empty.
            </exception>
        </member>
        <member name="M:SilDev.EnumerableEx.Just``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Int32)">
            <summary>
                Returns a element in a sequence that satisfies a specified condition.
            </summary>
            <typeparam name="TSource">
                The type of the elements of source.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return an element from.
            </param>
            <param name="predicate">
                A function to test each element for a condition.
            </param>
            <param name="indicator">
                The indicator that determines which element is returned.
            </param>
            <exception cref="T:System.ArgumentNullException">
                source is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                The indicator value is negative.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                No element satisfies the condition in predicate. -or- The source sequence
                is empty.
            </exception>
        </member>
        <member name="M:SilDev.EnumerableEx.Just``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
                Returns a element in a sequence that satisfies a specified condition.
            </summary>
            <typeparam name="TSource">
                The type of the elements of source.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return an element from.
            </param>
            <param name="indicator">
                The indicator that determines which element is returned.
            </param>
            <exception cref="T:System.ArgumentNullException">
                source is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                The indicator value is negative.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                The source sequence is empty.
            </exception>
        </member>
        <member name="M:SilDev.EnumerableEx.JustOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Int32)">
            <summary>
                Returns a element in a sequence that satisfies a specified condition or a
                default value if no such element is found.
            </summary>
            <typeparam name="TSource">
                The type of the elements of source.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return an element from.
            </param>
            <param name="predicate">
                A function to test each element for a condition.
            </param>
            <param name="indicator">
                The indicator that determines which element is returned.
            </param>
            <exception cref="T:System.ArgumentNullException">
                source is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                The indicator value is negative.
            </exception>
        </member>
        <member name="M:SilDev.EnumerableEx.JustOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
                Returns a element in a sequence that satisfies a specified condition or a
                default value if no such element is found.
            </summary>
            <typeparam name="TSource">
                The type of the elements of source.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return an element from.
            </param>
            <param name="indicator">
                The indicator that determines which element is returned.
            </param>
            <exception cref="T:System.ArgumentNullException">
                source is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                The indicator value is negative.
            </exception>
        </member>
        <member name="M:SilDev.EnumerableEx.Second``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Returns the second element in a sequence that satisfies a specified
                condition.
            </summary>
            <typeparam name="TSource">
                The type of the elements of source.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return an element from.
            </param>
            <param name="predicate">
                A function to test each element for a condition.
            </param>
            <exception cref="T:System.ArgumentNullException">
                source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                The source sequence is empty.
            </exception>
        </member>
        <member name="M:SilDev.EnumerableEx.SecondOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Returns the second element in a sequence that satisfies a specified
                condition or a default value if no such element is found.
            </summary>
            <typeparam name="TSource">
                The type of the elements of source.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return an element from.
            </param>
            <param name="predicate">
                A function to test each element for a condition.
            </param>
            <exception cref="T:System.ArgumentNullException">
                source is null.
            </exception>
        </member>
        <member name="M:SilDev.EnumerableEx.Third``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Returns the third element in a sequence that satisfies a specified
                condition.
            </summary>
            <typeparam name="TSource">
                The type of the elements of source.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return an element from.
            </param>
            <param name="predicate">
                A function to test each element for a condition.
            </param>
            <exception cref="T:System.ArgumentNullException">
                source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                The source sequence is empty.
            </exception>
        </member>
        <member name="M:SilDev.EnumerableEx.ThirdOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Returns the third element in a sequence that satisfies a specified
                condition or a default value if no such element is found.
            </summary>
            <typeparam name="TSource">
                The type of the elements of source.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return an element from.
            </param>
            <param name="predicate">
                A function to test each element for a condition.
            </param>
            <exception cref="T:System.ArgumentNullException">
                source is null.
            </exception>
        </member>
        <member name="M:SilDev.EnumerableEx.Fourth``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Returns the fourth element in a sequence that satisfies a specified
                condition.
            </summary>
            <typeparam name="TSource">
                The type of the elements of source.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return an element from.
            </param>
            <param name="predicate">
                A function to test each element for a condition.
            </param>
            <exception cref="T:System.ArgumentNullException">
                source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                The source sequence is empty.
            </exception>
        </member>
        <member name="M:SilDev.EnumerableEx.FourthOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Returns the fourth element in a sequence that satisfies a specified
                condition or a default value if no such element is found.
            </summary>
            <typeparam name="TSource">
                The type of the elements of source.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return an element from.
            </param>
            <param name="predicate">
                A function to test each element for a condition.
            </param>
            <exception cref="T:System.ArgumentNullException">
                source is null.
            </exception>
        </member>
        <member name="M:SilDev.EnumerableEx.Fifth``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Returns the fifth element in a sequence that satisfies a specified
                condition.
            </summary>
            <typeparam name="TSource">
                The type of the elements of source.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return an element from.
            </param>
            <param name="predicate">
                A function to test each element for a condition.
            </param>
            <exception cref="T:System.ArgumentNullException">
                source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                The source sequence is empty.
            </exception>
        </member>
        <member name="M:SilDev.EnumerableEx.FifthOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Returns the fifth element in a sequence that satisfies a specified
                condition or a default value if no such element is found.
            </summary>
            <typeparam name="TSource">
                The type of the elements of source.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return an element from.
            </param>
            <param name="predicate">
                A function to test each element for a condition.
            </param>
            <exception cref="T:System.ArgumentNullException">
                source is null.
            </exception>
        </member>
        <member name="M:SilDev.EnumerableEx.Sixth``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Returns the sixth element in a sequence that satisfies a specified
                condition.
            </summary>
            <typeparam name="TSource">
                The type of the elements of source.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return an element from.
            </param>
            <param name="predicate">
                A function to test each element for a condition.
            </param>
            <exception cref="T:System.ArgumentNullException">
                source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                The source sequence is empty.
            </exception>
        </member>
        <member name="M:SilDev.EnumerableEx.SixthOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Returns the sixth element in a sequence that satisfies a specified
                condition or a default value if no such element is found.
            </summary>
            <typeparam name="TSource">
                The type of the elements of source.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return an element from.
            </param>
            <param name="predicate">
                A function to test each element for a condition.
            </param>
            <exception cref="T:System.ArgumentNullException">
                source is null.
            </exception>
        </member>
        <member name="M:SilDev.EnumerableEx.Seventh``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Returns the seventh element in a sequence that satisfies a specified
                condition.
            </summary>
            <typeparam name="TSource">
                The type of the elements of source.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return an element from.
            </param>
            <param name="predicate">
                A function to test each element for a condition.
            </param>
            <exception cref="T:System.ArgumentNullException">
                source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                The source sequence is empty.
            </exception>
        </member>
        <member name="M:SilDev.EnumerableEx.SeventhOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Returns the seventh element in a sequence that satisfies a specified
                condition or a default value if no such element is found.
            </summary>
            <typeparam name="TSource">
                The type of the elements of source.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return an element from.
            </param>
            <param name="predicate">
                A function to test each element for a condition.
            </param>
            <exception cref="T:System.ArgumentNullException">
                source is null.
            </exception>
        </member>
        <member name="M:SilDev.EnumerableEx.Eighth``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Returns the eighth element in a sequence that satisfies a specified
                condition.
            </summary>
            <typeparam name="TSource">
                The type of the elements of source.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return an element from.
            </param>
            <param name="predicate">
                A function to test each element for a condition.
            </param>
            <exception cref="T:System.ArgumentNullException">
                source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                The source sequence is empty.
            </exception>
        </member>
        <member name="M:SilDev.EnumerableEx.EighthOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Returns the eighth element in a sequence that satisfies a specified
                condition or a default value if no such element is found.
            </summary>
            <typeparam name="TSource">
                The type of the elements of source.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return an element from.
            </param>
            <param name="predicate">
                A function to test each element for a condition.
            </param>
            <exception cref="T:System.ArgumentNullException">
                source is null.
            </exception>
        </member>
        <member name="M:SilDev.EnumerableEx.Ninth``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Returns the ninth element in a sequence that satisfies a specified
                condition.
            </summary>
            <typeparam name="TSource">
                The type of the elements of source.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return an element from.
            </param>
            <param name="predicate">
                A function to test each element for a condition.
            </param>
            <exception cref="T:System.ArgumentNullException">
                source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                The source sequence is empty.
            </exception>
        </member>
        <member name="M:SilDev.EnumerableEx.NinthOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Returns the ninth element in a sequence that satisfies a specified
                condition or a default value if no such element is found.
            </summary>
            <typeparam name="TSource">
                The type of the elements of source.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return an element from.
            </param>
            <param name="predicate">
                A function to test each element for a condition.
            </param>
            <exception cref="T:System.ArgumentNullException">
                source is null.
            </exception>
        </member>
        <member name="M:SilDev.EnumerableEx.Tenth``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Returns the tenth element in a sequence that satisfies a specified
                condition.
            </summary>
            <typeparam name="TSource">
                The type of the elements of source.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return an element from.
            </param>
            <param name="predicate">
                A function to test each element for a condition.
            </param>
            <exception cref="T:System.ArgumentNullException">
                source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                The source sequence is empty.
            </exception>
        </member>
        <member name="M:SilDev.EnumerableEx.TenthOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Returns the tenth element in a sequence that satisfies a specified
                condition or a default value if no such element is found.
            </summary>
            <typeparam name="TSource">
                The type of the elements of source.
            </typeparam>
            <param name="source">
                An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return an element from.
            </param>
            <param name="predicate">
                A function to test each element for a condition.
            </param>
            <exception cref="T:System.ArgumentNullException">
                source is null.
            </exception>
        </member>
        <member name="M:SilDev.EnumerableEx.Join(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
                Concatenates the members of a constructed <see cref="T:System.Collections.Generic.IEnumerable`1"/>
                collection of type <see cref="T:System.String"/>, using the specified separator
                between each number.
            </summary>
            <param name="values">
                An array that contains the elements to concatenate.
            </param>
            <param name="separator">
                The string to use as a separator.
            </param>
        </member>
        <member name="M:SilDev.EnumerableEx.Join(System.Collections.Generic.IEnumerable{System.String},System.Char)">
            <summary>
                Concatenates the members of a constructed <see cref="T:System.Collections.Generic.IEnumerable`1"/>
                collection of type <see cref="T:System.String"/>, using the specified separator
                between each number.
            </summary>
            <param name="values">
                An array that contains the elements to concatenate.
            </param>
            <param name="separator">
                The character to use as a separator.
            </param>
        </member>
        <member name="M:SilDev.EnumerableEx.TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
                Returns a specified number of contiguous elements from the end of a
                sequence.
            </summary>
            <typeparam name="TSource">
                The type of the elements of source.
            </typeparam>
            <param name="source">
                The sequence to return elements from.
            </param>
            <param name="count">
                The number of elements to return.
            </param>
            <exception cref="T:System.ArgumentNullException">
                source is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                The count value is negative.
            </exception>
        </member>
        <member name="T:SilDev.EnvironmentEx">
            <summary>
                Provides static methods based on the <see cref="T:System.Environment"/> class to
                provide information about the current environment.
            </summary>
        </member>
        <member name="P:SilDev.EnvironmentEx.MachineId">
            <summary>
                Gets a unique system identification number.
            </summary>
        </member>
        <member name="P:SilDev.EnvironmentEx.OperatingSystemVersion">
            <summary>
                Gets a <see cref="P:System.Environment.OSVersion"/> version object with support for
                Windows 11 and later.
            </summary>
        </member>
        <member name="P:SilDev.EnvironmentEx.Version">
            <summary>
                Gets a <see cref="T:System.Version"/> object that describes the exact major,
                minor, build and revision numbers of the common language runtime.
            </summary>
        </member>
        <member name="M:SilDev.EnvironmentEx.IsAtLeastWindows(System.Int32,System.Int32)">
            <summary>
                Determines whether the current Windows version corresponds to the specified
                values or is newer.
            </summary>
            <param name="major">
                The minimum major version number.
            </param>
            <param name="build">
                The minimum build version number.
            </param>
        </member>
        <member name="M:SilDev.EnvironmentEx.CommandLineArgs(System.Boolean,System.Int32,System.Boolean)">
            <summary>
                Provides filtering and sorting options, and returns a string
                <see cref="T:System.Collections.Generic.List`1"/> containing the command-line arguments for the current
                process.
            </summary>
            <param name="sort">
                <see langword="true"/> to sort the arguments ascended with the rules of
                <see cref="M:SilDev.AlphaNumericComparer.#ctor(System.Boolean)"/> before returning the arguments;
                otherwise, <see langword="false"/>.
            </param>
            <param name="skip">
                The number of arguments to skip before returning the remaining arguments.
            </param>
            <param name="quotes">
                <see langword="true"/> to store the arguments in quotation marks which
                containing spaces; otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.EnvironmentEx.CommandLineArgs(System.Boolean,System.Boolean)">
            <summary>
                Provides filtering and sorting options, and returns a string
                <see cref="T:System.Collections.Generic.List`1"/> containing the command-line arguments for the current
                process.
            </summary>
            <param name="sort">
                <see langword="true"/> to sort the arguments ascended with the rules of
                <see cref="M:SilDev.AlphaNumericComparer.#ctor(System.Boolean)"/> before returning the arguments;
                otherwise, <see langword="false"/>.
            </param>
            <param name="quotes">
                <see langword="true"/> to store the arguments in quotation marks which
                containing spaces; otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.EnvironmentEx.CommandLineArgs(System.Int32)">
            <summary>
                Provides filtering and sorting options, and returns a string
                <see cref="T:System.Collections.Generic.List`1"/> containing the command-line arguments for the current
                process.
            </summary>
            <param name="skip">
                The number of arguments to skip before returning the remaining arguments.
            </param>
        </member>
        <member name="M:SilDev.EnvironmentEx.CommandLine(System.Boolean,System.Int32,System.Boolean)">
            <summary>
                Provides filtering and sorting options, and returns a string containing the
                command-line arguments for the current process.
            </summary>
            <param name="sort">
                <see langword="true"/> to sort the arguments ascended with the rules of
                <see cref="M:SilDev.AlphaNumericComparer.#ctor(System.Boolean)"/> before returning the arguments;
                otherwise, <see langword="false"/>.
            </param>
            <param name="skip">
                The number of arguments to skip before returning the remaining arguments.
            </param>
            <param name="quotes">
                <see langword="true"/> to store the arguments in quotation marks which
                containing spaces; otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.EnvironmentEx.CommandLine(System.Boolean,System.Boolean)">
            <summary>
                Provides filtering and sorting options, and returns a string containing the
                command-line arguments for the current process.
            </summary>
            <param name="sort">
                <see langword="true"/> to sort the arguments ascended with the rules of
                <see cref="M:SilDev.AlphaNumericComparer.#ctor(System.Boolean)"/> before returning the arguments;
                otherwise, <see langword="false"/>.
            </param>
            <param name="quotes">
                <see langword="true"/> to store the arguments in quotation marks which
                containing spaces; otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.EnvironmentEx.CommandLine(System.Int32)">
            <summary>
                Provides filtering and sorting options, and returns a string containing the
                command-line arguments for the current process.
            </summary>
            <param name="skip">
                The number of arguments to skip before returning the remaining arguments.
            </param>
        </member>
        <member name="M:SilDev.EnvironmentEx.VariableFilter(System.String@,System.String@,System.Byte@)">
            <summary>
                Provides filter for special environment variables.
            </summary>
            <param name="variable">
                The name of the environment variable.
            </param>
            <param name="key">
                The key that specifies the directory separator.
            </param>
            <param name="num">
                The number that specifies the number of directory separators.
            </param>
        </member>
        <member name="M:SilDev.EnvironmentEx.GetVariableValue(System.String,System.Boolean)">
            <summary>
                Retrieves the value of an environment variable from the current process.
                <para>
                    Allows <see cref="T:System.Environment.SpecialFolder"/> names to get its
                    <see cref="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder)"/>
                    value and also supports the keyword "CurDir" to get the
                    <see cref="P:SilDev.PathEx.LocalDir"/> value.
                </para>
            </summary>
            <param name="variable">
                The name of the environment variable.
            </param>
            <param name="lower">
                <see langword="true"/> to convert the result to lowercase; otherwise,
                <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.EnvironmentEx.GetVariableFromPath(System.String,System.Boolean,System.Boolean)">
            <summary>
                Returns an environment variable if the specified path contains an
                environment variable or if elements of the specified path match a value of
                an environment variable.
            </summary>
            <param name="path">
                The path to check.
            </param>
            <param name="curDir">
                <see langword="true"/> to consider the <see cref="P:SilDev.PathEx.LocalDir"/> value;
                otherwise, <see langword="false"/>.
            </param>
            <param name="special">
                <see langword="true"/> to consider the
                <see cref="T:System.Environment.SpecialFolder"/> values; otherwise,
                <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.EnvironmentEx.GetVariableWithPath(System.String,System.Boolean,System.Boolean)">
            <summary>
                Converts the beginning of the specified path to an environment variable.
            </summary>
            <param name="path">
                The path to convert.
            </param>
            <param name="curDir">
                <see langword="true"/> to consider the <see cref="P:SilDev.PathEx.LocalDir"/> value;
                otherwise, <see langword="false"/>.
            </param>
            <param name="special">
                <see langword="true"/> to consider the
                <see cref="T:System.Environment.SpecialFolder"/> values; otherwise,
                <see langword="false"/>.
            </param>
        </member>
        <member name="T:SilDev.FileEx">
            <summary>
                Provides static methods based on the <see cref="T:System.IO.File"/> class to perform
                file operations.
            </summary>
        </member>
        <member name="M:SilDev.FileEx.Serialize``1(System.String,``0,System.Boolean,System.Boolean)">
            <summary>
                Creates a new file, writes the specified object graph into to the file, and
                then closes the file.
            </summary>
            <typeparam name="TSource">
                The type of the source.
            </typeparam>
            <param name="path">
                The file to create.
            </param>
            <param name="source">
                The object graph to write to the file.
            </param>
            <param name="compress">
                <see langword="true"/> to compress the file after serialization; otherwise,
                <see langword="false"/>.
            </param>
            <param name="overwrite">
                <see langword="true"/> to allow an existing file to be overwritten;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.FileEx.Deserialize``1(System.String,``0)">
            <summary>
                Deserializes the specified file into an object graph.
            </summary>
            <typeparam name="TResult">
                The type of the result.
            </typeparam>
            <param name="path">
                The file to deserialize.
            </param>
            <param name="defValue">
                The default value.
            </param>
        </member>
        <member name="M:SilDev.FileEx.Exists(System.String)">
            <summary>
                Determines whether the specified file exists.
            </summary>
            <param name="path">
                The file to check.
            </param>
        </member>
        <member name="M:SilDev.FileEx.MatchAttributes(System.IO.FileInfo,System.IO.FileAttributes)">
            <summary>
                Determines whether the specified path specifies the specified file
                attributes.
            </summary>
            <param name="fileInfo">
                The file instance member that contains the file to check.
            </param>
            <param name="attr">
                The attributes to match.
            </param>
        </member>
        <member name="M:SilDev.FileEx.MatchAttributes(System.String,System.IO.FileAttributes)">
            <summary>
                Determines whether the specified path specifies the specified file
                attributes.
            </summary>
            <param name="path">
                The file or directory to check.
            </param>
            <param name="attr">
                The attributes to match.
            </param>
        </member>
        <member name="M:SilDev.FileEx.IsHidden(System.IO.FileInfo)">
            <summary>
                Determines whether the specified file is hidden.
            </summary>
            <param name="fileInfo">
                The file instance member that contains the file to check.
            </param>
        </member>
        <member name="M:SilDev.FileEx.IsHidden(System.String)">
            <summary>
                Determines whether the specified file is hidden.
            </summary>
            <param name="path">
                The file to check.
            </param>
        </member>
        <member name="M:SilDev.FileEx.IsLink(System.IO.FileInfo)">
            <summary>
                Determines whether the specified file is specified as reparse point.
            </summary>
            <param name="fileInfo">
                The file instance member that contains the file to check.
            </param>
        </member>
        <member name="M:SilDev.FileEx.IsLink(System.String)">
            <summary>
                Determines whether the specified file is specified as reparse point.
            </summary>
            <param name="path">
                The file to check.
            </param>
        </member>
        <member name="M:SilDev.FileEx.SetAttributes(System.String,System.IO.FileAttributes)">
            <summary>
                Sets the specified attributes for the specified file.
            </summary>
            <param name="file">
                The file to change.
            </param>
            <param name="attr">
                The attributes to set.
            </param>
        </member>
        <member name="M:SilDev.FileEx.ContentIsEqual(System.IO.FileInfo,System.IO.FileInfo)">
            <summary>
                Opens two files, reads the contents of the files in a byte array buffer to
                compare whether the specified files are equal.
            </summary>
            <param name="fileInfo">
                The first file to compare.
            </param>
            <param name="otherFileInfo">
                The second file to compare.
            </param>
        </member>
        <member name="M:SilDev.FileEx.ContentIsEqual(System.String,System.String)">
            <summary>
                Opens two files, reads the contents of the files in a byte array buffer to
                compare whether the specified files are equal.
            </summary>
            <param name="firstFile">
                The first file to compare.
            </param>
            <param name="secondFile">
                The second file to compare.
            </param>
            <exception cref="T:SilDev.ArgumentInvalidException">
                firstFile or secondFile is invalid.
            </exception>
        </member>
        <member name="M:SilDev.FileEx.ReadAllBytes(System.String)">
            <summary>
                Opens a binary file, reads the contents of the file into a byte array, and
                then closes the file.
            </summary>
            <param name="path">
                The file to open for reading.
            </param>
        </member>
        <member name="M:SilDev.FileEx.ReadAllLines(System.String,System.Text.Encoding)">
            <summary>
                Opens a file, reads all lines of the file with the specified encoding, and
                then closes the file.
            </summary>
            <param name="path">
                The file to open for reading.
            </param>
            <param name="encoding">
                The encoding applied to the contents of the file.
            </param>
        </member>
        <member name="M:SilDev.FileEx.ReadAllText(System.String,System.Text.Encoding)">
            <summary>
                Opens a file, reads all lines of the file with the specified encoding, and
                then closes the file.
            </summary>
            <param name="path">
                The file to open for reading.
            </param>
            <param name="encoding">
                The encoding applied to the contents of the file.
            </param>
        </member>
        <member name="M:SilDev.FileEx.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <summary>
                Appends lines to a file by using a specified encoding, and then closes the
                file. If the specified file does not exist, this method creates a file,
                writes the specified lines to the file, and then closes the file.
            </summary>
            <param name="path">
                The file to append the lines to. The file is created if it doesn't already
                exist.
            </param>
            <param name="contents">
                The lines to append to the file.
            </param>
            <param name="encoding">
                The character encoding to use.
            </param>
        </member>
        <member name="M:SilDev.FileEx.AppendAllText(System.String,System.String,System.Text.Encoding)">
            <summary>
                Appends the specified string to the file, creating the file if it does not
                already exist.
            </summary>
            <param name="path">
                The file to append the specified string to.
            </param>
            <param name="contents">
                The string to append to the file.
            </param>
            <param name="encoding">
                The character encoding to use.
            </param>
        </member>
        <member name="M:SilDev.FileEx.BinaryReplace(System.String,System.Byte[],System.Byte[],System.Boolean,System.Collections.Generic.IList{System.Collections.Generic.ISet{System.Int64}}@)">
            <summary>
                Replaces all occurrences of a specified sequence of bytes in the specified
                file with another sequence of bytes.
            </summary>
            <param name="file">
                The file to overwrite.
            </param>
            <param name="oldValue">
                The sequence of bytes to be replaced.
            </param>
            <param name="newValue">
                The sequence of bytes to replace all all occurrences of oldValue.
            </param>
            <param name="backup">
                <see langword="true"/> to create a backup; otherwise,
                <see langword="false"/>.
            </param>
            <param name="offsets">
                A list with all positions where bytes were overwritten.
            </param>
        </member>
        <member name="M:SilDev.FileEx.BinaryReplace(System.String,System.Byte[],System.Byte[],System.Boolean)">
            <summary>
                Replaces all occurrences of a specified sequence of bytes in the specified
                file with another sequence of bytes.
            </summary>
            <param name="file">
                The file to overwrite.
            </param>
            <param name="oldValue">
                The sequence of bytes to be replaced.
            </param>
            <param name="newValue">
                The sequence of bytes to replace all all occurrences of oldValue.
            </param>
            <param name="backup">
                <see langword="true"/> to create a backup; otherwise,
                <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.FileEx.WriteAllBytes(System.String,System.Collections.Generic.IEnumerable{System.Byte},System.Boolean)">
            <summary>
                Creates a new file, writes the specified byte array to the file, and then
                closes the file.
            </summary>
            <param name="path">
                The file to write to.
            </param>
            <param name="bytes">
                The bytes to write to the file.
            </param>
            <param name="overwrite">
                <see langword="true"/> to allow an existing file to be overwritten;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.FileEx.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding,System.Boolean)">
            <summary>
                Creates a new file by using the specified encoding, writes a collection of
                strings to the file, and then closes the file.
            </summary>
            <param name="path">
                The file to write to.
            </param>
            <param name="contents">
                The lines to write to the file.
            </param>
            <param name="encoding">
                The character encoding to use.
            </param>
            <param name="overwrite">
                <see langword="true"/> to allow an existing file to be overwritten;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.FileEx.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
                Creates a new file, writes a collection of strings to the file, and then
                closes the file.
            </summary>
            <param name="path">
                The file to write to.
            </param>
            <param name="contents">
                The lines to write to the file.
            </param>
            <param name="overwrite">
                <see langword="true"/> to allow an existing file to be overwritten;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.FileEx.WriteAllText(System.String,System.String,System.Text.Encoding,System.Boolean)">
            <summary>
                Creates a new file, writes the specified string to the file using the
                specified encoding, and then closes the file.
            </summary>
            <param name="path">
                The file to write to.
            </param>
            <param name="contents">
                The string to write to the file.
            </param>
            <param name="encoding">
                The encoding to apply to the string.
            </param>
            <param name="overwrite">
                <see langword="true"/> to allow an existing file to be overwritten;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.FileEx.WriteAllText(System.String,System.String,System.Boolean)">
            <summary>
                Creates a new file, writes the specified string to the file, and then
                closes the file.
            </summary>
            <param name="path">
                The file to write to.
            </param>
            <param name="contents">
                The string to write to the file.
            </param>
            <param name="overwrite">
                <see langword="true"/> to allow an existing file to be overwritten;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.FileEx.Create(System.String,System.Boolean)">
            <summary>
                Creates an empty file in the specified path.
            </summary>
            <param name="path">
                The path and name of the file to create.
            </param>
            <param name="overwrite">
                <see langword="true"/> to overwrite an existing file; otherwise,
                <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.FileEx.Copy(System.String,System.String,System.Boolean)">
            <summary>
                Copies an existing file to a new location.
            </summary>
            <param name="srcFile">
                The file to copy.
            </param>
            <param name="destFile">
                The fully qualified name of the destination file.
            </param>
            <param name="overwrite">
                <see langword="true"/> to allow an existing file to be overwritten;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.FileEx.Move(System.String,System.String,System.Boolean)">
            <summary>
                Copies an existing file to a new location and deletes the source file if
                this task has been completed successfully.
            </summary>
            <param name="srcFile">
                The file to move.
            </param>
            <param name="destFile">
                The fully qualified name of the destination file.
            </param>
            <param name="overwrite">
                <see langword="true"/> to allow an existing file to be overwritten;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.FileEx.Delete(System.String)">
            <summary>
                Deletes the specified file, if it exists.
            </summary>
            <param name="path">
                The path of the file to be deleted.
            </param>
            <exception cref="T:System.IO.IOException">
                See <see cref="M:System.IO.File.Delete(System.String)"/>.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
                See <see cref="M:System.IO.File.Delete(System.String)"/>.
            </exception>
        </member>
        <member name="M:SilDev.FileEx.TryDelete(System.String)">
            <summary>
                Tries to delete the specified file.
            </summary>
            <param name="path">
                The path of the file to be deleted.
            </param>
        </member>
        <member name="M:SilDev.FileEx.GetUniqueName(System.String,System.String,System.Int32)">
            <summary>
                Returns a unique name starting with a given prefix, followed by a hash of
                the specified length and a specified suffix.
            </summary>
            <param name="prefix">
                This text is at the beginning of the name.
                <para>
                    Uppercase letters are converted to lowercase letters. Supported
                    characters are only from '0' to '9' and from 'a' to 'z' but can be
                    completely empty to omit the prefix.
                </para>
            </param>
            <param name="suffix">
                This text is at the end of the name.
                <para>
                    If it does not begin with a dot, it will be added. Uppercase letters
                    are converted to lowercase letters. Supported characters are only from
                    '0' to '9' and from 'a' to 'z' but can be completely empty to omit the
                    suffix.
                </para>
            </param>
            <param name="hashLen">
                The length of the hash. Valid values are 4 through 24.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                hashLen is not between 4 and 24.
            </exception>
            <exception cref="T:SilDev.ArgumentInvalidException">
                prefix or suffix contains invalid characters.
            </exception>
        </member>
        <member name="M:SilDev.FileEx.GetUniqueName(System.Int32)">
            <summary>
                Returns a unique name starting with 'tmp' prefix, followed by a hash of the
                specified length and '.tmp' suffix.
            </summary>
            <param name="hashLen">
                The length of the hash. Valid values are 4 through 24.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                hashLen is not between 4 and 24.
            </exception>
        </member>
        <member name="M:SilDev.FileEx.GetUniqueTempPath(System.String,System.String,System.Int32)">
            <summary>
                Returns the current user's temporary path in combination with unique name
                starting with a given prefix, followed by a hash of the specified length
                and a specified suffix.
            </summary>
            <param name="prefix">
                This text is at the beginning of the name.
                <para>
                    Uppercase letters are converted to lowercase letters. Supported
                    characters are only from '0' to '9' and from 'a' to 'z' but can be
                    completely empty to omit the prefix.
                </para>
            </param>
            <param name="suffix">
                This text is at the end of the name.
                <para>
                    If it does not begin with a dot, it will be added. Uppercase letters
                    are converted to lowercase letters. Supported characters are only from
                    '0' to '9' and from 'a' to 'z' but can be completely empty to omit the
                    suffix.
                </para>
            </param>
            <param name="hashLen">
                The length of the hash. Valid values are 4 through 24.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                hashLen is not between 4 and 24.
            </exception>
            <exception cref="T:SilDev.ArgumentInvalidException">
                prefix or suffix contains invalid characters.
            </exception>
        </member>
        <member name="M:SilDev.FileEx.GetUniqueTempPath(System.Int32)">
            <summary>
                Returns the current user's temporary path in combination with unique name
                starting with 'tmp' prefix, followed by a hash of the specified length and
                '.tmp' suffix.
            </summary>
            <param name="hashLen">
                The length of the hash. Valid values are 4 through 24.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                hashLen is not between 4 and 24.
            </exception>
        </member>
        <member name="M:SilDev.FileEx.CreateShellLink(System.String,System.String,System.String,System.ValueTuple{System.String,System.Int32},System.Boolean)">
            <summary>
                Creates a link to the specified file.
            </summary>
            <param name="targetPath">
                The file to be linked.
            </param>
            <param name="linkPath">
                The fully qualified name of the new link.
            </param>
            <param name="startArgs">
                The arguments which applies when the link is started.
            </param>
            <param name="iconLocation">
                The icon resource path and resource identifier.
            </param>
            <param name="skipExists">
                <see langword="true"/> to skip existing shortcuts, even if the target path
                of the same; otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.FileEx.CreateShellLink(System.String,System.String,System.String,System.Boolean)">
            <summary>
                Creates a link to the specified file.
            </summary>
            <param name="targetPath">
                The file to be linked.
            </param>
            <param name="linkPath">
                The fully qualified name of the new link.
            </param>
            <param name="startArgs">
                The arguments which applies when the link is started.
            </param>
            <param name="skipExists">
                <see langword="true"/> to skip existing shortcuts, even if the target path
                of the same; otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.FileEx.CreateShellLink(System.String,System.String,System.Boolean)">
            <summary>
                Creates a link to the specified file.
            </summary>
            <param name="targetPath">
                The file to be linked.
            </param>
            <param name="linkPath">
                The fully qualified name of the new link.
            </param>
            <param name="skipExists">
                <see langword="true"/> to skip existing shortcuts, even if the target path
                of the same; otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.FileEx.DestroyShellLink(System.String)">
            <summary>
                Removes a link of the specified file.
            </summary>
            <param name="path">
                The shortcut to be removed.
            </param>
        </member>
        <member name="M:SilDev.FileEx.GetShellLinkTarget(System.String)">
            <summary>
                Returns the target path of the specified link if the target is a file.
            </summary>
            <param name="path">
                The link to get the target path.
            </param>
        </member>
        <member name="M:SilDev.FileEx.CreateSymbolicLink(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
                Creates a symbolic link to the specified file based on command prompt which
                allows a simple solution for the elevated execution of this order.
            </summary>
            <param name="linkPath">
                The file to be linked.
            </param>
            <param name="destFile">
                The fully qualified name of the new link.
            </param>
            <param name="backup">
                <see langword="true"/> to create an backup for existing files; otherwise,
                <see langword="false"/>.
            </param>
            <param name="elevated">
                <see langword="true"/> to create this link with highest privileges;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.FileEx.DestroySymbolicLink(System.String,System.Boolean,System.Boolean)">
            <summary>
                Removes an symbolic link of the specified file link based on command prompt
                which allows a simple solution for the elevated execution of this order.
            </summary>
            <param name="path">
                The link to be removed.
            </param>
            <param name="backup">
                <see langword="true"/> to restore found backups; otherwise,
                <see langword="false"/>.
            </param>
            <param name="elevated">
                <see langword="true"/> to remove this link with highest privileges;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.FileEx.GetLocks(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Returns processes that have locked the specified files.
            </summary>
            <param name="files">
                The files to check.
            </param>
            <exception cref="T:System.ComponentModel.Win32Exception">
            </exception>
        </member>
        <member name="M:SilDev.FileEx.GetLocks(System.IO.FileInfo)">
            <summary>
                Find out which processes have a lock on this file instance member.
            </summary>
            <param name="fileInfo">
                The file instance member to check.
            </param>
            <exception cref="T:System.ComponentModel.Win32Exception">
            </exception>
        </member>
        <member name="M:SilDev.FileEx.GetSignatureSubject(System.String,System.Boolean)">
            <summary>
                Gets the subject distinguished name from the certificate of the specified
                file.
            </summary>
            <param name="path">
                The path to the file to be checked.
            </param>
            <param name="multiLine">
                <see langword="true"/> if the return string should contain carriage
                returns; otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.FileEx.GetSignatureStatus(System.String)">
            <summary>
                Gets the certificate status of the specified file.
            </summary>
            <param name="path">
                The path to the file to be checked.
            </param>
        </member>
        <member name="M:SilDev.FileEx.GetVersion(System.IO.FileInfo)">
            <summary>
                Returns the highest version information associated with this file instance
                member.
            </summary>
            <param name="fileInfo">
                The file instance member to check.
            </param>
        </member>
        <member name="M:SilDev.FileEx.GetVersion(System.String)">
            <summary>
                Returns the highest version information associated with the specified file.
            </summary>
            <param name="path">
                The file to check.
            </param>
        </member>
        <member name="M:SilDev.FileEx.GetFileVersion(System.IO.FileInfo)">
            <summary>
                Returns the file version information associated with this file instance
                member.
            </summary>
            <param name="fileInfo">
                The file instance member to check.
            </param>
        </member>
        <member name="M:SilDev.FileEx.GetFileVersion(System.String)">
            <summary>
                Returns the file version information associated with the specified file.
            </summary>
            <param name="path">
                The file to check.
            </param>
        </member>
        <member name="M:SilDev.FileEx.GetProductVersion(System.IO.FileInfo)">
            <summary>
                Returns the product version information associated with this file instance
                member.
            </summary>
            <param name="fileInfo">
                The file instance member to check.
            </param>
        </member>
        <member name="M:SilDev.FileEx.GetProductVersion(System.String)">
            <summary>
                Returns the product version information associated with the specified file.
            </summary>
            <param name="path">
                The file to check.
            </param>
        </member>
        <member name="T:SilDev.Json">
            <summary>
                Provides basic functionality for the JSON format.
            </summary>
        </member>
        <member name="P:SilDev.Json.MaxLength">
            <summary>
                Gets or sets the maximum length of JSON strings that are accepted by the
                <see cref="T:System.Web.Script.Serialization.JavaScriptSerializer"/> object.
            </summary>
        </member>
        <member name="P:SilDev.Json.RecursionLimit">
            <summary>
                Gets or sets the limit for constraining the number of object levels to
                process.
            </summary>
        </member>
        <member name="M:SilDev.Json.Format(System.String)">
            <summary>
                Formats the specified string representation of a JSON document.
            </summary>
            <param name="source">
                The string representation of an JSON document to format.
            </param>
            <exception cref="T:System.ArgumentNullException">
                source is null.
            </exception>
        </member>
        <member name="M:SilDev.Json.FormatFile(System.String)">
            <summary>
                Formats the specified JSON file and overwrites it if necessary.
            </summary>
            <exception cref="T:System.ArgumentNullException">
                path is null.
            </exception>
            <exception cref="T:System.IO.IOException">
                path is invalid.
            </exception>
        </member>
        <member name="M:SilDev.Json.Serialize``1(``0,System.Boolean)">
            <summary>
                Serializes the specified object graph into a string representation of a
                JSON document.
            </summary>
            <typeparam name="TSource">
                The type of the source.
            </typeparam>
            <param name="source">
                The object graph to serialize.
            </param>
            <param name="format">
                <see langword="true"/> to format the string representation of the JSON
                document; otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Json.SerializeToFile``1(System.String,``0,System.Boolean,System.Boolean)">
            <summary>
                Creates a new JSON file, writes the specified object graph into to the JSON
                file, and then closes the file.
            </summary>
            <typeparam name="TSource">
                The type of the source.
            </typeparam>
            <param name="path">
                The JSON file to create.
            </param>
            <param name="source">
                The object graph to write to the file.
            </param>
            <param name="overwrite">
                <see langword="true"/> to allow an existing file to be overwritten;
                otherwise, <see langword="false"/>.
            </param>
            <param name="formatted">
                <see langword="true"/> to save the JSON document formatted; otherwise,
                <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Json.Deserialize``1(System.String,``0)">
            <summary>
                Deserializes a string representation of a JSON document into an object
                graph.
            </summary>
            <typeparam name="TResult">
                The type of the result.
            </typeparam>
            <param name="source">
                The string representation of an JSON document to deserialize.
            </param>
            <param name="defValue">
                The default value.
            </param>
        </member>
        <member name="M:SilDev.Json.DeserializeFile``1(System.String,``0)">
            <summary>
                Deserializes the specified JSON file into an object graph.
            </summary>
            <typeparam name="TResult">
                The type of the result.
            </typeparam>
            <param name="path">
                The JSON file to deserialize.
            </param>
            <param name="defValue">
                The default value.
            </param>
        </member>
        <member name="M:SilDev.Json.ReadAll(System.String)">
            <summary>
                Retrieves the full content of the specified JSON file.
            </summary>
            <param name="path">
                The full path of the file to read.
            </param>
        </member>
        <member name="M:SilDev.Json.Read(System.String,System.String[])">
            <summary>
                Retrieves a value from the specified key in a JSON file.
            </summary>
            <param name="path">
                The full path of the file to read.
            </param>
            <param name="keys">
                An array of keys to navigate to the exact position of the value.
            </param>
        </member>
        <member name="T:SilDev.VirtualKey">
            <summary>
                Provides enumerated values of Virtual-Key codes.
            </summary>
            ReSharper disable CommentTypo InconsistentNaming
        </member>
        <member name="F:SilDev.VirtualKey.LButton">
            <summary>
                The left mouse button.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.RButton">
            <summary>
                The right mouse button.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.Cancel">
            <summary>
                The CANCEL key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.MButton">
            <summary>
                The middle mouse button (three-button mouse).
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.XButton1">
            <summary>
                The first x mouse button (five-button mouse).
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.XButton2">
            <summary>
                The second x mouse button (five-button mouse).
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.Back">
            <summary>
                The BACKSPACE key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.Tab">
            <summary>
                The TAB key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.LineFeed">
            <summary>
                The LINEFEED key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.Clear">
            <summary>
                The CLEAR key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.Return">
            <summary>
                The RETURN key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.Enter">
            <summary>
                The ENTER key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.Shift">
            <summary>
                The SHIFT key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.Control">
            <summary>
                The CTRL key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.Alt">
            <summary>
                The ALT key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.Menu">
            <summary>
                The ALT key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.Pause">
            <summary>
                The PAUSE key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.CapsLock">
            <summary>
                The CAPS LOCK key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.Capital">
            <summary>
                The CAPS LOCK key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.KanaMode">
            <summary>
                The IME Kana mode key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.HangulMode">
            <summary>
                The IME Hangul mode key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.JunjaMode">
            <summary>
                The IME Junja mode key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.FinalMode">
            <summary>
                The IME final mode key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.HanjaMode">
            <summary>
                The IME Hanja mode key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.KanjiMode">
            <summary>
                The IME Kanji mode key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.Escape">
            <summary>
                The ESC key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.ImeConvert">
            <summary>
                The IME convert key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.ImeNonconvert">
            <summary>
                The IME non-convert key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.ImeAccept">
            <summary>
                The IME accept key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.ImeModeChange">
            <summary>
                The IME mode change key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.Space">
            <summary>
                The SPACEBAR key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.PageUp">
            <summary>
                The PAGE UP key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.Prior">
            <summary>
                The PAGE UP key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.PageDown">
            <summary>
                The PAGE DOWN key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.Next">
            <summary>
                The PAGE DOWN key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.End">
            <summary>
                The END key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.Home">
            <summary>
                The HOME key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.Left">
            <summary>
                The LEFT ARROW key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.Up">
            <summary>
                The UP ARROW key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.Right">
            <summary>
                The RIGHT ARROW key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.Down">
            <summary>
                The DOWN ARROW key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.Select">
            <summary>
                The SELECT key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.Print">
            <summary>
                The PRINT key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.Execute">
            <summary>
                The EXECUTE key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.PrintScreen">
            <summary>
                The PRINT SCREEN key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.Snapshot">
            <summary>
                The PRINT SCREEN key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.Insert">
            <summary>
                The INS key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.Delete">
            <summary>
                The DEL key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.Help">
            <summary>
                The HELP key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.D0">
            <summary>
                The 0 key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.D1">
            <summary>
                The 1 key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.D2">
            <summary>
                The 2 key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.D3">
            <summary>
                The 3 key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.D4">
            <summary>
                The 4 key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.D5">
            <summary>
                The 5 key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.D6">
            <summary>
                The 6 key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.D7">
            <summary>
                The 7 key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.D8">
            <summary>
                The 8 key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.D9">
            <summary>
                The 9 key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.A">
            <summary>
                The A key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.B">
            <summary>
                The B key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.C">
            <summary>
                The C key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.D">
            <summary>
                The D key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.E">
            <summary>
                The E key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.F">
            <summary>
                The F key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.G">
            <summary>
                The G key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.H">
            <summary>
                The H key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.I">
            <summary>
                The I key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.J">
            <summary>
                The J key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.K">
            <summary>
                The K key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.L">
            <summary>
                The L key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.M">
            <summary>
                The M key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.N">
            <summary>
                The N key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.O">
            <summary>
                The O key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.P">
            <summary>
                The P key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.Q">
            <summary>
                The Q key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.R">
            <summary>
                The R key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.S">
            <summary>
                The S key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.T">
            <summary>
                The T key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.U">
            <summary>
                The U key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.V">
            <summary>
                The V key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.W">
            <summary>
                The W key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.X">
            <summary>
                The X key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.Y">
            <summary>
                The Y key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.Z">
            <summary>
                The Z key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.LWin">
            <summary>
                The left Windows logo key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.RWin">
            <summary>
                The right Windows logo key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.Apps">
            <summary>
                The application key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.Sleep">
            <summary>
                The computer sleep key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.NumPad0">
            <summary>
                The 0 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.NumPad1">
            <summary>
                The 1 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.NumPad2">
            <summary>
                The 2 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.NumPad3">
            <summary>
                The 3 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.NumPad4">
            <summary>
                The 4 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.NumPad5">
            <summary>
                The 5 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.NumPad6">
            <summary>
                The 6 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.NumPad7">
            <summary>
                The 7 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.NumPad8">
            <summary>
                The 8 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.NumPad9">
            <summary>
                The 9 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.Multiply">
            <summary>
                The multiply key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.Add">
            <summary>
                The add key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.Separator">
            <summary>
                The separator key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.Subtract">
            <summary>
                The subtract key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.Decimal">
            <summary>
                The decimal key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.Divide">
            <summary>
                The divide key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.F1">
            <summary>
                The F1 key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.F2">
            <summary>
                The F2 key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.F3">
            <summary>
                The F3 key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.F4">
            <summary>
                The F4 key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.F5">
            <summary>
                The F5 key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.F6">
            <summary>
                The F6 key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.F7">
            <summary>
                The F7 key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.F8">
            <summary>
                The F8 key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.F9">
            <summary>
                The F9 key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.F10">
            <summary>
                The F10 key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.F11">
            <summary>
                The F11 key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.F12">
            <summary>
                The F12 key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.F13">
            <summary>
                The F13 key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.F14">
            <summary>
                The F14 key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.F15">
            <summary>
                The F15 key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.F16">
            <summary>
                The F16 key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.F17">
            <summary>
                The F17 key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.F18">
            <summary>
                The F18 key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.F19">
            <summary>
                The F19 key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.F20">
            <summary>
                The F20 key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.F21">
            <summary>
                The F21 key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.F22">
            <summary>
                The F22 key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.F23">
            <summary>
                The F23 key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.F24">
            <summary>
                The F24 key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.NumLock">
            <summary>
                The NUM LOCK key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.Scroll">
            <summary>
                The SCROLL LOCK key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.LShift">
            <summary>
                The left SHIFT key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.RShift">
            <summary>
                The right SHIFT key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.LControl">
            <summary>
                The left CTRL key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.RControl">
            <summary>
                The right CTRL key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.LAlt">
            <summary>
                The left ALT key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.LMenu">
            <summary>
                The left ALT key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.RAlt">
            <summary>
                The right ALT key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.RMenu">
            <summary>
                The right ALT key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.BrowserBack">
            <summary>
                The browser back key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.BrowserForward">
            <summary>
                The browser forward key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.BrowserRefresh">
            <summary>
                The browser refresh key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.BrowserStop">
            <summary>
                The browser stop key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.BrowserSearch">
            <summary>
                The browser search key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.BrowserFavorites">
            <summary>
                The browser favorites key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.BrowserHome">
            <summary>
                The browser home key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.VolumeMute">
            <summary>
                The volume mute key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.VolumeDown">
            <summary>
                The volume down key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.VolumeUp">
            <summary>
                The volume up key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.MediaNextTrack">
            <summary>
                The media next track key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.MediaPreviousTrack">
            <summary>
                The media previous track key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.MediaStop">
            <summary>
                The media Stop key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.MediaPlayPause">
            <summary>
                The media play pause key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.LaunchMail">
            <summary>
                The launch mail key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.SelectMedia">
            <summary>
                The select media key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.LaunchApplication1">
            <summary>
                The start application one key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.LaunchApplication2">
            <summary>
                The start application two key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.OemSemicolon">
            <summary>
                The OEM Semicolon key on a US standard keyboard.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.Oem1">
            <summary>
                The OEM 1 key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.Oemplus">
            <summary>
                The OEM plus key on any country/region keyboard.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.Oemcomma">
            <summary>
                The OEM comma key on any country/region keyboard.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.OemMinus">
            <summary>
                The OEM minus key on any country/region keyboard.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.OemPeriod">
            <summary>
                The OEM period key on any country/region keyboard.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.OemQuestion">
            <summary>
                The OEM question mark key on a US standard keyboard.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.Oem2">
            <summary>
                The OEM 2 key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.Oemtilde">
            <summary>
                The OEM tilde key on a US standard keyboard.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.Oem3">
            <summary>
                The OEM 3 key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.OemOpenBrackets">
            <summary>
                The OEM open bracket key on a US standard keyboard.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.Oem4">
            <summary>
                The OEM 4 key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.OemPipe">
            <summary>
                The OEM pipe key on a US standard keyboard.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.Oem5">
            <summary>
                The OEM 5 key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.OemCloseBrackets">
            <summary>
                The OEM close bracket key on a US standard keyboard.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.Oem6">
            <summary>
                The OEM 6 key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.OemQuotes">
            <summary>
                The OEM singled/double quote key on a US standard keyboard.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.Oem7">
            <summary>
                The OEM 7 key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.Oem8">
            <summary>
                The OEM 8 key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.OemBackslash">
            <summary>
                The OEM angle bracket or backslash key on the RT 102 key keyboard.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.Oem102">
            <summary>
                The OEM 102 key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.Process">
            <summary>
                The PROCESS KEY key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.Packet">
            <summary>
                Used to pass Unicode characters as if they were keystrokes. The Packet key
                value is the low word of a 32-bit virtual-key value used for non-keyboard
                input methods.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.Attn">
            <summary>
                The ATTN key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.Crsel">
            <summary>
                The CRSEL key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.Exsel">
            <summary>
                The EXSEL key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.EraseEof">
            <summary>
                The ERASE EOF key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.Play">
            <summary>
                The PLAY key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.Zoom">
            <summary>
                The ZOOM key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.Pa1">
            <summary>
                The PA1 key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKey.OemClear">
            <summary>
                The CLEAR key.
            </summary>
        </member>
        <member name="T:SilDev.VirtualKeyState">
            <summary>
                Provides enumerated values of Virtual-Key code states.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKeyState.KeyDown">
            <summary>
                Posted to the window with the keyboard focus when a non-system key is
                pressed.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKeyState.KeyUp">
            <summary>
                Posted to the window with the keyboard focus when a non-system key is
                released.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKeyState.SysKeyDown">
            <summary>
                Posted to the window with the keyboard focus when the user presses the F10
                key (which activates the menu bar) or holds down the ALT key and then
                presses another key.
            </summary>
        </member>
        <member name="F:SilDev.VirtualKeyState.SysKeyUp">
            <summary>
                Posted to the window with the keyboard focus when the user releases a key
                that was pressed while the ALT key was held down.
            </summary>
        </member>
        <member name="T:SilDev.InputDevice">
            <summary>
                Provides the functionality to send or detect key states.
            </summary>
        </member>
        <member name="M:SilDev.InputDevice.GetKey(System.UInt16)">
            <summary>
                Returns the <see cref="T:SilDev.VirtualKey"/> of the <see cref="T:System.UInt16"/>
                representation of a Virtual-Key code.
            </summary>
            <param name="key">
                The <see cref="T:SilDev.VirtualKey"/> value.
            </param>
        </member>
        <member name="M:SilDev.InputDevice.GetKey(System.String)">
            <summary>
                Returns the <see cref="T:SilDev.VirtualKey"/> of the <see cref="T:System.String"/>
                representation of a Virtual-Key code.
            </summary>
            <param name="key">
                The <see cref="T:System.String"/> representation of a Virtual-Key code.
            </param>
        </member>
        <member name="M:SilDev.InputDevice.GetKeyCode(SilDev.VirtualKey)">
            <summary>
                Returns the <see cref="T:System.UInt16"/> representation of the
                <see cref="T:SilDev.VirtualKey"/> value.
            </summary>
            <param name="key">
                The <see cref="T:SilDev.VirtualKey"/> value.
            </param>
        </member>
        <member name="M:SilDev.InputDevice.GetKeyCode(System.String)">
            <summary>
                Returns the <see cref="T:System.UInt16"/> representation of the <see cref="T:System.String"/>
                representation of a Virtual-Key code.
            </summary>
            <param name="key">
                The <see cref="T:System.String"/> representation of a Virtual-Key code.
            </param>
        </member>
        <member name="M:SilDev.InputDevice.GetKeyName(SilDev.VirtualKey)">
            <summary>
                Returns the <see cref="T:System.String"/> representation of the
                <see cref="T:SilDev.VirtualKey"/> value.
            </summary>
            <param name="key">
                The <see cref="T:SilDev.VirtualKey"/> value.
            </param>
        </member>
        <member name="M:SilDev.InputDevice.GetKeyName(System.UInt16)">
            <summary>
                Returns the <see cref="T:System.String"/> representation of the <see cref="T:System.UInt16"/>
                representation of a Virtual-Key code.
            </summary>
            <param name="key">
                The <see cref="T:System.UInt16"/> representation of a Virtual-Key code.
            </param>
        </member>
        <member name="M:SilDev.InputDevice.GetScanCode(SilDev.VirtualKey,System.Boolean)">
            <summary>
                Returns the Virtual-Key scan code.
            </summary>
            <param name="key">
                The <see cref="T:SilDev.VirtualKey"/> value.
            </param>
        </member>
        <member name="M:SilDev.InputDevice.GetScanCode(System.UInt16,System.Boolean)">
            <summary>
                Returns the Virtual-Key scan code.
            </summary>
            <param name="key">
                The <see cref="T:System.UInt16"/> representation of a Virtual-Key code.
            </param>
        </member>
        <member name="M:SilDev.InputDevice.GetKeyState(SilDev.VirtualKey)">
            <summary>
                Determines whether a key is up or down at the time the function is called,
                and whether the key was pressed after a previous call to
                <see cref="M:SilDev.InputDevice.GetKeyState(SilDev.VirtualKey)"/>.
            </summary>
            <param name="key">
                The <see cref="T:SilDev.VirtualKey"/> value to check.
            </param>
        </member>
        <member name="M:SilDev.InputDevice.GetKeyState(System.UInt16)">
            <summary>
                Determines whether a key is up or down at the time the function is called,
                and whether the key was pressed after a previous call to
                <see cref="M:SilDev.InputDevice.GetKeyState(System.UInt16)"/>.
            </summary>
            <param name="key">
                The <see cref="T:System.UInt16"/> representation of a Virtual-Key code to check.
            </param>
        </member>
        <member name="M:SilDev.InputDevice.GetKeyState(System.String)">
            <summary>
                Determines whether a key is up or down at the time the function is called,
                and whether the key was pressed after a previous call to
                <see cref="M:SilDev.InputDevice.GetKeyState(System.String)"/>.
            </summary>
            <param name="key">
                The <see cref="T:System.String"/> representation of a Virtual-Key code to check.
            </param>
        </member>
        <member name="M:SilDev.InputDevice.GetKeyStates">
            <summary>
                Determines which keys were up or down at the time the function is called,
                and which keys were pressed.
            </summary>
        </member>
        <member name="M:SilDev.InputDevice.PostKeyState(System.IntPtr,SilDev.VirtualKey,SilDev.VirtualKeyState,System.Boolean)">
            <summary>
                Places (posts) the specified key in the message queue associated with the
                thread that created the specified window and returns without waiting for
                the thread to process the message.
            </summary>
            <param name="hWnd">
                A handle to the window whose window procedure is to receive the message.
            </param>
            <param name="key">
                The key to post.
            </param>
            <param name="keyState">
                The key state to post.
            </param>
            <param name="scanCode">
                <see langword="true"/> to post the scan code of the specified key;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.InputDevice.SendKeyState(System.IntPtr,SilDev.VirtualKey,SilDev.VirtualKeyState,System.Boolean)">
            <summary>
                Sends the specified key to a window. This function calls the window
                procedure for the specified window and does not return until the window
                procedure has processed the message.
            </summary>
            <param name="hWnd">
                A handle to the window whose window procedure is to receive the message.
            </param>
            <param name="key">
                The key to send.
            </param>
            <param name="keyState">
                The key state to send.
            </param>
            <param name="scanCode">
                <see langword="true"/> to send the scan code of the specified key;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.InputDevice.SendMouseClick(System.Boolean)">
            <summary>
                Synthesizes a left mouse button click to the active window.
            </summary>
            <param name="directInput">
            </param>
        </member>
        <member name="T:SilDev.Log">
            <summary>
                Provides functionality for the catching and logging of handled or unhandled
                <see cref="T:System.Exception"/>'s.
                <para>
                    This class is not intended to replace the Visual Studio debugging
                    tools. It was primarily designed for final releases in which debugging
                    is disabled. Exceptions can be caught entirely so that the end user
                    doesn't get confused unnecessarily. All exceptions are logged and can
                    still reliably help developers.
                </para>
            </summary>
        </member>
        <member name="P:SilDev.Log.CatchUnhandled">
            <summary>
                <see langword="true"/> to enable the catching of unhandled
                <see cref="T:System.Exception"/>'s; otherwise, <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SilDev.Log.CurrentCulture">
            <summary>
                Gets or sets the culture for the current thread.
            </summary>
        </member>
        <member name="P:SilDev.Log.DebugMode">
            <summary>
                Gets the current <see cref="P:SilDev.Log.DebugMode"/> value that determines how
                <see cref="T:System.Exception"/>'s are caught and logged. For more information see
                <see cref="M:SilDev.Log.ActivateLogging(System.Int32)"/>.
            </summary>
        </member>
        <member name="P:SilDev.Log.FileDir">
            <summary>
                Gets or sets the location of the current LOG file.
                <para>
                    If the specified path doesn't exists, it is created.
                </para>
                <para>
                    If the specified path is invalid or this process doesn't have the
                    necessary permissions to write to this location, the location is
                    changed to the Windows specified folder for temporary files.
                </para>
            </summary>
        </member>
        <member name="P:SilDev.Log.FileName">
            <summary>
                Gets the name of the current LOG file.
            </summary>
        </member>
        <member name="P:SilDev.Log.FilePath">
            <summary>
                Gets the full path of the current LOG file.
            </summary>
        </member>
        <member name="P:SilDev.Log.DebugKey">
            <summary>
                Gets or sets the key that is used to allow logging by command line
                arguments or a configuration file. For more information see
                <see cref="M:SilDev.Log.AllowLogging(System.String,System.String)"/>.
                <para>
                    <strong>
                        Default:
                    </strong>
                    'DebugMode'
                </para>
            </summary>
        </member>
        <member name="M:SilDev.Log.ActivateLogging(System.Int32)">
            <summary>
                Specifies the <see cref="P:SilDev.Log.DebugMode"/> for the handling of exceptions. This
                variable can also be specified over an command line argument using
                <see cref="M:SilDev.Log.AllowLogging(System.String,System.String)"/> method.
                <para>
                    <strong>
                        The following modes are available:
                    </strong>
                </para>
                <list type="number">
                    <listheader>
                        <term>
                            Logging is disabled
                        </term>
                        <description>
                            Exceptions are still caught.
                            <para>
                                If <see cref="P:SilDev.Log.CatchUnhandled"/> is <see langword="true"/>,
                                unhandled exceptions are also discarded. This can be useful
                                for public releases to prevent any kind of exception
                                notifications to the end user. But the consequences are
                                dangerous if used incorrectly because all exceptions are
                                completely suppressed.
                            </para>
                        </description>
                    </listheader>
                    <item>
                        <term>
                            Logging is enabled
                        </term>
                        <description>
                            Exceptions are caught and logged.
                            <i>
                                (Recommended)
                            </i>
                        </description>
                    </item>
                    <item>
                        <term>
                            Logging is enabled
                        </term>
                        <description>
                            Exceptions are caught and logged. A console window is allocated
                            to display logging in real time.
                        </description>
                    </item>
                    <item>
                        <term>
                            Logging is enabled
                        </term>
                        <description>
                            All exceptions are thrown.
                        </description>
                    </item>
                </list>
            </summary>
            <param name="mode">
                The logging mode to be set.
            </param>
        </member>
        <member name="M:SilDev.Log.AllowLogging(System.String,System.String)">
            <summary>
                Allows you to enable logging by command line arguments or a specified
                configuration file using the specified regular expression pattern. For more
                information see <see cref="M:SilDev.Log.ActivateLogging(System.Int32)"/>.
                <list type="bullet">
                    <listheader>
                        <para>
                            <strong>
                                There are several ways to make the regular expression
                                pattern work:
                            </strong>
                        </para>
                        <list type="number">
                            <item>
                                <description>
                                    Use of the Key and Value groups, that are used to
                                    search for the correct key within the file and sets its
                                    value as logging mode.
                                </description>
                            </item>
                            <item>
                                <description>
                                    It's also possible to define the Value group alone, or
                                    even to use no groups at all. That will only check the
                                    first matching value.
                                </description>
                            </item>
                        </list>
                    </listheader>
                    <item>
                        <para>
                            <strong>
                                Available regular expression groups:
                            </strong>
                        </para>
                        <list type="number">
                            <item>
                                <term>
                                    Key
                                </term>
                                <description>
                                    Represents the key within the configuration file that
                                    contains the value. Must be the value of the
                                    <see cref="P:SilDev.Log.DebugKey"/> property.
                                </description>
                            </item>
                            <item>
                                <term>
                                    Value
                                </term>
                                <description>
                                    Represents the value passed to the
                                    <see cref="M:SilDev.Log.ActivateLogging(System.Int32)"/> method. Must be
                                    convertible to <see cref="T:System.Int32"/>.
                                </description>
                            </item>
                        </list>
                    </item>
                </list>
            </summary>
            <param name="configPath">
                The path of the text file to look for the value that determines the logging
                mode.
            </param>
            <param name="pattern">
                The regular expression pattern to match in the specified configuration
                file.
                <para>
                    <i>
                        (The standard pattern has the INI file format, which searches for
                        the appropriate key in all sections and uses it's value to
                        determine the logging mode.)
                    </i>
                </para>
            </param>
        </member>
        <member name="M:SilDev.Log.AllowLogging">
            <summary>
                Allows you to enable logging by command line arguments. For more
                information see <see cref="M:SilDev.Log.ActivateLogging(System.Int32)"/>.
            </summary>
        </member>
        <member name="M:SilDev.Log.IsCaught(System.Exception,System.Type[])">
            <summary>
                Determines whether this <see cref="T:System.Exception"/> should be caught or thrown.
                For more information see <see cref="M:SilDev.Log.ActivateLogging(System.Int32)"/>.
            </summary>
            <param name="exception">
                The <see cref="T:System.Exception"/> to be checked.
            </param>
            <param name="exTypes">
                A sequence of <see cref="T:System.Exception"/> types to catch.
            </param>
        </member>
        <member name="M:SilDev.Log.Write(System.String,System.Boolean)">
            <summary>
                Writes the specified information into a LOG file.
            </summary>
            <param name="logMessage">
                The message text to write.
            </param>
            <param name="exitProcess">
                <see langword="true"/> to terminate this process after logging; otherwise,
                <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Log.Write(System.Exception,System.Boolean,System.Boolean)">
            <summary>
                Writes all <see cref="T:System.Exception"/> information into a LOG file.
            </summary>
            <param name="exception">
                The handled <see cref="T:System.Exception"/> to write.
            </param>
            <param name="forceLogging">
                <see langword="true"/> to enforce that <see cref="P:SilDev.Log.DebugMode"/> is enabled;
                otherwise, <see langword="false"/>.
            </param>
            <param name="exitProcess">
                <see langword="true"/> to terminate this process after logging; otherwise,
                <see langword="false"/>.
            </param>
        </member>
        <member name="T:SilDev.CurrentMemory">
            <summary>
                Provides static methods to reduce the memory usage of the current process.
            </summary>
        </member>
        <member name="M:SilDev.CurrentMemory.Destroy``1(``0@)">
            <summary>
                Removes the specified element from current process memory.
                <para>
                    Note that the element is only removed if you set all references to
                    <see langword="null"/>, except for the one with which you call this
                    method; otherwise the element will remain in memory even if it appears
                    to be removed.
                </para>
            </summary>
            <typeparam name="TElement">
                The type of the element.
            </typeparam>
            <param name="element">
                The element to be removed.
            </param>
        </member>
        <member name="T:SilDev.MemoryPinner">
            <summary>
                Provides a way to pin a managed object from unmanaged memory.
            </summary>
        </member>
        <member name="P:SilDev.MemoryPinner.PointerHandle">
            <summary>
                Returns the pointer to the pinned object.
            </summary>
        </member>
        <member name="M:SilDev.MemoryPinner.#ctor(System.Object)">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.MemoryPinner"/> class with the
                specified object to pin.
            </summary>
            <param name="value">
                The object to pin.
            </param>
        </member>
        <member name="M:SilDev.MemoryPinner.Dispose">
            <summary>
                Releases all resources used by this <see cref="T:SilDev.MemoryPinner"/>.
            </summary>
        </member>
        <member name="M:SilDev.MemoryPinner.Dispose(System.Boolean)">
            <summary>
                Releases all resources used by this <see cref="T:SilDev.MemoryPinner"/>.
            </summary>
        </member>
        <member name="T:SilDev.ProcessMemory">
            <summary>
                Provides the functionality to manage data from an area of memory in a
                specified process.
            </summary>
        </member>
        <member name="M:SilDev.ProcessMemory.#ctor(System.IntPtr)">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.ProcessMemory"/> class with
                the specified window handle.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
        </member>
        <member name="M:SilDev.ProcessMemory.GetImageFileName">
            <summary>
                Gets the file name of the process image.
            </summary>
        </member>
        <member name="M:SilDev.ProcessMemory.Allocate(System.Object)">
            <summary>
                Allocates a chunk of memory in the process.
            </summary>
            <param name="value">
                The structure to be allocated.
            </param>
        </member>
        <member name="M:SilDev.ProcessMemory.Read(System.Object,System.IntPtr)">
            <summary>
                Reads data from an area of memory in a specified process.
            </summary>
            <param name="value">
                The structure to be allocated.
            </param>
            <param name="address">
                A pointer to the base address in the specified process from which to read.
            </param>
        </member>
        <member name="M:SilDev.ProcessMemory.ReadString(System.Int32,System.IntPtr)">
            <summary>
                Reads a string from an area of memory in a specified process.
            </summary>
            <param name="size">
                The number of bytes to be read from the specified process.
            </param>
            <param name="address">
                A pointer to the base address in the specified process from which to read.
            </param>
        </member>
        <member name="M:SilDev.ProcessMemory.Write(System.Object,System.Int32,System.IntPtr)">
            <summary>
                Writes data to an area of memory in a specified process.
            </summary>
            <param name="value">
                The structure to be allocated.
            </param>
            <param name="size">
                The number of bytes to be written to the specified process.
            </param>
            <param name="buffer">
                A pointer to the buffer that contains data to be written in the address
                space of the specified process.
            </param>
        </member>
        <member name="M:SilDev.ProcessMemory.Dispose">
            <summary>
                Releases all resources used by this <see cref="T:SilDev.ProcessMemory"/>.
            </summary>
        </member>
        <member name="M:SilDev.ProcessMemory.Dispose(System.Boolean)">
            <summary>
                Releases all resources used by this <see cref="T:SilDev.ProcessMemory"/>.
            </summary>
        </member>
        <member name="T:SilDev.MemoryException">
            <summary>
                The exception that is thrown when an attempt to access some data in memory
                fails.
            </summary>
        </member>
        <member name="P:SilDev.MemoryException.Message">
            <summary>
                Gets a message that describes the current exception.
            </summary>
        </member>
        <member name="M:SilDev.MemoryException.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.MemoryException"/> class.
            </summary>
        </member>
        <member name="M:SilDev.MemoryException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.MemoryException"/> class with
                a specified error message.
            </summary>
            <param name="message">
                The message that describes the error.
            </param>
        </member>
        <member name="M:SilDev.MemoryException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.MemoryException"/> class with
                a specified error message and the exception that is the cause of this
                exception.
            </summary>
            <param name="message">
                The message that describes the error.
            </param>
            <param name="innerException">
                The exception that is the cause of the current exception, or a null
                reference.
            </param>
        </member>
        <member name="M:SilDev.MemoryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.ArgumentInvalidException"/>
                class with serialized data.
            </summary>
            <param name="info">
                The object that holds the serialized object data.
            </param>
            <param name="context">
                The contextual information about the source or destination.
            </param>
        </member>
        <member name="M:SilDev.MemoryException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object with the additional
                exception information.
            </summary>
            <param name="info">
                The object that holds the serialized object data.
            </param>
            <param name="context">
                The contextual information about the source or destination.
            </param>
        </member>
        <member name="T:SilDev.Network.NetEx">
            <summary>
                Provides functionality for the access of internet resources.
            </summary>
        </member>
        <member name="T:SilDev.Network.NetEx.DnsOption">
            <summary>
                Provides options for specifying a Domain Name System provider.
            </summary>
            ReSharper disable CommentTypo
        </member>
        <member name="F:SilDev.Network.NetEx.DnsOption.Cloudflare">
            <summary>
                Partnership between Cloudflare and APNIC. Cloudflare runs one of the
                world’s largest, fastest networks. APNIC is a non-profit organization
                managing IP address allocation for the Asia Pacific and Oceania regions.
                Cloudflare had the network. APNIC had the IP address (1.1.1.1). Both were
                motivated by a mission to help build a better Internet.
            </summary>
        </member>
        <member name="F:SilDev.Network.NetEx.DnsOption.Google">
            <summary>
                A free, global DNS resolution service that you can use as an alternative to
                your current DNS provider. In addition to traditional DNS over UDP or TCP,
                Google also provide DNS-over-HTTPS API.
            </summary>
        </member>
        <member name="P:SilDev.Network.NetEx.InternalDownloadMirrors">
            <summary>
                Gets internal download mirrors.
            </summary>
        </member>
        <member name="P:SilDev.Network.NetEx.IPv4IsAvalaible">
            <summary>
                Determines whether the current IPv4 connection is available.
            </summary>
            ReSharper disable once InconsistentNaming
        </member>
        <member name="P:SilDev.Network.NetEx.IPv6IsAvalaible">
            <summary>
                Determines whether the current IPv6 connection is available.
            </summary>
            ReSharper disable once InconsistentNaming
        </member>
        <member name="P:SilDev.Network.NetEx.LastPingReply">
            <summary>
                Gets the last result defined in the previous call to the
                <see cref="M:SilDev.Network.NetEx.Ping(System.Uri,System.Int32)"/> function.
            </summary>
        </member>
        <member name="M:SilDev.Network.NetEx.GetDnsAddresses(SilDev.Network.NetEx.DnsOption)">
            <summary>
                Returns the specified Domain Name System server addresses.
            </summary>
            <param name="dnsOptions">
                The Domain Name System provider to get the addresses.
            </param>
        </member>
        <member name="M:SilDev.Network.NetEx.GetFullHost(System.Uri)">
            <summary>
                Gets the full host component of this <see cref="T:System.Uri"/> instance.
            </summary>
            <param name="uri">
                The <see cref="T:System.Uri"/> instance.
            </param>
        </member>
        <member name="M:SilDev.Network.NetEx.GetFullHost(System.String)">
            <summary>
                Gets the full host component of this URL string.
            </summary>
            <param name="url">
                The URL string.
            </param>
        </member>
        <member name="M:SilDev.Network.NetEx.GetShortHost(System.Uri)">
            <summary>
                Gets the short host component of this <see cref="T:System.Uri"/> instance.
            </summary>
            <param name="uri">
                The <see cref="T:System.Uri"/> instance.
            </param>
        </member>
        <member name="M:SilDev.Network.NetEx.GetShortHost(System.String)">
            <summary>
                Gets the short host component of this URL string.
            </summary>
            <param name="url">
                The URL string.
            </param>
        </member>
        <member name="M:SilDev.Network.NetEx.InternetIsAvailable(System.Boolean,SilDev.Network.NetEx.DnsOption,System.Int32)">
            <summary>
                Checks the current network connection.
            </summary>
            <param name="iPv6">
                <see langword="true"/> to check only the IPv6 protocol; otherwise,
                <see langword="false"/> to check only the IPv4 protocol.
            </param>
            <param name="dnsOptions">
                The DNS servers to be used for the checks.
            </param>
            <param name="maxRoundtripTime">
                The maximal number of milliseconds taken to send an Internet Control
                Message Protocol (ICMP) echo request and receive the corresponding ICMP
                echo reply message.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                maxRoundtripTime is zero -or- negative.
            </exception>
        </member>
        <member name="M:SilDev.Network.NetEx.Ping(System.Uri,System.Int32)">
            <summary>
                Attempts to send an Internet Control Message Protocol (ICMP) echo message
                to the specified computer, and receive a corresponding ICMP echo replay
                message from that computer and returns the number of milliseconds taken for
                this task.
            </summary>
            <param name="uri">
                The address of the server to call.
            </param>
            <param name="timeout">
                The maximum number of milliseconds (after sending the echo message) to wait
                for the ICMP echo reply message.
            </param>
        </member>
        <member name="M:SilDev.Network.NetEx.Ping(System.String,System.Int32)">
            <summary>
                Attempts to send an Internet Control Message Protocol (ICMP) echo message
                to the specified computer, and receive a corresponding ICMP echo replay
                message from that computer and returns the number of milliseconds taken for
                this task.
            </summary>
            <param name="host">
                The address of the server to call.
            </param>
            <param name="timeout">
                The maximum number of milliseconds (after sending the echo message) to wait
                for the ICMP echo reply message.
            </param>
        </member>
        <member name="M:SilDev.Network.NetEx.ToUri(System.String)">
            <summary>
                Converts this <see cref="T:System.String"/> to a <see cref="T:System.Uri"/>.
            </summary>
            <param name="str">
                The <see cref="T:System.String"/> to convert.
            </param>
        </member>
        <member name="M:SilDev.Network.NetEx.ToHttpUri(System.String)">
            <summary>
                Converts this <see cref="T:System.String"/> to a <see cref="T:System.Uri"/> with HTTP scheme.
            </summary>
            <param name="str">
                The <see cref="T:System.String"/> to convert.
            </param>
        </member>
        <member name="M:SilDev.Network.NetEx.IsValid(System.Uri,System.Boolean,System.Net.CookieContainer,System.Int32,System.String)">
            <summary>
                Determines the availability of the specified internet address.
            </summary>
            <param name="uri">
                The address to check.
            </param>
            <param name="allowAutoRedirect">
                <see langword="true"/> to indicate that the request should follow
                redirection responses; otherwise, <see langword="false"/>.
            </param>
            <param name="cookieContainer">
                The cookies associated with the request.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.NetEx.IsValid(System.Uri,System.Boolean,System.Int32,System.String)">
            <summary>
                Determines the availability of the specified internet address.
            </summary>
            <param name="uri">
                The address to check.
            </param>
            <param name="allowAutoRedirect">
                <see langword="true"/> to indicate that the request should follow
                redirection responses; otherwise, <see langword="false"/>.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.NetEx.IsValid(System.Uri,System.Net.CookieContainer,System.Int32,System.String)">
            <summary>
                Determines the availability of the specified internet address.
            </summary>
            <param name="uri">
                The address to check.
            </param>
            <param name="cookieContainer">
                The cookies associated with the request.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.NetEx.IsValid(System.Uri,System.Int32,System.String)">
            <summary>
                Determines the availability of the specified internet address.
            </summary>
            <param name="uri">
                The address to check.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.NetEx.FileIsAvailable(System.Uri,System.String,System.String,System.Boolean,System.Net.CookieContainer,System.Int32,System.String)">
            <summary>
                Determines the availability of the specified internet resource.
            </summary>
            <param name="srcUri">
                The full path of the resource to access.
            </param>
            <param name="userName">
                The username associated with the credential.
            </param>
            <param name="password">
                The password associated with the credential.
            </param>
            <param name="allowAutoRedirect">
                <see langword="true"/> to indicate that the request should follow
                redirection responses; otherwise, <see langword="false"/>.
            </param>
            <param name="cookieContainer">
                The cookies associated with the request.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.NetEx.FileIsAvailable(System.Uri,System.String,System.String,System.Boolean,System.Int32,System.String)">
            <summary>
                Determines the availability of the specified internet resource.
            </summary>
            <param name="srcUri">
                The full path of the resource to access.
            </param>
            <param name="userName">
                The username associated with the credential.
            </param>
            <param name="password">
                The password associated with the credential.
            </param>
            <param name="allowAutoRedirect">
                <see langword="true"/> to indicate that the request should follow
                redirection responses; otherwise, <see langword="false"/>.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.NetEx.FileIsAvailable(System.Uri,System.String,System.String,System.Net.CookieContainer,System.Int32,System.String)">
            <summary>
                Determines the availability of the specified internet resource.
            </summary>
            <param name="srcUri">
                The full path of the resource to access.
            </param>
            <param name="userName">
                The username associated with the credential.
            </param>
            <param name="password">
                The password associated with the credential.
            </param>
            <param name="cookieContainer">
                The cookies associated with the request.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.NetEx.FileIsAvailable(System.Uri,System.String,System.String,System.Int32,System.String)">
            <summary>
                Determines the availability of the specified internet resource.
            </summary>
            <param name="srcUri">
                The full path of the resource to access.
            </param>
            <param name="userName">
                The username associated with the credential.
            </param>
            <param name="password">
                The password associated with the credential.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.NetEx.FileIsAvailable(System.Uri,System.Boolean,System.Net.CookieContainer,System.Int32,System.String)">
            <summary>
                Determines the availability of the specified internet resource.
            </summary>
            <param name="srcUri">
                The full path of the resource to access.
            </param>
            <param name="allowAutoRedirect">
                <see langword="true"/> to indicate that the request should follow
                redirection responses; otherwise, <see langword="false"/>.
            </param>
            <param name="cookieContainer">
                The cookies associated with the request.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.NetEx.FileIsAvailable(System.Uri,System.Boolean,System.Int32,System.String)">
            <summary>
                Determines the availability of the specified internet resource.
            </summary>
            <param name="srcUri">
                The full path of the resource to access.
            </param>
            <param name="allowAutoRedirect">
                <see langword="true"/> to indicate that the request should follow
                redirection responses; otherwise, <see langword="false"/>.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.NetEx.FileIsAvailable(System.Uri,System.Net.CookieContainer,System.Int32,System.String)">
            <summary>
                Determines the availability of the specified internet resource.
            </summary>
            <param name="srcUri">
                The full path of the resource to access.
            </param>
            <param name="cookieContainer">
                The cookies associated with the request.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.NetEx.FileIsAvailable(System.Uri,System.Int32,System.String)">
            <summary>
                Determines the availability of the specified internet resource.
            </summary>
            <param name="srcUri">
                The full path of the resource to access.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.NetEx.FileIsAvailable(System.String,System.String,System.String,System.Boolean,System.Net.CookieContainer,System.Int32,System.String)">
            <summary>
                Determines the availability of the specified internet resource.
            </summary>
            <param name="srcUri">
                The full path of the resource to access.
            </param>
            <param name="userName">
                The username associated with the credential.
            </param>
            <param name="password">
                The password associated with the credential.
            </param>
            <param name="allowAutoRedirect">
                <see langword="true"/> to indicate that the request should follow
                redirection responses; otherwise, <see langword="false"/>.
            </param>
            <param name="cookieContainer">
                The cookies associated with the request.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.NetEx.FileIsAvailable(System.String,System.String,System.String,System.Boolean,System.Int32,System.String)">
            <summary>
                Determines the availability of the specified internet resource.
            </summary>
            <param name="srcUri">
                The full path of the resource to access.
            </param>
            <param name="userName">
                The username associated with the credential.
            </param>
            <param name="password">
                The password associated with the credential.
            </param>
            <param name="allowAutoRedirect">
                <see langword="true"/> to indicate that the request should follow
                redirection responses; otherwise, <see langword="false"/>.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.NetEx.FileIsAvailable(System.String,System.String,System.String,System.Net.CookieContainer,System.Int32,System.String)">
            <summary>
                Determines the availability of the specified internet resource.
            </summary>
            <param name="srcUri">
                The full path of the resource to access.
            </param>
            <param name="userName">
                The username associated with the credential.
            </param>
            <param name="password">
                The password associated with the credential.
            </param>
            <param name="cookieContainer">
                The cookies associated with the request.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.NetEx.FileIsAvailable(System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
                Determines the availability of the specified internet resource.
            </summary>
            <param name="srcUri">
                The full path of the resource to access.
            </param>
            <param name="userName">
                The username associated with the credential.
            </param>
            <param name="password">
                The password associated with the credential.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.NetEx.FileIsAvailable(System.String,System.Boolean,System.Net.CookieContainer,System.Int32,System.String)">
            <summary>
                Determines the availability of the specified internet resource.
            </summary>
            <param name="srcUri">
                The full path of the resource to access.
            </param>
            <param name="allowAutoRedirect">
                <see langword="true"/> to indicate that the request should follow
                redirection responses; otherwise, <see langword="false"/>.
            </param>
            <param name="cookieContainer">
                The cookies associated with the request.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.NetEx.FileIsAvailable(System.String,System.Boolean,System.Int32,System.String)">
            <summary>
                Determines the availability of the specified internet resource.
            </summary>
            <param name="srcUri">
                The full path of the resource to access.
            </param>
            <param name="allowAutoRedirect">
                <see langword="true"/> to indicate that the request should follow
                redirection responses; otherwise, <see langword="false"/>.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.NetEx.FileIsAvailable(System.String,System.Net.CookieContainer,System.Int32,System.String)">
            <summary>
                Determines the availability of the specified internet resource.
            </summary>
            <param name="srcUri">
                The full path of the resource to access.
            </param>
            <param name="cookieContainer">
                The cookies associated with the request.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.NetEx.FileIsAvailable(System.String,System.Int32,System.String)">
            <summary>
                Determines the availability of the specified internet resource.
            </summary>
            <param name="srcUri">
                The full path of the resource to access.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.NetEx.GetFileDate(System.Uri,System.String,System.String,System.Boolean,System.Net.CookieContainer,System.Int32,System.String)">
            <summary>
                Gets the last date and time of the specified internet resource.
            </summary>
            <param name="srcUri">
                The full path of the resource to access.
            </param>
            <param name="userName">
                The username associated with the credential.
            </param>
            <param name="password">
                The password associated with the credential.
            </param>
            <param name="allowAutoRedirect">
                <see langword="true"/> to indicate that the request should follow
                redirection responses; otherwise, <see langword="false"/>.
            </param>
            <param name="cookieContainer">
                The cookies associated with the request.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.NetEx.GetFileDate(System.Uri,System.String,System.String,System.Boolean,System.Int32,System.String)">
            <summary>
                Gets the last date and time of the specified internet resource.
            </summary>
            <param name="srcUri">
                The full path of the resource to access.
            </param>
            <param name="userName">
                The username associated with the credential.
            </param>
            <param name="password">
                The password associated with the credential.
            </param>
            <param name="allowAutoRedirect">
                <see langword="true"/> to indicate that the request should follow
                redirection responses; otherwise, <see langword="false"/>.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.NetEx.GetFileDate(System.Uri,System.String,System.String,System.Net.CookieContainer,System.Int32,System.String)">
            <summary>
                Gets the last date and time of the specified internet resource.
            </summary>
            <param name="srcUri">
                The full path of the resource to access.
            </param>
            <param name="userName">
                The username associated with the credential.
            </param>
            <param name="password">
                The password associated with the credential.
            </param>
            <param name="cookieContainer">
                The cookies associated with the request.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.NetEx.GetFileDate(System.Uri,System.String,System.String,System.Int32,System.String)">
            <summary>
                Gets the last date and time of the specified internet resource.
            </summary>
            <param name="srcUri">
                The full path of the resource to access.
            </param>
            <param name="userName">
                The username associated with the credential.
            </param>
            <param name="password">
                The password associated with the credential.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.NetEx.GetFileDate(System.Uri,System.Boolean,System.Net.CookieContainer,System.Int32,System.String)">
            <summary>
                Gets the last date and time of the specified internet resource.
            </summary>
            <param name="srcUri">
                The full path of the resource to access.
            </param>
            <param name="allowAutoRedirect">
                <see langword="true"/> to indicate that the request should follow
                redirection responses; otherwise, <see langword="false"/>.
            </param>
            <param name="cookieContainer">
                The cookies associated with the request.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.NetEx.GetFileDate(System.Uri,System.Boolean,System.Int32,System.String)">
            <summary>
                Gets the last date and time of the specified internet resource.
            </summary>
            <param name="srcUri">
                The full path of the resource to access.
            </param>
            <param name="allowAutoRedirect">
                <see langword="true"/> to indicate that the request should follow
                redirection responses; otherwise, <see langword="false"/>.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.NetEx.GetFileDate(System.Uri,System.Net.CookieContainer,System.Int32,System.String)">
            <summary>
                Gets the last date and time of the specified internet resource.
            </summary>
            <param name="srcUri">
                The full path of the resource to access.
            </param>
            <param name="cookieContainer">
                The cookies associated with the request.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.NetEx.GetFileDate(System.Uri,System.Int32,System.String)">
            <summary>
                Gets the last date and time of the specified internet resource.
            </summary>
            <param name="srcUri">
                The full path of the resource to access.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.NetEx.GetFileDate(System.String,System.String,System.String,System.Boolean,System.Net.CookieContainer,System.Int32,System.String)">
            <summary>
                Gets the last date and time of the specified internet resource.
            </summary>
            <param name="srcUri">
                The full path of the resource to access.
            </param>
            <param name="userName">
                The username associated with the credential.
            </param>
            <param name="password">
                The password associated with the credential.
            </param>
            <param name="allowAutoRedirect">
                <see langword="true"/> to indicate that the request should follow
                redirection responses; otherwise, <see langword="false"/>.
            </param>
            <param name="cookieContainer">
                The cookies associated with the request.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.NetEx.GetFileDate(System.String,System.String,System.String,System.Boolean,System.Int32,System.String)">
            <summary>
                Gets the last date and time of the specified internet resource.
            </summary>
            <param name="srcUri">
                The full path of the resource to access.
            </param>
            <param name="userName">
                The username associated with the credential.
            </param>
            <param name="password">
                The password associated with the credential.
            </param>
            <param name="allowAutoRedirect">
                <see langword="true"/> to indicate that the request should follow
                redirection responses; otherwise, <see langword="false"/>.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.NetEx.GetFileDate(System.String,System.String,System.String,System.Net.CookieContainer,System.Int32,System.String)">
            <summary>
                Gets the last date and time of the specified internet resource.
            </summary>
            <param name="srcUri">
                The full path of the resource to access.
            </param>
            <param name="userName">
                The username associated with the credential.
            </param>
            <param name="password">
                The password associated with the credential.
            </param>
            <param name="cookieContainer">
                The cookies associated with the request.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.NetEx.GetFileDate(System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
                Gets the last date and time of the specified internet resource.
            </summary>
            <param name="srcUri">
                The full path of the resource to access.
            </param>
            <param name="userName">
                The username associated with the credential.
            </param>
            <param name="password">
                The password associated with the credential.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.NetEx.GetFileDate(System.String,System.Boolean,System.Net.CookieContainer,System.Int32,System.String)">
            <summary>
                Gets the last date and time of the specified internet resource.
            </summary>
            <param name="srcUri">
                The full path of the resource to access.
            </param>
            <param name="allowAutoRedirect">
                <see langword="true"/> to indicate that the request should follow
                redirection responses; otherwise, <see langword="false"/>.
            </param>
            <param name="cookieContainer">
                The cookies associated with the request.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.NetEx.GetFileDate(System.String,System.Boolean,System.Int32,System.String)">
            <summary>
                Gets the last date and time of the specified internet resource.
            </summary>
            <param name="srcUri">
                The full path of the resource to access.
            </param>
            <param name="allowAutoRedirect">
                <see langword="true"/> to indicate that the request should follow
                redirection responses; otherwise, <see langword="false"/>.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.NetEx.GetFileDate(System.String,System.Net.CookieContainer,System.Int32,System.String)">
            <summary>
                Gets the last date and time of the specified internet resource.
            </summary>
            <param name="srcUri">
                The full path of the resource to access.
            </param>
            <param name="cookieContainer">
                The cookies associated with the request.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.NetEx.GetFileDate(System.String,System.Int32,System.String)">
            <summary>
                Gets the last date and time of the specified internet resource.
            </summary>
            <param name="srcUri">
                The full path of the resource to access.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.NetEx.GetFileName(System.Uri,System.String,System.String,System.Boolean,System.Net.CookieContainer,System.Int32,System.String)">
            <summary>
                Gets the filename of the specified internet resource.
            </summary>
            <param name="srcUri">
                The full path of the resource to access.
            </param>
            <param name="userName">
                The username associated with the credential.
            </param>
            <param name="password">
                The password associated with the credential.
            </param>
            <param name="allowAutoRedirect">
                <see langword="true"/> to indicate that the request should follow
                redirection responses; otherwise, <see langword="false"/>.
            </param>
            <param name="cookieContainer">
                The cookies associated with the request.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.NetEx.GetFileName(System.Uri,System.String,System.String,System.Boolean,System.Int32,System.String)">
            <summary>
                Gets the filename of the specified internet resource.
            </summary>
            <param name="srcUri">
                The full path of the resource to access.
            </param>
            <param name="userName">
                The username associated with the credential.
            </param>
            <param name="password">
                The password associated with the credential.
            </param>
            <param name="allowAutoRedirect">
                <see langword="true"/> to indicate that the request should follow
                redirection responses; otherwise, <see langword="false"/>.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.NetEx.GetFileName(System.Uri,System.String,System.String,System.Net.CookieContainer,System.Int32,System.String)">
            <summary>
                Gets the filename of the specified internet resource.
            </summary>
            <param name="srcUri">
                The full path of the resource to access.
            </param>
            <param name="userName">
                The username associated with the credential.
            </param>
            <param name="password">
                The password associated with the credential.
            </param>
            <param name="cookieContainer">
                The cookies associated with the request.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.NetEx.GetFileName(System.Uri,System.String,System.String,System.Int32,System.String)">
            <summary>
                Gets the filename of the specified internet resource.
            </summary>
            <param name="srcUri">
                The full path of the resource to access.
            </param>
            <param name="userName">
                The username associated with the credential.
            </param>
            <param name="password">
                The password associated with the credential.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.NetEx.GetFileName(System.Uri,System.Boolean,System.Net.CookieContainer,System.Int32,System.String)">
            <summary>
                Gets the filename of the specified internet resource.
            </summary>
            <param name="srcUri">
                The full path of the resource to access.
            </param>
            <param name="allowAutoRedirect">
                <see langword="true"/> to indicate that the request should follow
                redirection responses; otherwise, <see langword="false"/>.
            </param>
            <param name="cookieContainer">
                The cookies associated with the request.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.NetEx.GetFileName(System.Uri,System.Boolean,System.Int32,System.String)">
            <summary>
                Gets the filename of the specified internet resource.
            </summary>
            <param name="srcUri">
                The full path of the resource to access.
            </param>
            <param name="allowAutoRedirect">
                <see langword="true"/> to indicate that the request should follow
                redirection responses; otherwise, <see langword="false"/>.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.NetEx.GetFileName(System.Uri,System.Net.CookieContainer,System.Int32,System.String)">
            <summary>
                Gets the filename of the specified internet resource.
            </summary>
            <param name="srcUri">
                The full path of the resource to access.
            </param>
            <param name="cookieContainer">
                The cookies associated with the request.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.NetEx.GetFileName(System.Uri,System.Int32,System.String)">
            <summary>
                Gets the filename of the specified internet resource.
            </summary>
            <param name="srcUri">
                The full path of the resource to access.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.NetEx.GetFileName(System.String,System.String,System.String,System.Boolean,System.Net.CookieContainer,System.Int32,System.String)">
            <summary>
                Gets the filename of the specified internet resource.
            </summary>
            <param name="srcUri">
                The full path of the resource to access.
            </param>
            <param name="userName">
                The username associated with the credential.
            </param>
            <param name="password">
                The password associated with the credential.
            </param>
            <param name="allowAutoRedirect">
                <see langword="true"/> to indicate that the request should follow
                redirection responses; otherwise, <see langword="false"/>.
            </param>
            <param name="cookieContainer">
                The cookies associated with the request.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.NetEx.GetFileName(System.String,System.String,System.String,System.Boolean,System.Int32,System.String)">
            <summary>
                Gets the filename of the specified internet resource.
            </summary>
            <param name="srcUri">
                The full path of the resource to access.
            </param>
            <param name="userName">
                The username associated with the credential.
            </param>
            <param name="password">
                The password associated with the credential.
            </param>
            <param name="allowAutoRedirect">
                <see langword="true"/> to indicate that the request should follow
                redirection responses; otherwise, <see langword="false"/>.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.NetEx.GetFileName(System.String,System.String,System.String,System.Net.CookieContainer,System.Int32,System.String)">
            <summary>
                Gets the filename of the specified internet resource.
            </summary>
            <param name="srcUri">
                The full path of the resource to access.
            </param>
            <param name="userName">
                The username associated with the credential.
            </param>
            <param name="password">
                The password associated with the credential.
            </param>
            <param name="cookieContainer">
                The cookies associated with the request.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.NetEx.GetFileName(System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
                Gets the filename of the specified internet resource.
            </summary>
            <param name="srcUri">
                The full path of the resource to access.
            </param>
            <param name="userName">
                The username associated with the credential.
            </param>
            <param name="password">
                The password associated with the credential.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.NetEx.GetFileName(System.String,System.Boolean,System.Net.CookieContainer,System.Int32,System.String)">
            <summary>
                Gets the filename of the specified internet resource.
            </summary>
            <param name="srcUri">
                The full path of the resource to access.
            </param>
            <param name="allowAutoRedirect">
                <see langword="true"/> to indicate that the request should follow
                redirection responses; otherwise, <see langword="false"/>.
            </param>
            <param name="cookieContainer">
                The cookies associated with the request.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.NetEx.GetFileName(System.String,System.Boolean,System.Int32,System.String)">
            <summary>
                Gets the filename of the specified internet resource.
            </summary>
            <param name="srcUri">
                The full path of the resource to access.
            </param>
            <param name="allowAutoRedirect">
                <see langword="true"/> to indicate that the request should follow
                redirection responses; otherwise, <see langword="false"/>.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.NetEx.GetFileName(System.String,System.Net.CookieContainer,System.Int32,System.String)">
            <summary>
                Gets the filename of the specified internet resource.
            </summary>
            <param name="srcUri">
                The full path of the resource to access.
            </param>
            <param name="cookieContainer">
                The cookies associated with the request.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.NetEx.GetFileName(System.String,System.Int32,System.String)">
            <summary>
                Gets the filename of the specified internet resource.
            </summary>
            <param name="srcUri">
                The full path of the resource to access.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="T:SilDev.Network.WebTransfer">
            <summary>
                Provides static methods for downloading internet resources.
            </summary>
        </member>
        <member name="M:SilDev.Network.WebTransfer.DownloadFile(System.Uri,System.String,System.String,System.String,System.Boolean,System.Net.CookieContainer,System.Int32,System.String,System.Boolean)">
            <summary>
                Downloads the specified internet resource to a local file.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="destPath">
                The local destination path of the file.
            </param>
            <param name="userName">
                The username associated with the credential.
            </param>
            <param name="password">
                The password associated with the credential.
            </param>
            <param name="allowAutoRedirect">
                <see langword="true"/> to indicate that the request should follow
                redirection responses; otherwise, <see langword="false"/>.
            </param>
            <param name="cookieContainer">
                The cookies associated with the request.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
            <param name="checkExists">
                <see langword="true"/> to check the file availability before downloading;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Network.WebTransfer.DownloadFile(System.Uri,System.String,System.String,System.String,System.Boolean,System.Int32,System.String,System.Boolean)">
            <summary>
                Downloads the specified internet resource to a local file.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="destPath">
                The local destination path of the file.
            </param>
            <param name="userName">
                The username associated with the credential.
            </param>
            <param name="password">
                The password associated with the credential.
            </param>
            <param name="allowAutoRedirect">
                <see langword="true"/> to indicate that the request should follow
                redirection responses; otherwise, <see langword="false"/>.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
            <param name="checkExists">
                <see langword="true"/> to check the file availability before downloading;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Network.WebTransfer.DownloadFile(System.Uri,System.String,System.String,System.String,System.Net.CookieContainer,System.Int32,System.String,System.Boolean)">
            <summary>
                Downloads the specified internet resource to a local file.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="destPath">
                The local destination path of the file.
            </param>
            <param name="userName">
                The username associated with the credential.
            </param>
            <param name="password">
                The password associated with the credential.
            </param>
            <param name="cookieContainer">
                The cookies associated with the request.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
            <param name="checkExists">
                <see langword="true"/> to check the file availability before downloading;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Network.WebTransfer.DownloadFile(System.Uri,System.String,System.String,System.String,System.Int32,System.String,System.Boolean)">
            <summary>
                Downloads the specified internet resource to a local file.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="destPath">
                The local destination path of the file.
            </param>
            <param name="userName">
                The username associated with the credential.
            </param>
            <param name="password">
                The password associated with the credential.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
            <param name="checkExists">
                <see langword="true"/> to check the file availability before downloading;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Network.WebTransfer.DownloadFile(System.Uri,System.String,System.Boolean,System.Net.CookieContainer,System.Int32,System.String,System.Boolean)">
            <summary>
                Downloads the specified internet resource to a local file.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="destPath">
                The local destination path of the file.
            </param>
            <param name="allowAutoRedirect">
                <see langword="true"/> to indicate that the request should follow
                redirection responses; otherwise, <see langword="false"/>.
            </param>
            <param name="cookieContainer">
                The cookies associated with the request.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
            <param name="checkExists">
                <see langword="true"/> to check the file availability before downloading;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Network.WebTransfer.DownloadFile(System.Uri,System.String,System.Net.CookieContainer,System.Int32,System.String,System.Boolean)">
            <summary>
                Downloads the specified internet resource to a local file.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="destPath">
                The local destination path of the file.
            </param>
            <param name="cookieContainer">
                The cookies associated with the request.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
            <param name="checkExists">
                <see langword="true"/> to check the file availability before downloading;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Network.WebTransfer.DownloadFile(System.Uri,System.String,System.Int32,System.String,System.Boolean)">
            <summary>
                Downloads the specified internet resource to a local file.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="destPath">
                The local destination path of the file.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
            <param name="checkExists">
                <see langword="true"/> to check the file availability before downloading;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Network.WebTransfer.DownloadFile(System.String,System.String,System.String,System.String,System.Boolean,System.Net.CookieContainer,System.Int32,System.String,System.Boolean)">
            <summary>
                Downloads the specified internet resource to a local file.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="destPath">
                The local destination path of the file.
            </param>
            <param name="userName">
                The username associated with the credential.
            </param>
            <param name="password">
                The password associated with the credential.
            </param>
            <param name="allowAutoRedirect">
                <see langword="true"/> to indicate that the request should follow
                redirection responses; otherwise, <see langword="false"/>.
            </param>
            <param name="cookieContainer">
                The cookies associated with the request.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
            <param name="checkExists">
                <see langword="true"/> to check the file availability before downloading;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Network.WebTransfer.DownloadFile(System.String,System.String,System.String,System.String,System.Boolean,System.Int32,System.String,System.Boolean)">
            <summary>
                Downloads the specified internet resource to a local file.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="destPath">
                The local destination path of the file.
            </param>
            <param name="userName">
                The username associated with the credential.
            </param>
            <param name="password">
                The password associated with the credential.
            </param>
            <param name="allowAutoRedirect">
                <see langword="true"/> to indicate that the request should follow
                redirection responses; otherwise, <see langword="false"/>.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
            <param name="checkExists">
                <see langword="true"/> to check the file availability before downloading;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Network.WebTransfer.DownloadFile(System.String,System.String,System.String,System.String,System.Net.CookieContainer,System.Int32,System.String,System.Boolean)">
            <summary>
                Downloads the specified internet resource to a local file.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="destPath">
                The local destination path of the file.
            </param>
            <param name="userName">
                The username associated with the credential.
            </param>
            <param name="password">
                The password associated with the credential.
            </param>
            <param name="cookieContainer">
                The cookies associated with the request.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
            <param name="checkExists">
                <see langword="true"/> to check the file availability before downloading;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Network.WebTransfer.DownloadFile(System.String,System.String,System.String,System.String,System.Int32,System.String,System.Boolean)">
            <summary>
                Downloads the specified internet resource to a local file.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="destPath">
                The local destination path of the file.
            </param>
            <param name="userName">
                The username associated with the credential.
            </param>
            <param name="password">
                The password associated with the credential.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
            <param name="checkExists">
                <see langword="true"/> to check the file availability before downloading;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Network.WebTransfer.DownloadFile(System.String,System.String,System.Boolean,System.Net.CookieContainer,System.Int32,System.String,System.Boolean)">
            <summary>
                Downloads the specified internet resource to a local file.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="destPath">
                The local destination path of the file.
            </param>
            <param name="allowAutoRedirect">
                <see langword="true"/> to indicate that the request should follow
                redirection responses; otherwise, <see langword="false"/>.
            </param>
            <param name="cookieContainer">
                The cookies associated with the request.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
            <param name="checkExists">
                <see langword="true"/> to check the file availability before downloading;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Network.WebTransfer.DownloadFile(System.String,System.String,System.Boolean,System.Int32,System.String,System.Boolean)">
            <summary>
                Downloads the specified internet resource to a local file.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="destPath">
                The local destination path of the file.
            </param>
            <param name="allowAutoRedirect">
                <see langword="true"/> to indicate that the request should follow
                redirection responses; otherwise, <see langword="false"/>.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
            <param name="checkExists">
                <see langword="true"/> to check the file availability before downloading;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Network.WebTransfer.DownloadFile(System.String,System.String,System.Net.CookieContainer,System.Int32,System.String,System.Boolean)">
            <summary>
                Downloads the specified internet resource to a local file.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="destPath">
                The local destination path of the file.
            </param>
            <param name="cookieContainer">
                The cookies associated with the request.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
            <param name="checkExists">
                <see langword="true"/> to check the file availability before downloading;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Network.WebTransfer.DownloadFile(System.String,System.String,System.Int32,System.String,System.Boolean)">
            <summary>
                Downloads the specified internet resource to a local file.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="destPath">
                The local destination path of the file.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
            <param name="checkExists">
                <see langword="true"/> to check the file availability before downloading;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Network.WebTransfer.DownloadData(System.Uri,System.String,System.String,System.Boolean,System.Net.CookieContainer,System.Int32,System.String)">
            <summary>
                Downloads the specified internet resource as a <see cref="T:System.Byte"/> array.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="userName">
                The username associated with the credential.
            </param>
            <param name="password">
                The password associated with the credential.
            </param>
            <param name="allowAutoRedirect">
                <see langword="true"/> to indicate that the request should follow
                redirection responses; otherwise, <see langword="false"/>.
            </param>
            <param name="cookieContainer">
                The cookies associated with the request.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.WebTransfer.DownloadData(System.Uri,System.String,System.String,System.Boolean,System.Int32,System.String)">
            <summary>
                Downloads the specified internet resource as a <see cref="T:System.Byte"/> array.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="userName">
                The username associated with the credential.
            </param>
            <param name="password">
                The password associated with the credential.
            </param>
            <param name="allowAutoRedirect">
                <see langword="true"/> to indicate that the request should follow
                redirection responses; otherwise, <see langword="false"/>.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.WebTransfer.DownloadData(System.Uri,System.String,System.String,System.Net.CookieContainer,System.Int32,System.String)">
            <summary>
                Downloads the specified internet resource as a <see cref="T:System.Byte"/> array.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="userName">
                The username associated with the credential.
            </param>
            <param name="password">
                The password associated with the credential.
            </param>
            <param name="cookieContainer">
                The cookies associated with the request.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.WebTransfer.DownloadData(System.Uri,System.String,System.String,System.Int32,System.String)">
            <summary>
                Downloads the specified internet resource as a <see cref="T:System.Byte"/> array.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="userName">
                The username associated with the credential.
            </param>
            <param name="password">
                The password associated with the credential.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.WebTransfer.DownloadData(System.Uri,System.Boolean,System.Net.CookieContainer,System.Int32,System.String)">
            <summary>
                Downloads the specified internet resource as a <see cref="T:System.Byte"/> array.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="allowAutoRedirect">
                <see langword="true"/> to indicate that the request should follow
                redirection responses; otherwise, <see langword="false"/>.
            </param>
            <param name="cookieContainer">
                The cookies associated with the request.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.WebTransfer.DownloadData(System.Uri,System.Boolean,System.Int32,System.String)">
            <summary>
                Downloads the specified internet resource as a <see cref="T:System.Byte"/> array.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="allowAutoRedirect">
                <see langword="true"/> to indicate that the request should follow
                redirection responses; otherwise, <see langword="false"/>.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.WebTransfer.DownloadData(System.Uri,System.Net.CookieContainer,System.Int32,System.String)">
            <summary>
                Downloads the specified internet resource as a <see cref="T:System.Byte"/> array.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="cookieContainer">
                The cookies associated with the request.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.WebTransfer.DownloadData(System.Uri,System.Int32,System.String)">
            <summary>
                Downloads the specified internet resource as a <see cref="T:System.Byte"/> array.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.WebTransfer.DownloadData(System.String,System.String,System.String,System.Boolean,System.Net.CookieContainer,System.Int32,System.String)">
            <summary>
                Downloads the specified internet resource as a <see cref="T:System.Byte"/> array.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="userName">
                The username associated with the credential.
            </param>
            <param name="password">
                The password associated with the credential.
            </param>
            <param name="allowAutoRedirect">
                <see langword="true"/> to indicate that the request should follow
                redirection responses; otherwise, <see langword="false"/>.
            </param>
            <param name="cookieContainer">
                The cookies associated with the request.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.WebTransfer.DownloadData(System.String,System.String,System.String,System.Boolean,System.Int32,System.String)">
            <summary>
                Downloads the specified internet resource as a <see cref="T:System.Byte"/> array.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="userName">
                The username associated with the credential.
            </param>
            <param name="password">
                The password associated with the credential.
            </param>
            <param name="allowAutoRedirect">
                <see langword="true"/> to indicate that the request should follow
                redirection responses; otherwise, <see langword="false"/>.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.WebTransfer.DownloadData(System.String,System.String,System.String,System.Net.CookieContainer,System.Int32,System.String)">
            <summary>
                Downloads the specified internet resource as a <see cref="T:System.Byte"/> array.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="userName">
                The username associated with the credential.
            </param>
            <param name="password">
                The password associated with the credential.
            </param>
            <param name="cookieContainer">
                The cookies associated with the request.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.WebTransfer.DownloadData(System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
                Downloads the specified internet resource as a <see cref="T:System.Byte"/> array.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="userName">
                The username associated with the credential.
            </param>
            <param name="password">
                The password associated with the credential.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.WebTransfer.DownloadData(System.String,System.Boolean,System.Net.CookieContainer,System.Int32,System.String)">
            <summary>
                Downloads the specified internet resource as a <see cref="T:System.Byte"/> array.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="allowAutoRedirect">
                <see langword="true"/> to indicate that the request should follow
                redirection responses; otherwise, <see langword="false"/>.
            </param>
            <param name="cookieContainer">
                The cookies associated with the request.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.WebTransfer.DownloadData(System.String,System.Boolean,System.Int32,System.String)">
            <summary>
                Downloads the specified internet resource as a <see cref="T:System.Byte"/> array.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="allowAutoRedirect">
                <see langword="true"/> to indicate that the request should follow
                redirection responses; otherwise, <see langword="false"/>.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.WebTransfer.DownloadData(System.String,System.Net.CookieContainer,System.Int32,System.String)">
            <summary>
                Downloads the specified internet resource as a <see cref="T:System.Byte"/> array.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="cookieContainer">
                The cookies associated with the request.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.WebTransfer.DownloadData(System.String,System.Int32,System.String)">
            <summary>
                Downloads the specified internet resource as a <see cref="T:System.Byte"/> array.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.WebTransfer.DownloadString(System.Uri,System.String,System.String,System.Boolean,System.Net.CookieContainer,System.Int32,System.String)">
            <summary>
                Downloads the specified internet resource as a <see cref="T:System.String"/>.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="userName">
                The username associated with the credential.
            </param>
            <param name="password">
                The password associated with the credential.
            </param>
            <param name="allowAutoRedirect">
                <see langword="true"/> to indicate that the request should follow
                redirection responses; otherwise, <see langword="false"/>.
            </param>
            <param name="cookieContainer">
                The cookies associated with the request.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.WebTransfer.DownloadString(System.Uri,System.String,System.String,System.Boolean,System.Int32,System.String)">
            <summary>
                Downloads the specified internet resource as a <see cref="T:System.String"/>.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="userName">
                The username associated with the credential.
            </param>
            <param name="password">
                The password associated with the credential.
            </param>
            <param name="allowAutoRedirect">
                <see langword="true"/> to indicate that the request should follow
                redirection responses; otherwise, <see langword="false"/>.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.WebTransfer.DownloadString(System.Uri,System.String,System.String,System.Net.CookieContainer,System.Int32,System.String)">
            <summary>
                Downloads the specified internet resource as a <see cref="T:System.String"/>.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="userName">
                The username associated with the credential.
            </param>
            <param name="password">
                The password associated with the credential.
            </param>
            <param name="cookieContainer">
                The cookies associated with the request.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.WebTransfer.DownloadString(System.Uri,System.String,System.String,System.Int32,System.String)">
            <summary>
                Downloads the specified internet resource as a <see cref="T:System.String"/>.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="userName">
                The username associated with the credential.
            </param>
            <param name="password">
                The password associated with the credential.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.WebTransfer.DownloadString(System.Uri,System.Boolean,System.Net.CookieContainer,System.Int32,System.String)">
            <summary>
                Downloads the specified internet resource as a <see cref="T:System.String"/>.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="allowAutoRedirect">
                <see langword="true"/> to indicate that the request should follow
                redirection responses; otherwise, <see langword="false"/>.
            </param>
            <param name="cookieContainer">
                The cookies associated with the request.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.WebTransfer.DownloadString(System.Uri,System.Boolean,System.Int32,System.String)">
            <summary>
                Downloads the specified internet resource as a <see cref="T:System.String"/>.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="allowAutoRedirect">
                <see langword="true"/> to indicate that the request should follow
                redirection responses; otherwise, <see langword="false"/>.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.WebTransfer.DownloadString(System.Uri,System.Net.CookieContainer,System.Int32,System.String)">
            <summary>
                Downloads the specified internet resource as a <see cref="T:System.String"/>.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="cookieContainer">
                The cookies associated with the request.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.WebTransfer.DownloadString(System.Uri,System.Int32,System.String)">
            <summary>
                Downloads the specified internet resource as a <see cref="T:System.String"/>.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.WebTransfer.DownloadString(System.String,System.String,System.String,System.Boolean,System.Net.CookieContainer,System.Int32,System.String)">
            <summary>
                Downloads the specified internet resource as a <see cref="T:System.String"/>.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="userName">
                The username associated with the credential.
            </param>
            <param name="password">
                The password associated with the credential.
            </param>
            <param name="allowAutoRedirect">
                <see langword="true"/> to indicate that the request should follow
                redirection responses; otherwise, <see langword="false"/>.
            </param>
            <param name="cookieContainer">
                The cookies associated with the request.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.WebTransfer.DownloadString(System.String,System.String,System.String,System.Boolean,System.Int32,System.String)">
            <summary>
                Downloads the specified internet resource as a <see cref="T:System.String"/>.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="userName">
                The username associated with the credential.
            </param>
            <param name="password">
                The password associated with the credential.
            </param>
            <param name="allowAutoRedirect">
                <see langword="true"/> to indicate that the request should follow
                redirection responses; otherwise, <see langword="false"/>.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.WebTransfer.DownloadString(System.String,System.String,System.String,System.Net.CookieContainer,System.Int32,System.String)">
            <summary>
                Downloads the specified internet resource as a <see cref="T:System.String"/>.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="userName">
                The username associated with the credential.
            </param>
            <param name="password">
                The password associated with the credential.
            </param>
            <param name="cookieContainer">
                The cookies associated with the request.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.WebTransfer.DownloadString(System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
                Downloads the specified internet resource as a <see cref="T:System.String"/>.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="userName">
                The username associated with the credential.
            </param>
            <param name="password">
                The password associated with the credential.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.WebTransfer.DownloadString(System.String,System.Boolean,System.Net.CookieContainer,System.Int32,System.String)">
            <summary>
                Downloads the specified internet resource as a <see cref="T:System.String"/>.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="allowAutoRedirect">
                <see langword="true"/> to indicate that the request should follow
                redirection responses; otherwise, <see langword="false"/>.
            </param>
            <param name="cookieContainer">
                The cookies associated with the request.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.WebTransfer.DownloadString(System.String,System.Boolean,System.Int32,System.String)">
            <summary>
                Downloads the specified internet resource as a <see cref="T:System.String"/>.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="allowAutoRedirect">
                <see langword="true"/> to indicate that the request should follow
                redirection responses; otherwise, <see langword="false"/>.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.WebTransfer.DownloadString(System.String,System.Net.CookieContainer,System.Int32,System.String)">
            <summary>
                Downloads the specified internet resource as a <see cref="T:System.String"/>.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="cookieContainer">
                The cookies associated with the request.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.Network.WebTransfer.DownloadString(System.String,System.Int32,System.String)">
            <summary>
                Downloads the specified internet resource as a <see cref="T:System.String"/>.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="T:SilDev.Network.WebTransferAsync">
            <summary>
                Provides asynchronous downloading of internet resources.
            </summary>
        </member>
        <member name="P:SilDev.Network.WebTransferAsync.Address">
            <summary>
                Gets the address to the resource.
            </summary>
        </member>
        <member name="P:SilDev.Network.WebTransferAsync.FileName">
            <summary>
                Gets the local file name of the resource.
            </summary>
        </member>
        <member name="P:SilDev.Network.WebTransferAsync.FilePath">
            <summary>
                Gets the local path of the resource.
            </summary>
        </member>
        <member name="P:SilDev.Network.WebTransferAsync.BytesReceived">
            <summary>
                Gets the number of bytes received.
            </summary>
        </member>
        <member name="P:SilDev.Network.WebTransferAsync.TotalBytesToReceive">
            <summary>
                Gets the total number of bytes received.
            </summary>
        </member>
        <member name="P:SilDev.Network.WebTransferAsync.DataReceived">
            <summary>
                Gets the total number of <see cref="P:SilDev.Network.WebTransferAsync.BytesReceived"/> and
                <see cref="P:SilDev.Network.WebTransferAsync.BytesReceived"/> received in megabyte.
            </summary>
        </member>
        <member name="P:SilDev.Network.WebTransferAsync.ProgressPercentage">
            <summary>
                Gets the asynchronous progress percentage.
            </summary>
        </member>
        <member name="P:SilDev.Network.WebTransferAsync.TransferSpeed">
            <summary>
                Gets the megabyte per second of the asynchronous transfer.
            </summary>
        </member>
        <member name="P:SilDev.Network.WebTransferAsync.TransferSpeedAd">
            <summary>
                Gets the string representation of the speed of the asynchronous transfer.
            </summary>
        </member>
        <member name="P:SilDev.Network.WebTransferAsync.TimeElapsed">
            <summary>
                Gets the total elapsed time.
            </summary>
        </member>
        <member name="P:SilDev.Network.WebTransferAsync.HasCanceled">
            <summary>
                Determines whether the transfer has been canceled.
            </summary>
        </member>
        <member name="P:SilDev.Network.WebTransferAsync.IsBusy">
            <summary>
                Gets whether a transfer is in progress.
            </summary>
        </member>
        <member name="M:SilDev.Network.WebTransferAsync.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Network.WebTransferAsync"/> class.
            </summary>
        </member>
        <member name="M:SilDev.Network.WebTransferAsync.DownloadFile(System.Uri,System.String,System.String,System.String,System.Boolean,System.Net.CookieContainer,System.Int32,System.String,System.Boolean)">
            <summary>
                Downloads the specified internet resource to a local file.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="destPath">
                The local destination path of the file.
            </param>
            <param name="userName">
                The username associated with the credential.
            </param>
            <param name="password">
                The password associated with the credential.
            </param>
            <param name="allowAutoRedirect">
                <see langword="true"/> to indicate that the request should follow
                redirection responses; otherwise, <see langword="false"/>.
            </param>
            <param name="cookieContainer">
                The cookies associated with the request.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
            <param name="checkExists">
                <see langword="true"/> to check the file availability before downloading;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Network.WebTransferAsync.DownloadFile(System.Uri,System.String,System.String,System.String,System.Boolean,System.Int32,System.String,System.Boolean)">
            <summary>
                Downloads the specified internet resource to a local file.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="destPath">
                The local destination path of the file.
            </param>
            <param name="userName">
                The username associated with the credential.
            </param>
            <param name="password">
                The password associated with the credential.
            </param>
            <param name="allowAutoRedirect">
                <see langword="true"/> to indicate that the request should follow
                redirection responses; otherwise, <see langword="false"/>.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
            <param name="checkExists">
                <see langword="true"/> to check the file availability before downloading;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Network.WebTransferAsync.DownloadFile(System.Uri,System.String,System.String,System.String,System.Net.CookieContainer,System.Int32,System.String,System.Boolean)">
            <summary>
                Downloads the specified internet resource to a local file.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="destPath">
                The local destination path of the file.
            </param>
            <param name="userName">
                The username associated with the credential.
            </param>
            <param name="password">
                The password associated with the credential.
            </param>
            <param name="cookieContainer">
                The cookies associated with the request.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
            <param name="checkExists">
                <see langword="true"/> to check the file availability before downloading;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Network.WebTransferAsync.DownloadFile(System.Uri,System.String,System.String,System.String,System.Int32,System.String,System.Boolean)">
            <summary>
                Downloads the specified internet resource to a local file.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="destPath">
                The local destination path of the file.
            </param>
            <param name="userName">
                The username associated with the credential.
            </param>
            <param name="password">
                The password associated with the credential.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
            <param name="checkExists">
                <see langword="true"/> to check the file availability before downloading;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Network.WebTransferAsync.DownloadFile(System.Uri,System.String,System.Boolean,System.Net.CookieContainer,System.Int32,System.String,System.Boolean)">
            <summary>
                Downloads the specified internet resource to a local file.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="destPath">
                The local destination path of the file.
            </param>
            <param name="allowAutoRedirect">
                <see langword="true"/> to indicate that the request should follow
                redirection responses; otherwise, <see langword="false"/>.
            </param>
            <param name="cookieContainer">
                The cookies associated with the request.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
            <param name="checkExists">
                <see langword="true"/> to check the file availability before downloading;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Network.WebTransferAsync.DownloadFile(System.Uri,System.String,System.Net.CookieContainer,System.Int32,System.String,System.Boolean)">
            <summary>
                Downloads the specified internet resource to a local file.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="destPath">
                The local destination path of the file.
            </param>
            <param name="cookieContainer">
                The cookies associated with the request.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
            <param name="checkExists">
                <see langword="true"/> to check the file availability before downloading;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Network.WebTransferAsync.DownloadFile(System.Uri,System.String,System.Int32,System.String,System.Boolean)">
            <summary>
                Downloads the specified internet resource to a local file.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="destPath">
                The local destination path of the file.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
            <param name="checkExists">
                <see langword="true"/> to check the file availability before downloading;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Network.WebTransferAsync.DownloadFile(System.String,System.String,System.String,System.String,System.Boolean,System.Net.CookieContainer,System.Int32,System.String,System.Boolean)">
            <summary>
                Downloads the specified internet resource to a local file.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="destPath">
                The local destination path of the file.
            </param>
            <param name="userName">
                The username associated with the credential.
            </param>
            <param name="password">
                The password associated with the credential.
            </param>
            <param name="allowAutoRedirect">
                <see langword="true"/> to indicate that the request should follow
                redirection responses; otherwise, <see langword="false"/>.
            </param>
            <param name="cookieContainer">
                The cookies associated with the request.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
            <param name="checkExists">
                <see langword="true"/> to check the file availability before downloading;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Network.WebTransferAsync.DownloadFile(System.String,System.String,System.String,System.String,System.Boolean,System.Int32,System.String,System.Boolean)">
            <summary>
                Downloads the specified internet resource to a local file.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="destPath">
                The local destination path of the file.
            </param>
            <param name="userName">
                The username associated with the credential.
            </param>
            <param name="password">
                The password associated with the credential.
            </param>
            <param name="allowAutoRedirect">
                <see langword="true"/> to indicate that the request should follow
                redirection responses; otherwise, <see langword="false"/>.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
            <param name="checkExists">
                <see langword="true"/> to check the file availability before downloading;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Network.WebTransferAsync.DownloadFile(System.String,System.String,System.String,System.String,System.Net.CookieContainer,System.Int32,System.String,System.Boolean)">
            <summary>
                Downloads the specified internet resource to a local file.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="destPath">
                The local destination path of the file.
            </param>
            <param name="userName">
                The username associated with the credential.
            </param>
            <param name="password">
                The password associated with the credential.
            </param>
            <param name="cookieContainer">
                The cookies associated with the request.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
            <param name="checkExists">
                <see langword="true"/> to check the file availability before downloading;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Network.WebTransferAsync.DownloadFile(System.String,System.String,System.String,System.String,System.Int32,System.String,System.Boolean)">
            <summary>
                Downloads the specified internet resource to a local file.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="destPath">
                The local destination path of the file.
            </param>
            <param name="userName">
                The username associated with the credential.
            </param>
            <param name="password">
                The password associated with the credential.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
            <param name="checkExists">
                <see langword="true"/> to check the file availability before downloading;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Network.WebTransferAsync.DownloadFile(System.String,System.String,System.Boolean,System.Net.CookieContainer,System.Int32,System.String,System.Boolean)">
            <summary>
                Downloads the specified internet resource to a local file.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="destPath">
                The local destination path of the file.
            </param>
            <param name="allowAutoRedirect">
                <see langword="true"/> to indicate that the request should follow
                redirection responses; otherwise, <see langword="false"/>.
            </param>
            <param name="cookieContainer">
                The cookies associated with the request.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
            <param name="checkExists">
                <see langword="true"/> to check the file availability before downloading;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Network.WebTransferAsync.DownloadFile(System.String,System.String,System.Boolean,System.Int32,System.String,System.Boolean)">
            <summary>
                Downloads the specified internet resource to a local file.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="destPath">
                The local destination path of the file.
            </param>
            <param name="allowAutoRedirect">
                <see langword="true"/> to indicate that the request should follow
                redirection responses; otherwise, <see langword="false"/>.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
            <param name="checkExists">
                <see langword="true"/> to check the file availability before downloading;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Network.WebTransferAsync.DownloadFile(System.String,System.String,System.Net.CookieContainer,System.Int32,System.String,System.Boolean)">
            <summary>
                Downloads the specified internet resource to a local file.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="destPath">
                The local destination path of the file.
            </param>
            <param name="cookieContainer">
                The cookies associated with the request.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
            <param name="checkExists">
                <see langword="true"/> to check the file availability before downloading;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Network.WebTransferAsync.DownloadFile(System.String,System.String,System.Int32,System.String,System.Boolean)">
            <summary>
                Downloads the specified internet resource to a local file.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="destPath">
                The local destination path of the file.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
            <param name="checkExists">
                <see langword="true"/> to check the file availability before downloading;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Network.WebTransferAsync.CancelAsync">
            <summary>
                Cancels a pending asynchronous transfer.
            </summary>
        </member>
        <member name="M:SilDev.Network.WebTransferAsync.Dispose">
            <summary>
                Releases all resources used by this <see cref="T:SilDev.Network.WebTransferAsync"/>.
            </summary>
        </member>
        <member name="T:SilDev.Network.WebClientEx">
            <summary>
                Provides common methods for sending data to and receiving data from a
                resource identified by a URI.
            </summary>
        </member>
        <member name="P:SilDev.Network.WebClientEx.AllowAutoRedirect">
            <summary>
                Gets or sets a value that indicates whether the request should follow
                redirection responses.
            </summary>
        </member>
        <member name="P:SilDev.Network.WebClientEx.CookieContainer">
            <summary>
                Gets or sets the cookies associated with the request.
            </summary>
        </member>
        <member name="P:SilDev.Network.WebClientEx.Timeout">
            <summary>
                Gets or sets the time-out value in milliseconds for the
                <see cref="M:System.Net.HttpWebRequest.GetResponse"/> and
                <see cref="M:System.Net.HttpWebRequest.GetRequestStream"/> methods.
            </summary>
        </member>
        <member name="M:SilDev.Network.WebClientEx.#ctor(System.Boolean,System.Net.CookieContainer,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Network.WebClientEx"/> class.
            </summary>
            <param name="allowAutoRedirect">
                <see langword="true"/> to indicate that the request should follow
                redirection responses; otherwise, <see langword="false"/>.
            </param>
            <param name="cookieContainer">
                The cookies associated with the request.
            </param>
            <param name="timeout">
                The time-out value in milliseconds for the
                <see cref="M:System.Net.HttpWebRequest.GetResponse"/> and
                <see cref="M:System.Net.HttpWebRequest.GetRequestStream"/> methods.
            </param>
        </member>
        <member name="M:SilDev.Network.WebClientEx.#ctor(System.Net.CookieContainer,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Network.WebClientEx"/> class.
            </summary>
            <param name="cookieContainer">
                The cookies associated with the request.
            </param>
            <param name="timeout">
                The time-out value in milliseconds for the
                <see cref="M:System.Net.HttpWebRequest.GetResponse"/> and
                <see cref="M:System.Net.HttpWebRequest.GetRequestStream"/> methods.
            </param>
        </member>
        <member name="M:SilDev.Network.WebClientEx.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Network.WebClientEx"/> class.
            </summary>
            <param name="timeout">
                The time-out value in milliseconds for the
                <see cref="M:System.Net.HttpWebRequest.GetResponse"/> and
                <see cref="M:System.Net.HttpWebRequest.GetRequestStream"/> methods.
            </param>
        </member>
        <member name="M:SilDev.Network.WebClientEx.GetWebRequest(System.Uri)">
            <summary>
                Returns a <see cref="T:System.Net.WebRequest"/> object for the specified resource.
            </summary>
            <param name="address">
                A <see cref="T:System.Uri"/> that identifies the resource to request.
            </param>
        </member>
        <member name="T:SilDev.PathEx">
            <summary>
                Provides static methods based on the <see cref="T:System.IO.Path"/> class to perform
                operations on <see cref="T:System.String"/> instances that contain file or directory
                path information.
            </summary>
        </member>
        <member name="P:SilDev.PathEx.VolumeSeparatorStr">
            <summary>
                Provides a platform-specific volume separator character string.
                <para>
                    The <see cref="T:System.String"/> representation of
                    <see cref="F:System.IO.Path.VolumeSeparatorChar"/>.
                </para>
            </summary>
        </member>
        <member name="P:SilDev.PathEx.DirectorySeparatorStr">
            <summary>
                A platform-specific separator character string used to separate path
                strings in environment variables.
                <para>
                    The <see cref="T:System.String"/> representation of
                    <see cref="F:System.IO.Path.DirectorySeparatorChar"/>.
                </para>
            </summary>
        </member>
        <member name="P:SilDev.PathEx.AltDirectorySeparatorStr">
            <summary>
                Provides a platform-specific alternate character string used to separate
                directory levels in a path string that reflects a hierarchical file system
                organization.
                <para>
                    The <see cref="T:System.String"/> representation of
                    <see cref="F:System.IO.Path.AltDirectorySeparatorChar"/>.
                </para>
            </summary>
        </member>
        <member name="P:SilDev.PathEx.LocalPath">
            <summary>
                Gets the executable file path of the current process based on
                <see cref="M:System.Reflection.Assembly.GetEntryAssembly"/>.CodeBase.
            </summary>
        </member>
        <member name="P:SilDev.PathEx.LocalDir">
            <summary>
                Gets the executable located directory path of the current process based on
                <see cref="M:System.Reflection.Assembly.GetEntryAssembly"/>.CodeBase.
            </summary>
        </member>
        <member name="P:SilDev.PathEx.LibraryPath">
            <summary>
                Gets the file path of the current loaded Si13n7 Dev.™ CSharp Library.
            </summary>
        </member>
        <member name="P:SilDev.PathEx.LibraryDir">
            <summary>
                Gets the executable located directory path of the current loaded Si13n7
                Dev.™ CSharp Library.
            </summary>
        </member>
        <member name="M:SilDev.PathEx.FindAssemblyPath(System.Reflection.Assembly)">
            <summary>
                Returns the file path of the specified assembly, if available.
            </summary>
            <param name="element">
                The assembly element to find the path.
            </param>
        </member>
        <member name="M:SilDev.PathEx.FindAssemblyDir(System.Reflection.Assembly)">
            <summary>
                Returns the directory path of the specified assembly, if available.
            </summary>
            <param name="element">
                The assembly element to find the path.
            </param>
        </member>
        <member name="M:SilDev.PathEx.FindTypePath(System.Type)">
            <summary>
                Returns the file path of the specified type, if available.
            </summary>
            <param name="type">
                The type to find the path.
            </param>
        </member>
        <member name="M:SilDev.PathEx.FindTypeDir(System.Type)">
            <summary>
                Returns the directory path of the specified type, if available.
            </summary>
            <param name="type">
                The type to find the path.
            </param>
        </member>
        <member name="M:SilDev.PathEx.DirOrFileExists(System.String)">
            <summary>
                Combines <see cref="M:System.IO.Directory.Exists(System.String)"/> and
                <see cref="M:System.IO.File.Exists(System.String)"/> to determine whether the specified path
                element exists.
            </summary>
            <param name="path">
                The file or directory to check.
            </param>
        </member>
        <member name="M:SilDev.PathEx.DirsOrFilesExists(System.String[])">
            <summary>
                Combines <see cref="M:System.IO.Directory.Exists(System.String)"/> and
                <see cref="M:System.IO.File.Exists(System.String)"/> to determine whether the specified path
                elements exists.
            </summary>
            <param name="paths">
                An array of files and directories to check.
            </param>
        </member>
        <member name="M:SilDev.PathEx.DirOrFileIsLink(System.String)">
            <summary>
                Determines whether the specified path is specified as reparse point.
            </summary>
            <param name="path">
                The file or directory to check.
            </param>
        </member>
        <member name="M:SilDev.PathEx.IsValidPath(System.String)">
            <summary>
                Determines whether the specified path has a valid format.
            </summary>
            <param name="path">
                The specified path to check.
            </param>
        </member>
        <member name="M:SilDev.PathEx.IsDir(System.String)">
            <summary>
                Determines whether the specified path is specified as directory.
            </summary>
            <param name="path">
                The path to check.
            </param>
        </member>
        <member name="M:SilDev.PathEx.IsFile(System.String)">
            <summary>
                Determines whether the specified path is specified as file.
            </summary>
            <param name="path">
                The path to check.
            </param>
        </member>
        <member name="M:SilDev.PathEx.SetAttributes(System.String,System.IO.FileAttributes)">
            <summary>
                Sets the specified attributes for the specified path.
            </summary>
            <param name="path">
                The file or directory to change.
            </param>
            <param name="attr">
                The attributes to set.
            </param>
        </member>
        <member name="M:SilDev.PathEx.Combine(System.Char[],System.String)">
            <summary>
                Filters the specified string into a valid path.
                <para>
                    Allows relative paths, superordinate directory navigation and
                    environment variables based on
                    <see cref="M:SilDev.EnvironmentEx.GetVariableValue(System.String,System.Boolean)"/>.
                </para>
            </summary>
            <param name="invalidPathChars">
                A sequence of invalid chars used as a filter.
            </param>
            <param name="path0">
                The path to be filtered.
            </param>
        </member>
        <member name="M:SilDev.PathEx.Combine(System.Char[],System.String,System.String)">
            <summary>
                Combines the specified strings and filters the result into a valid path.
                <para>
                    Allows relative paths, superordinate directory navigation and
                    environment variables based on
                    <see cref="M:SilDev.EnvironmentEx.GetVariableValue(System.String,System.Boolean)"/>.
                </para>
            </summary>
            <param name="invalidPathChars">
                A sequence of invalid chars used as a filter.
            </param>
            <param name="path0">
                The first path to combine.
            </param>
            <param name="path1">
                The second path to combine.
            </param>
        </member>
        <member name="M:SilDev.PathEx.Combine(System.Char[],System.String,System.String,System.String)">
            <summary>
                Combines the specified strings and filters the result into a valid path.
                <para>
                    Allows relative paths, superordinate directory navigation and
                    environment variables based on
                    <see cref="M:SilDev.EnvironmentEx.GetVariableValue(System.String,System.Boolean)"/>.
                </para>
            </summary>
            <param name="invalidPathChars">
                A sequence of invalid chars used as a filter.
            </param>
            <param name="path0">
                The first path to combine.
            </param>
            <param name="path1">
                The second path to combine.
            </param>
            <param name="path2">
                The third path to combine.
            </param>
        </member>
        <member name="M:SilDev.PathEx.Combine(System.Char[],System.String[])">
            <summary>
                Combines the specified strings and filters the result into a valid path.
                <para>
                    Allows relative paths, superordinate directory navigation and
                    environment variables based on
                    <see cref="M:SilDev.EnvironmentEx.GetVariableValue(System.String,System.Boolean)"/>.
                </para>
            </summary>
            <param name="invalidPathChars">
                A sequence of invalid chars used as a filter.
            </param>
            <param name="paths">
                An array of paths to be combined.
            </param>
        </member>
        <member name="M:SilDev.PathEx.Combine(System.Char[],System.Environment.SpecialFolder,System.String)">
            <summary>
                Combines the specified <see cref="T:System.Environment.SpecialFolder"/> value with
                the specified string and filters the result into a valid path.
                <para>
                    Allows relative paths, superordinate directory navigation and
                    environment variables based on
                    <see cref="M:SilDev.EnvironmentEx.GetVariableValue(System.String,System.Boolean)"/>.
                </para>
            </summary>
            <param name="invalidPathChars">
                A sequence of invalid chars used as a filter.
            </param>
            <param name="specialFolder">
                A specified enumerated constant used to retrieve directory paths to system
                special folders.
            </param>
            <param name="path0">
                The path to be filtered.
            </param>
        </member>
        <member name="M:SilDev.PathEx.Combine(System.Char[],System.Environment.SpecialFolder,System.String,System.String)">
            <summary>
                Combines the specified <see cref="T:System.Environment.SpecialFolder"/> value with
                the specified strings and filters the result into a valid path.
                <para>
                    Allows relative paths, superordinate directory navigation and
                    environment variables based on
                    <see cref="M:SilDev.EnvironmentEx.GetVariableValue(System.String,System.Boolean)"/>.
                </para>
            </summary>
            <param name="invalidPathChars">
                A sequence of invalid chars used as a filter.
            </param>
            <param name="specialFolder">
                A specified enumerated constant used to retrieve directory paths to system
                special folders.
            </param>
            <param name="path0">
                The first path to combine.
            </param>
            <param name="path1">
                The second path to combine.
            </param>
        </member>
        <member name="M:SilDev.PathEx.Combine(System.Char[],System.Environment.SpecialFolder,System.String,System.String,System.String)">
            <summary>
                Combines the specified <see cref="T:System.Environment.SpecialFolder"/> value with
                the specified strings and filters the result into a valid path.
                <para>
                    Allows relative paths, superordinate directory navigation and
                    environment variables based on
                    <see cref="M:SilDev.EnvironmentEx.GetVariableValue(System.String,System.Boolean)"/>.
                </para>
            </summary>
            <param name="invalidPathChars">
                A sequence of invalid chars used as a filter.
            </param>
            <param name="specialFolder">
                A specified enumerated constant used to retrieve directory paths to system
                special folders.
            </param>
            <param name="path0">
                The first path to combine.
            </param>
            <param name="path1">
                The second path to combine.
            </param>
            <param name="path2">
                The third path to combine.
            </param>
        </member>
        <member name="M:SilDev.PathEx.Combine(System.Char[],System.Environment.SpecialFolder,System.String[])">
            <summary>
                Combines the specified <see cref="T:System.Environment.SpecialFolder"/> value with
                the specified strings and filters the result into a valid path.
                <para>
                    Allows relative paths, superordinate directory navigation and
                    environment variables based on
                    <see cref="M:SilDev.EnvironmentEx.GetVariableValue(System.String,System.Boolean)"/>.
                </para>
            </summary>
            <param name="invalidPathChars">
                A sequence of invalid chars used as a filter.
            </param>
            <param name="specialFolder">
                A specified enumerated constant used to retrieve directory paths to system
                special folders.
            </param>
            <param name="paths">
                An array of paths to be combined.
            </param>
        </member>
        <member name="M:SilDev.PathEx.Combine(System.Environment.SpecialFolder,System.String)">
            <summary>
                Combines the specified <see cref="T:System.Environment.SpecialFolder"/> value with
                the specified string and filters the result into a valid path.
                <para>
                    Allows relative paths, superordinate directory navigation and
                    environment variables based on
                    <see cref="M:SilDev.EnvironmentEx.GetVariableValue(System.String,System.Boolean)"/>.
                </para>
            </summary>
            <param name="specialFolder">
                A specified enumerated constant used to retrieve directory paths to system
                special folders.
            </param>
            <param name="path0">
                The path to be filtered.
            </param>
        </member>
        <member name="M:SilDev.PathEx.Combine(System.Environment.SpecialFolder,System.String,System.String)">
            <summary>
                Combines the specified <see cref="T:System.Environment.SpecialFolder"/> value with
                the specified strings and filters the result into a valid path.
                <para>
                    Allows relative paths, superordinate directory navigation and
                    environment variables based on
                    <see cref="M:SilDev.EnvironmentEx.GetVariableValue(System.String,System.Boolean)"/>.
                </para>
            </summary>
            <param name="path0">
                The first path to combine.
            </param>
            <param name="path1">
                The second path to combine.
            </param>
        </member>
        <member name="M:SilDev.PathEx.Combine(System.Environment.SpecialFolder,System.String,System.String,System.String)">
            <summary>
                Combines the specified <see cref="T:System.Environment.SpecialFolder"/> value with
                the specified strings and filters the result into a valid path.
                <para>
                    Allows relative paths, superordinate directory navigation and
                    environment variables based on
                    <see cref="M:SilDev.EnvironmentEx.GetVariableValue(System.String,System.Boolean)"/>.
                </para>
            </summary>
            <param name="path0">
                The first path to combine.
            </param>
            <param name="path1">
                The second path to combine.
            </param>
            <param name="path2">
                The third path to combine.
            </param>
        </member>
        <member name="M:SilDev.PathEx.Combine(System.Environment.SpecialFolder,System.String[])">
            <summary>
                Combines the specified <see cref="T:System.Environment.SpecialFolder"/> value with
                the specified strings and filters the result into a valid path.
                <para>
                    Allows relative paths, superordinate directory navigation and
                    environment variables based on
                    <see cref="M:SilDev.EnvironmentEx.GetVariableValue(System.String,System.Boolean)"/>.
                </para>
            </summary>
            <param name="specialFolder">
                A specified enumerated constant used to retrieve directory paths to system
                special folders.
            </param>
            <param name="paths">
                An array of paths to be combined.
            </param>
        </member>
        <member name="M:SilDev.PathEx.Combine(System.String)">
            <summary>
                Filters the specified string into a valid path.
                <para>
                    Allows relative paths, superordinate directory navigation and
                    environment variables based on
                    <see cref="M:SilDev.EnvironmentEx.GetVariableValue(System.String,System.Boolean)"/>.
                </para>
            </summary>
            <param name="path0">
                The string to be filtered.
            </param>
        </member>
        <member name="M:SilDev.PathEx.Combine(System.String,System.String)">
            <summary>
                Combines the specified strings and filters the result into a valid path.
                <para>
                    Allows relative paths, superordinate directory navigation and
                    environment variables based on
                    <see cref="M:SilDev.EnvironmentEx.GetVariableValue(System.String,System.Boolean)"/>.
                </para>
            </summary>
            <param name="path0">
                The first path to combine.
            </param>
            <param name="path1">
                The second path to combine.
            </param>
        </member>
        <member name="M:SilDev.PathEx.Combine(System.String,System.String,System.String)">
            <summary>
                Combines the specified strings and filters the result into a valid path.
                <para>
                    Allows relative paths, superordinate directory navigation and
                    environment variables based on
                    <see cref="M:SilDev.EnvironmentEx.GetVariableValue(System.String,System.Boolean)"/>.
                </para>
            </summary>
            <param name="path0">
                The first path to combine.
            </param>
            <param name="path1">
                The second path to combine.
            </param>
            <param name="path2">
                The third path to combine.
            </param>
        </member>
        <member name="M:SilDev.PathEx.Combine(System.String[])">
            <summary>
                Combines the specified strings and filters the result into a valid path.
                <para>
                    Allows relative paths, superordinate directory navigation and
                    environment variables based on
                    <see cref="M:SilDev.EnvironmentEx.GetVariableValue(System.String,System.Boolean)"/>.
                </para>
            </summary>
            <param name="paths">
                The sequence of strings to be filtered.
            </param>
        </member>
        <member name="M:SilDev.PathEx.AltCombine(System.Char[],System.String)">
            <summary>
                Filters the specified string into a valid path.
                <para>
                    Allows relative paths, superordinate directory navigation and
                    environment variables based on
                    <see cref="M:SilDev.EnvironmentEx.GetVariableValue(System.String,System.Boolean)"/>.
                </para>
                <para>
                    <see cref="F:System.IO.Path.AltDirectorySeparatorChar"/> is used to separate path
                    levels.
                </para>
            </summary>
            <param name="invalidPathChars">
                A sequence of invalid chars used as a filter.
            </param>
            <param name="path0">
                An array of parts of the path.
            </param>
        </member>
        <member name="M:SilDev.PathEx.AltCombine(System.Char[],System.String,System.String)">
            <summary>
                Combines the specified strings and filters the result into a valid path.
                <para>
                    Allows relative paths, superordinate directory navigation and
                    environment variables based on
                    <see cref="M:SilDev.EnvironmentEx.GetVariableValue(System.String,System.Boolean)"/>.
                </para>
                <para>
                    <see cref="F:System.IO.Path.AltDirectorySeparatorChar"/> is used to separate path
                    levels.
                </para>
            </summary>
            <param name="invalidPathChars">
                A sequence of invalid chars used as a filter.
            </param>
            <param name="path0">
                The string to be filtered.
            </param>
        </member>
        <member name="M:SilDev.PathEx.AltCombine(System.Char[],System.String,System.String,System.String)">
            <summary>
                Combines the specified strings and filters the result into a valid path.
                <para>
                    Allows relative paths, superordinate directory navigation and
                    environment variables based on
                    <see cref="M:SilDev.EnvironmentEx.GetVariableValue(System.String,System.Boolean)"/>.
                </para>
                <para>
                    <see cref="F:System.IO.Path.AltDirectorySeparatorChar"/> is used to separate path
                    levels.
                </para>
            </summary>
            <param name="invalidPathChars">
                A sequence of invalid chars used as a filter.
            </param>
            <param name="path0">
                The string to be filtered.
            </param>
        </member>
        <member name="M:SilDev.PathEx.AltCombine(System.Char[],System.String[])">
            <summary>
                Combines the specified strings and filters the result into a valid path.
                <para>
                    Allows relative paths, superordinate directory navigation and
                    environment variables based on
                    <see cref="M:SilDev.EnvironmentEx.GetVariableValue(System.String,System.Boolean)"/>.
                </para>
                <para>
                    <see cref="F:System.IO.Path.AltDirectorySeparatorChar"/> is used to separate path
                    levels.
                </para>
            </summary>
            <param name="invalidPathChars">
                A sequence of invalid chars used as a filter.
            </param>
            <param name="paths">
                The sequence of strings to be filtered.
            </param>
        </member>
        <member name="M:SilDev.PathEx.AltCombine(System.String)">
            <summary>
                Filters the specified string into a valid path.
                <para>
                    Allows relative paths, superordinate directory navigation and
                    environment variables based on
                    <see cref="M:SilDev.EnvironmentEx.GetVariableValue(System.String,System.Boolean)"/>.
                </para>
                <para>
                    <see cref="F:System.IO.Path.AltDirectorySeparatorChar"/> is used to separate path
                    levels.
                </para>
            </summary>
            <param name="path0">
                The string to be filtered.
            </param>
        </member>
        <member name="M:SilDev.PathEx.AltCombine(System.String,System.String)">
            <summary>
                Combines the specified strings and filters the result into a valid path.
                <para>
                    Allows relative paths, superordinate directory navigation and
                    environment variables based on
                    <see cref="M:SilDev.EnvironmentEx.GetVariableValue(System.String,System.Boolean)"/>.
                </para>
                <para>
                    <see cref="F:System.IO.Path.AltDirectorySeparatorChar"/> is used to separate path
                    levels.
                </para>
            </summary>
            <param name="path0">
                The string to be filtered.
            </param>
        </member>
        <member name="M:SilDev.PathEx.AltCombine(System.String,System.String,System.String)">
            <summary>
                Combines the specified strings and filters the result into a valid path.
                <para>
                    Allows relative paths, superordinate directory navigation and
                    environment variables based on
                    <see cref="M:SilDev.EnvironmentEx.GetVariableValue(System.String,System.Boolean)"/>.
                </para>
                <para>
                    <see cref="F:System.IO.Path.AltDirectorySeparatorChar"/> is used to separate path
                    levels.
                </para>
            </summary>
            <param name="path0">
                The string to be filtered.
            </param>
        </member>
        <member name="M:SilDev.PathEx.AltCombine(System.String[])">
            <summary>
                Combines the specified strings and filters the result into a valid path.
                <para>
                    Allows relative paths, superordinate directory navigation and
                    environment variables based on
                    <see cref="M:SilDev.EnvironmentEx.GetVariableValue(System.String,System.Boolean)"/>.
                </para>
                <para>
                    <see cref="F:System.IO.Path.AltDirectorySeparatorChar"/> is used to separate path
                    levels.
                </para>
            </summary>
            <param name="paths">
                The sequence of strings to be filtered.
            </param>
        </member>
        <member name="M:SilDev.PathEx.GetDirectoryName(System.String,System.Boolean)">
            <summary>
                Returns the directory information for the specified path string.
            </summary>
            <param name="path">
                The path of a file or directory.
            </param>
            <param name="convertEnvVars">
                <see langword="true"/> to convert environment variables; otherwise,
                <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.PathEx.GetUniqueName(System.String,System.String,System.Int32)">
            <summary>
                Returns a unique name starting with a given prefix, followed by a hash of
                the specified length and a specified suffix.
            </summary>
            <param name="prefix">
                This text is at the beginning of the name.
                <para>
                    Uppercase letters are converted to lowercase letters. Supported
                    characters are only from '0' to '9' and from 'a' to 'z' but can be
                    completely empty to omit the prefix.
                </para>
            </param>
            <param name="suffix">
                This text is at the end of the name.
                <para>
                    If it does not begin with a dot, it will be added. Uppercase letters
                    are converted to lowercase letters. Supported characters are only from
                    '0' to '9' and from 'a' to 'z' but can be completely empty to omit the
                    suffix.
                </para>
            </param>
            <param name="hashLen">
                The length of the hash. Valid values are 4 through 24.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                hashLen is not between 4 and 24.
            </exception>
            <exception cref="T:SilDev.ArgumentInvalidException">
                prefix or suffix contains invalid characters.
            </exception>
        </member>
        <member name="M:SilDev.PathEx.GetUniquePath(System.String,System.String,System.String,System.Int32)">
            <summary>
                Returns a fully qualified path with unique name starting with a given
                prefix, followed by a hash of the specified length and a specified suffix.
            </summary>
            <param name="baseDir">
                This home directory for the uniquely named file or directory.
            </param>
            <param name="namePrefix">
                This text is at the beginning of the name.
                <para>
                    Uppercase letters are converted to lowercase letters. Supported
                    characters are only from '0' to '9' and from 'a' to 'z' but can be
                    completely empty to omit the prefix.
                </para>
            </param>
            <param name="nameSuffix">
                This text is at the end of the name.
                <para>
                    If it does not begin with a dot, it will be added. Uppercase letters
                    are converted to lowercase letters. Supported characters are only from
                    '0' to '9' and from 'a' to 'z' but can be completely empty to omit the
                    suffix.
                </para>
            </param>
            <param name="hashLen">
                The length of the hash. Valid values are 4 through 24.
            </param>
            <exception cref="T:System.ArgumentNullException">
                baseDir is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                hashLen is not between 4 and 24.
            </exception>
            <exception cref="T:SilDev.ArgumentInvalidException">
                baseDir is not a valid path.
            </exception>
            <exception cref="T:SilDev.ArgumentInvalidException">
                namePrefix or nameSuffix contains invalid characters.
            </exception>
        </member>
        <member name="M:SilDev.PathEx.GetLocks(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Returns processes that have locked the specified paths.
            </summary>
            <param name="paths">
                An sequence of strings that contains file and/or directory paths to check.
            </param>
            <exception cref="T:System.ComponentModel.Win32Exception">
            </exception>
        </member>
        <member name="M:SilDev.PathEx.GetLocks(System.String)">
            <summary>
                Returns processes that have locked the specified path.
            </summary>
            <param name="path">
                The path of a file or directory to check.
            </param>
        </member>
        <member name="M:SilDev.PathEx.ForceDelete(System.String,System.Boolean,System.Int32)">
            <summary>
                Deletes any file or directory.
                <para>
                    Immediately stops all specified processes that are locking this file or
                    directory.
                </para>
            </summary>
            <param name="path">
                The path of the file or directory to be deleted.
            </param>
            <param name="elevated">
                <see langword="true"/> to run this task with administrator privileges if
                the deletion fails; otherwise, <see langword="false"/>.
            </param>
            <param name="timelimit">
                The time limit in milliseconds.
            </param>
        </member>
        <member name="T:SilDev.PathNotFoundException">
            <summary>
                The exception thrown when an attempt to access an target fails.
            </summary>
        </member>
        <member name="P:SilDev.PathNotFoundException.Message">
            <summary>
                Gets a message that describes the current exception.
            </summary>
        </member>
        <member name="M:SilDev.PathNotFoundException.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.PathNotFoundException"/>
                class.
            </summary>
        </member>
        <member name="M:SilDev.PathNotFoundException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.PathNotFoundException"/> class
                with the target that causes this exception.
            </summary>
            <param name="target">
                The target that caused the exception.
            </param>
        </member>
        <member name="M:SilDev.PathNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.PathNotFoundException"/> class
                with a specified error message and the exception that is the cause of this
                exception.
            </summary>
            <param name="target">
                The target that caused the exception.
            </param>
            <param name="innerException">
                The exception that is the cause of the current exception, or a null
                reference.
            </param>
        </member>
        <member name="M:SilDev.PathNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.PathNotFoundException"/> class
                with serialized data.
            </summary>
            <param name="info">
                The object that holds the serialized object data.
            </param>
            <param name="context">
                The contextual information about the source or destination.
            </param>
        </member>
        <member name="M:SilDev.PathNotFoundException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object with the target and
                additional exception information.
            </summary>
            <param name="info">
                The object that holds the serialized object data.
            </param>
            <param name="context">
                The contextual information about the source or destination.
            </param>
        </member>
        <member name="T:SilDev.MachineType">
            <summary>
                Provides enumerated values of the machine field values that specifies its
                CPU type.
            </summary>
            ReSharper disable InconsistentNaming
        </member>
        <member name="F:SilDev.MachineType.Unknown">
            <summary>
                The contents of this field are assumed to be applicable to any machine
                type.
            </summary>
        </member>
        <member name="F:SilDev.MachineType.AM33">
            <summary>
                Matsushita AM33.
            </summary>
        </member>
        <member name="F:SilDev.MachineType.AMD64">
            <summary>
                AMD64 (x64).
            </summary>
        </member>
        <member name="F:SilDev.MachineType.ARM">
            <summary>
                ARM little endian.
            </summary>
        </member>
        <member name="F:SilDev.MachineType.ARM64">
            <summary>
                ARM64 little endian.
            </summary>
        </member>
        <member name="F:SilDev.MachineType.ARMNT">
            <summary>
                ARM Thumb-2 little endian.
            </summary>
        </member>
        <member name="F:SilDev.MachineType.EBC">
            <summary>
                EFI byte code.
            </summary>
        </member>
        <member name="F:SilDev.MachineType.I386">
            <summary>
                Intel 386 or later processors and compatible processors.
            </summary>
        </member>
        <member name="F:SilDev.MachineType.IA64">
            <summary>
                Intel Itanium processor family.
            </summary>
        </member>
        <member name="F:SilDev.MachineType.M32R">
            <summary>
                Mitsubishi M32R little endian.
            </summary>
        </member>
        <member name="F:SilDev.MachineType.MIPS16">
            <summary>
                MIPS16.
            </summary>
        </member>
        <member name="F:SilDev.MachineType.MIPSFPU">
            <summary>
                MIPS with FPU.
            </summary>
        </member>
        <member name="F:SilDev.MachineType.MIPSFPU16">
            <summary>
                MIPS16 with FPU.
            </summary>
        </member>
        <member name="F:SilDev.MachineType.POWERPC">
            <summary>
                Power PC little endian.
            </summary>
        </member>
        <member name="F:SilDev.MachineType.POWERPCFP">
            <summary>
                Power PC with floating point support.
            </summary>
        </member>
        <member name="F:SilDev.MachineType.R4000">
            <summary>
                MIPS little endian.
            </summary>
        </member>
        <member name="F:SilDev.MachineType.RISCV32">
            <summary>
                RISC-V 32-bit address space.
            </summary>
        </member>
        <member name="F:SilDev.MachineType.RISCV64">
            <summary>
                RISC-V 64-bit address space.
            </summary>
        </member>
        <member name="F:SilDev.MachineType.RISCV128">
            <summary>
                RISC-V 128-bit address space.
            </summary>
        </member>
        <member name="F:SilDev.MachineType.SH3">
            <summary>
                Hitachi SH3.
            </summary>
        </member>
        <member name="F:SilDev.MachineType.SH3DSP">
            <summary>
                Hitachi SH3 DSP.
            </summary>
        </member>
        <member name="F:SilDev.MachineType.SH4">
            <summary>
                Hitachi SH4.
            </summary>
        </member>
        <member name="F:SilDev.MachineType.SH5">
            <summary>
                Hitachi SH5.
            </summary>
        </member>
        <member name="F:SilDev.MachineType.THUMB">
            <summary>
                ARM Thumb.
            </summary>
        </member>
        <member name="F:SilDev.MachineType.WCEMIPSV2">
            <summary>
                MIPS little-endian WCE v2.
            </summary>
        </member>
        <member name="T:SilDev.PortableExecutable">
            <summary>
                Provides basic functionality for reading PE (Portable Executable) header
                information.
            </summary>
        </member>
        <member name="M:SilDev.PortableExecutable.GetMachineTypes(System.String)">
            <summary>
                Determines the CPU type of the specified file.
            </summary>
            <param name="path">
                The file to check.
            </param>
        </member>
        <member name="M:SilDev.PortableExecutable.Is64Bit(System.String)">
            <summary>
                Determines whether the specified file was compiled for 64-bit platform
                environments.
            </summary>
            <param name="path">
                The file to check.
            </param>
        </member>
        <member name="T:SilDev.ProcessEx">
            <summary>
                Provides static methods based on the <see cref="T:System.Diagnostics.Process"/> class to enable
                you to start local system processes.
            </summary>
        </member>
        <member name="P:SilDev.ProcessEx.Current">
            <summary>
                Gets the currently active process.
            </summary>
        </member>
        <member name="P:SilDev.ProcessEx.CurrentHandle">
            <summary>
                Gets the handle of the current process instance.
            </summary>
        </member>
        <member name="P:SilDev.ProcessEx.CurrentId">
            <summary>
                Gets the unique identifier of the current process instance.
            </summary>
        </member>
        <member name="P:SilDev.ProcessEx.CurrentName">
            <summary>
                Gets the name of the current process instance.
            </summary>
        </member>
        <member name="P:SilDev.ProcessEx.CurrentParent">
            <summary>
                Gets the parent process of the current process instance.
            </summary>
        </member>
        <member name="M:SilDev.ProcessEx.GetParent(System.Diagnostics.Process)">
            <summary>
                Gets the parent process of this <see cref="T:System.Diagnostics.Process"/>.
            </summary>
            <param name="process">
                The <see cref="T:System.Diagnostics.Process"/> component.
            </param>
        </member>
        <member name="M:SilDev.ProcessEx.SetParent(System.Diagnostics.Process,System.Diagnostics.Process)">
            <summary>
                Sets the parent process of this <see cref="T:System.Diagnostics.Process"/>.
            </summary>
            <param name="process">
                The child <see cref="T:System.Diagnostics.Process"/> component.
            </param>
            <param name="newParent">
                The new parent <see cref="T:System.Diagnostics.Process"/> component.
            </param>
        </member>
        <member name="M:SilDev.ProcessEx.GetInstances(System.String,System.Boolean)">
            <summary>
                Gets all active instances associated with the specified application. If the
                specified name/path is <see langword="null"/>, all running processes are
                returned.
            </summary>
            <param name="nameOrPath">
                The filename or the full path to the application to check.
            </param>
            <param name="doubleTap">
                <see langword="true"/> to try to get firstly by the path, then by name;
                otherwise, <see langword="false"/>.
                <para>
                    Please note that this option has no effect if the first parameter
                    contains only a name.
                </para>
            </param>
        </member>
        <member name="M:SilDev.ProcessEx.InstancesCount(System.String,System.Boolean)">
            <summary>
                Returns the number of all active instances associated with the specified
                application. If the specified name/path is <see langword="null"/>, the
                number of all running processes is returned.
            </summary>
            <param name="nameOrPath">
                The filename or the full path to the application to check.
            </param>
            <param name="doubleTap">
                <see langword="true"/> to try to check firstly by the path, then by name;
                otherwise, <see langword="false"/>.
                <para>
                    Please note that this option has no effect if the first parameter
                    contains only a name.
                </para>
            </param>
        </member>
        <member name="M:SilDev.ProcessEx.IsRunning(System.String,System.Boolean)">
            <summary>
                Determines whether the specified file is matched with a running process.
            </summary>
            <param name="nameOrPath">
                The filename or the full path to the application to check.
            </param>
            <param name="doubleTap">
                <see langword="true"/> to try to check firstly by the path, then by name;
                otherwise, <see langword="false"/>.
                <para>
                    Please note that this option has no effect if the first parameter
                    contains only a name.
                </para>
            </param>
        </member>
        <member name="M:SilDev.ProcessEx.IsSandboxed(System.Diagnostics.Process)">
            <summary>
                Determines whether this <see cref="T:System.Diagnostics.Process"/> is running in a sandbox
                environment.
                <para>
                    Hint: This function supports only the program Sandboxie.
                </para>
            </summary>
            <param name="process">
                The <see cref="T:System.Diagnostics.Process"/> to check.
            </param>
        </member>
        <member name="M:SilDev.ProcessEx.GetCommandLineArgs(System.Diagnostics.Process)">
            <summary>
                Returns a string array containing the command-line arguments for this
                <see cref="T:System.Diagnostics.Process"/>.
            </summary>
            <param name="process">
                The <see cref="T:System.Diagnostics.Process"/> component.
            </param>
        </member>
        <member name="M:SilDev.ProcessEx.GetCommandLine(System.Diagnostics.Process)">
            <summary>
                Returns the command-line arguments for this process.
            </summary>
            <param name="process">
                The <see cref="T:System.Diagnostics.Process"/> component.
            </param>
        </member>
        <member name="M:SilDev.ProcessEx.Start(System.Diagnostics.Process,System.Boolean)">
            <summary>
                Starts (or reuses) the process resource that is specified by the current
                <see cref="T:System.Diagnostics.Process"/>.StartInfo property of this <see cref="T:System.Diagnostics.Process"/> and
                associates it with the component.
                <para>
                    If the <see cref="T:System.Diagnostics.Process"/>.StartInfo.WorkingDirectory parameter is
                    undefined, it is created by <see cref="T:System.Diagnostics.Process"/>.StartInfo.FileName
                    parameter.
                </para>
            </summary>
            <param name="process">
                The <see cref="T:System.Diagnostics.Process"/> component to start.
            </param>
            <param name="dispose">
                <see langword="true"/> to release all resources used by the
                <see cref="T:System.Diagnostics.Process"/> component, if the process has been started;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.ProcessEx.Start(System.Diagnostics.ProcessStartInfo,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Diagnostics.Process"/> class from the
                specified <see cref="T:System.Diagnostics.ProcessStartInfo"/> and starts (or reuses) the process
                component.
                <para>
                    If WorkingDirectory parameter is undefined, it is created by the
                    FileName parameter.
                </para>
            </summary>
            <param name="processStartInfo">
                The <see cref="T:System.Diagnostics.ProcessStartInfo"/> component to initialize a new
                <see cref="T:System.Diagnostics.Process"/>.
            </param>
            <param name="dispose">
                <see langword="true"/> to release all resources used by the
                <see cref="T:System.Diagnostics.Process"/> component, if the process has been started;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.ProcessEx.Start(System.String,System.String,System.String,System.Boolean,System.Diagnostics.ProcessWindowStyle,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Diagnostics.Process"/> class from the
                specified parameters and starts (or reuses) the process component.
            </summary>
            <param name="fileName">
                The application to start.
            </param>
            <param name="workingDirectory">
                The working directory for the process to be started.
            </param>
            <param name="arguments">
                The command-line arguments to use when starting the application.
            </param>
            <param name="verbRunAs">
                <see langword="true"/> to start the application with administrator
                privileges; otherwise, <see langword="false"/>.
            </param>
            <param name="processWindowStyle">
                The window state to use when the process is started.
            </param>
            <param name="dispose">
                <see langword="true"/> to release all resources used by the
                <see cref="T:System.Diagnostics.Process"/> component, if the process has been started;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.ProcessEx.Start(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Diagnostics.Process"/> class from the
                specified parameters and starts (or reuses) the process component.
            </summary>
            <param name="fileName">
                The application to start.
            </param>
            <param name="workingDirectory">
                The working directory for the process to be started.
            </param>
            <param name="arguments">
                The command-line arguments to use when starting the application.
            </param>
            <param name="verbRunAs">
                <see langword="true"/> to start the application with administrator
                privileges; otherwise, <see langword="false"/>.
            </param>
            <param name="dispose">
                <see langword="true"/> to release all resources used by the
                <see cref="T:System.Diagnostics.Process"/> component, if the process has been started;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.ProcessEx.Start(System.String,System.String,System.Boolean,System.Diagnostics.ProcessWindowStyle,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Diagnostics.Process"/> class from the
                specified parameters and starts (or reuses) the process component.
            </summary>
            <param name="fileName">
                The application to start.
            </param>
            <param name="arguments">
                The command-line arguments to use when starting the application.
            </param>
            <param name="verbRunAs">
                <see langword="true"/> to start the application with administrator
                privileges; otherwise, <see langword="false"/>.
            </param>
            <param name="processWindowStyle">
                The window state to use when the process is started.
            </param>
            <param name="dispose">
                <see langword="true"/> to release all resources used by the
                <see cref="T:System.Diagnostics.Process"/> component if the process has been started; otherwise,
                <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.ProcessEx.Start(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Diagnostics.Process"/> class from the
                specified parameters and starts (or reuses) the process component.
            </summary>
            <param name="fileName">
                The application to start.
            </param>
            <param name="arguments">
                The command-line arguments to use when starting the application.
            </param>
            <param name="verbRunAs">
                <see langword="true"/> to start the application with administrator
                privileges; otherwise, <see langword="false"/>.
            </param>
            <param name="dispose">
                <see langword="true"/> to release all resources used by the
                <see cref="T:System.Diagnostics.Process"/> component, if the process has been started;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.ProcessEx.Start(System.String,System.Boolean,System.Diagnostics.ProcessWindowStyle,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Diagnostics.Process"/> class from the
                specified parameters and starts (or reuses) the process component.
            </summary>
            <param name="fileName">
                The application to start.
            </param>
            <param name="verbRunAs">
                <see langword="true"/> to start the application with administrator
                privileges; otherwise, <see langword="false"/>.
            </param>
            <param name="processWindowStyle">
                The window state to use when the process is started.
            </param>
            <param name="dispose">
                <see langword="true"/> to release all resources used by the
                <see cref="T:System.Diagnostics.Process"/> component, if the process has been started;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.ProcessEx.Start(System.String,System.Boolean,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Diagnostics.Process"/> class from the
                specified parameters to starts (or reuses) the process component.
            </summary>
            <param name="fileName">
                The application to start.
            </param>
            <param name="verbRunAs">
                <see langword="true"/> to start the application with administrator
                privileges; otherwise, <see langword="false"/>.
            </param>
            <param name="dispose">
                <see langword="true"/> to release all resources used by the
                <see cref="T:System.Diagnostics.Process"/> component, if the process has been started;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.ProcessEx.WaitForExitAsync(System.Diagnostics.Process,System.Threading.CancellationToken)">
            <summary>
                Waits asynchronously for this process to exit.
            </summary>
            <param name="process">
                The process to wait for cancellation.
            </param>
            <param name="cancelToken">
                A cancellation token. If invoked, the task will return immediately as
                canceled.
            </param>
            <returns>
                A Task representing waiting for the process to end.
            </returns>
        </member>
        <member name="M:SilDev.ProcessEx.ThreadHandles(System.Diagnostics.Process)">
            <summary>
                Retrieves all thread handles of the specified process.
            </summary>
            <param name="process">
                The <see cref="T:System.Diagnostics.Process"/> to get all thread handles.
            </param>
        </member>
        <member name="M:SilDev.ProcessEx.Close(System.Collections.Generic.IEnumerable{System.Diagnostics.Process},System.Boolean)">
            <summary>
                Immediately closes all threads of the specified processes.
            </summary>
            <param name="processes">
                The <see cref="T:System.Diagnostics.Process"/>/es to close.
            </param>
            <param name="waitOnHandle">
                Wait on the handle.
            </param>
        </member>
        <member name="M:SilDev.ProcessEx.Close(System.Diagnostics.Process[])">
            <summary>
                Immediately closes all threads of the specified processes.
            </summary>
            <param name="processes">
                The <see cref="T:System.Diagnostics.Process"/>/es to close.
            </param>
        </member>
        <member name="M:SilDev.ProcessEx.Terminate(System.Collections.Generic.IEnumerable{System.Diagnostics.Process})">
            <summary>
                Immediately stops all specified processes.
                <para>
                    If the current process doesn't have enough privileges to stop a
                    specified process it starts an invisible elevated instance of the
                    command prompt to run taskkill.
                </para>
            </summary>
            <param name="processes">
                The <see cref="T:System.Diagnostics.Process"/>/es to kill.
            </param>
        </member>
        <member name="M:SilDev.ProcessEx.Terminate(System.Diagnostics.Process[])">
            <summary>
                Immediately stops all specified processes.
                <para>
                    If the current process doesn't have enough privileges to stop a
                    specified process it starts an invisible elevated instance of the
                    command prompt to run taskkill.
                </para>
            </summary>
            <param name="processes">
                The collection of processes to kill.
            </param>
        </member>
        <member name="T:SilDev.RedistFlags">
            <summary>
                Provides identity flags of redistributable packages. For more information,
                see <see cref="M:SilDev.Redist.IsInstalled(SilDev.RedistFlags[])"/>.
            </summary>
            ReSharper disable InconsistentNaming
        </member>
        <member name="F:SilDev.RedistFlags.VC2005X86">
            <summary>
                Microsoft Visual C++ 2005 Redistributable Package (x86).
            </summary>
        </member>
        <member name="F:SilDev.RedistFlags.VC2005X64">
            <summary>
                Microsoft Visual C++ 2005 Redistributable Package (x64).
            </summary>
        </member>
        <member name="F:SilDev.RedistFlags.VC2008X86">
            <summary>
                Microsoft Visual C++ 2008 Redistributable Package (x86).
            </summary>
        </member>
        <member name="F:SilDev.RedistFlags.VC2008X64">
            <summary>
                Microsoft Visual C++ 2008 Redistributable Package (x64).
            </summary>
        </member>
        <member name="F:SilDev.RedistFlags.VC2010X86">
            <summary>
                Microsoft Visual C++ 2010 Redistributable Package (x86).
            </summary>
        </member>
        <member name="F:SilDev.RedistFlags.VC2010X64">
            <summary>
                Microsoft Visual C++ 2010 Redistributable Package (x64).
            </summary>
        </member>
        <member name="F:SilDev.RedistFlags.VC2012X86">
            <summary>
                Microsoft Visual C++ 2012 Redistributable Package (x86).
            </summary>
        </member>
        <member name="F:SilDev.RedistFlags.VC2012X64">
            <summary>
                Microsoft Visual C++ 2012 Redistributable Package (x64).
            </summary>
        </member>
        <member name="F:SilDev.RedistFlags.VC2013X86">
            <summary>
                Microsoft Visual C++ 2013 Redistributable Package (x86).
            </summary>
        </member>
        <member name="F:SilDev.RedistFlags.VC2013X64">
            <summary>
                Microsoft Visual C++ 2013 Redistributable Package (x64).
            </summary>
        </member>
        <member name="F:SilDev.RedistFlags.VC2015X86">
            <summary>
                Microsoft Visual C++ 2015 Redistributable Package (x86).
            </summary>
        </member>
        <member name="F:SilDev.RedistFlags.VC2015X64">
            <summary>
                Microsoft Visual C++ 2015 Redistributable Package (x64).
            </summary>
        </member>
        <member name="F:SilDev.RedistFlags.VC2017X86">
            <summary>
                Microsoft Visual C++ 2017 Redistributable Package (x86).
            </summary>
        </member>
        <member name="F:SilDev.RedistFlags.VC2017X64">
            <summary>
                Microsoft Visual C++ 2017 Redistributable Package (x64).
            </summary>
        </member>
        <member name="F:SilDev.RedistFlags.VC2019X86">
            <summary>
                Microsoft Visual C++ 2019 Redistributable Package (x86).
            </summary>
        </member>
        <member name="F:SilDev.RedistFlags.VC2019X64">
            <summary>
                Microsoft Visual C++ 2019 Redistributable Package (x64).
            </summary>
        </member>
        <member name="T:SilDev.Redist">
            <summary>
                Provides functionality to verify the installation of redistributable
                packages.
            </summary>
        </member>
        <member name="M:SilDev.Redist.GetDisplayNames(System.Boolean)">
            <summary>
                Returns the display names of all installed Microsoft Visual C++
                redistributable packages.
            </summary>
            <param name="refresh">
                <see langword="true"/> to refresh all names; otherwise,
                <see langword="false"/> to get the cached names from previous call.
                <para>
                    Please note that this parameter is always <see langword="true"/> if
                    this function has never been called before.
                </para>
            </param>
        </member>
        <member name="M:SilDev.Redist.IsInstalled(SilDev.RedistFlags[])">
            <summary>
                Determines whether the specified redistributable package is installed.
            </summary>
            <param name="keys">
                The redistributable package keys to check.
            </param>
        </member>
        <member name="T:SilDev.Reg">
            <summary>
                Provides functionality for the Windows registry database.
            </summary>
        </member>
        <member name="M:SilDev.Reg.SubKeyExists(Microsoft.Win32.RegistryKey,System.String)">
            <summary>
                Determines whether the specified subkey exists.
            </summary>
            <param name="key">
                The root <see cref="T:Microsoft.Win32.Registry"/> key that contains the subkey.
            </param>
            <param name="subKey">
                The path of the subkey to check.
            </param>
        </member>
        <member name="M:SilDev.Reg.SubKeyExists(System.String,System.String)">
            <summary>
                Determines whether the specified subkey exists.
            </summary>
            <param name="key">
                The root key that contains the subkey.
            </param>
            <param name="subKey">
                The path of the subkey to check.
            </param>
        </member>
        <member name="M:SilDev.Reg.SubKeyExists(System.String)">
            <summary>
                Determines whether the specified subkey exists.
            </summary>
            <param name="keyPath">
                The full path of the key to check.
            </param>
        </member>
        <member name="M:SilDev.Reg.CreateNewSubKey(Microsoft.Win32.RegistryKey,System.String,System.Boolean)">
            <summary>
                Creates a new subkey.
            </summary>
            <param name="key">
                The root <see cref="T:Microsoft.Win32.Registry"/> key that receives the subkey.
            </param>
            <param name="subKey">
                The path of the subkey to create.
            </param>
            <param name="overwrite">
                <see langword="true"/> to remove an existing target before creating;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Reg.CreateNewSubKey(System.String,System.String,System.Boolean)">
            <summary>
                Creates a new subkey.
            </summary>
            <param name="key">
                The root key that receives the subkey.
            </param>
            <param name="subKey">
                The path of the subkey to create.
            </param>
            <param name="overwrite">
                <see langword="true"/> to remove an existing target before creating;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Reg.CreateNewSubKey(System.String,System.Boolean)">
            <summary>
                Creates a new subkey.
            </summary>
            <param name="keyPath">
                The full path of the key to create.
            </param>
            <param name="overwrite">
                <see langword="true"/> to remove an existing target before creating;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Reg.RemoveSubKey(Microsoft.Win32.RegistryKey,System.String)">
            <summary>
                Removes an existing subkey.
            </summary>
            <param name="key">
                The root <see cref="T:Microsoft.Win32.Registry"/> key that contains the subkey.
            </param>
            <param name="subKey">
                The path of the subkey to remove.
            </param>
        </member>
        <member name="M:SilDev.Reg.RemoveSubKey(System.String,System.String)">
            <summary>
                Removes an existing subkey.
            </summary>
            <param name="key">
                The root key that contains the subkey.
            </param>
            <param name="subKey">
                The path of the subkey to remove.
            </param>
        </member>
        <member name="M:SilDev.Reg.RemoveSubKey(System.String)">
            <summary>
                Removes an existing subkey.
            </summary>
            <param name="keyPath">
                The full path of the key to remove.
            </param>
        </member>
        <member name="M:SilDev.Reg.GetSubKeys(Microsoft.Win32.RegistryKey,System.String)">
            <summary>
                Returns a <see cref="T:System.String"/> based <see cref="T:System.Collections.Generic.IEnumerable`1"/> with all
                subkeys of the specified registry path.
            </summary>
            <param name="key">
                The root <see cref="T:Microsoft.Win32.Registry"/> key which contains the subkey.
            </param>
            <param name="subKey">
                The path of the subkey to read.
            </param>
        </member>
        <member name="M:SilDev.Reg.GetSubKeys(System.String,System.String)">
            <summary>
                Returns a <see cref="T:System.String"/> based <see cref="T:System.Collections.Generic.IEnumerable`1"/> with all
                subkeys of the specified registry path.
            </summary>
            <param name="key">
                The root key which contains the subkey.
            </param>
            <param name="subKey">
                The path of the subkey to read.
            </param>
        </member>
        <member name="M:SilDev.Reg.GetSubKeys(System.String)">
            <summary>
                Returns a <see cref="T:System.String"/> based <see cref="T:System.Collections.Generic.IEnumerable`1"/> with all
                subkeys of the specified registry path.
            </summary>
            <param name="keyPath">
                The full path of the key to read.
            </param>
        </member>
        <member name="M:SilDev.Reg.GetSubKeyTree(Microsoft.Win32.RegistryKey,System.String,System.Int32)">
            <summary>
                Returns a <see cref="T:System.String"/> based <see cref="T:System.Collections.Generic.IEnumerable`1"/> with the
                full subkey tree of the specified registry path.
            </summary>
            <param name="key">
                The root <see cref="T:Microsoft.Win32.Registry"/> key that contains the subkey.
            </param>
            <param name="subKey">
                The path of the subkey to read.
            </param>
            <param name="timelimit">
                The time limit in milliseconds.
            </param>
        </member>
        <member name="M:SilDev.Reg.GetSubKeyTree(System.String,System.String,System.Int32)">
            <summary>
                Returns a <see cref="T:System.String"/> based <see cref="T:System.Collections.Generic.IEnumerable`1"/> with the
                full subkey tree of the specified registry path.
            </summary>
            <param name="key">
                The root key that contains the subkey.
            </param>
            <param name="subKey">
                The path of the subkey to read.
            </param>
            <param name="timelimit">
                The time limit in milliseconds.
            </param>
        </member>
        <member name="M:SilDev.Reg.GetSubKeyTree(System.String,System.Int32)">
            <summary>
                Returns a <see cref="T:System.String"/> based <see cref="T:System.Collections.Generic.IEnumerable`1"/> with the
                full subkey tree of the specified registry path.
            </summary>
            <param name="keyPath">
                The full path of the key to read.
            </param>
            <param name="timelimit">
                The time limit in milliseconds.
            </param>
        </member>
        <member name="M:SilDev.Reg.CopySubKey(Microsoft.Win32.RegistryKey,System.String,Microsoft.Win32.RegistryKey,System.String,System.Boolean)">
            <summary>
                Copies an existing subkey to a new location.
            </summary>
            <param name="srcKey">
                The root <see cref="T:Microsoft.Win32.Registry"/> key that contains the source subkey.
            </param>
            <param name="srcSubKey">
                The name of the subkey to copy.
            </param>
            <param name="destKey">
                The root <see cref="T:Microsoft.Win32.Registry"/> key that should contain the new subkey.
            </param>
            <param name="destSubKey">
                The new path and name of the destination subkey.
            </param>
            <param name="overwrite">
                <see langword="true"/> to remove an existing target before copying;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Reg.CopySubKey(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
                Copies an existing subkey to a new location.
            </summary>
            <param name="srcKey">
                The root key that contains the source subkey.
            </param>
            <param name="srcSubKey">
                The name of the subkey to copy.
            </param>
            <param name="destKey">
                The root key that should contain the new subkey.
            </param>
            <param name="destSubKey">
                The new path and name of the destination subkey.
            </param>
            <param name="overwrite">
                <see langword="true"/> to remove an existing target before copying;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Reg.CopySubKey(System.String,System.String,System.Boolean)">
            <summary>
                Copies an existing subkey to a new location.
            </summary>
            <param name="srcKeyPath">
                The full path of the source key to copy.
            </param>
            <param name="destKeyPath">
                The full path of the destination key.
            </param>
            <param name="overwrite">
                <see langword="true"/> to remove an existing target before copying;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Reg.MoveSubKey(Microsoft.Win32.RegistryKey,System.String,Microsoft.Win32.RegistryKey,System.String,System.Boolean)">
            <summary>
                Moves an existing subkey to a new location.
            </summary>
            <param name="oldKey">
                The root <see cref="T:Microsoft.Win32.Registry"/> key that contains the source subkey.
            </param>
            <param name="oldSubKey">
                The name of the subkey to move.
            </param>
            <param name="newKey">
                The root <see cref="T:Microsoft.Win32.Registry"/> key that should contain the new subkey.
            </param>
            <param name="newSubKey">
                The new path and name of the subkey.
            </param>
            <param name="overwrite">
                <see langword="true"/> to remove an existing target before moving;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Reg.MoveSubKey(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
                Moves an existing subkey to a new location.
            </summary>
            <param name="oldKey">
                The root key that contains the source subkey.
            </param>
            <param name="oldSubKey">
                The name of the subkey to move.
            </param>
            <param name="newKey">
                The root key that should contain the new subkey.
            </param>
            <param name="newSubKey">
                The new path and name of the subkey.
            </param>
            <param name="overwrite">
                <see langword="true"/> to remove an existing target before moving;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Reg.MoveSubKey(System.String,System.String,System.Boolean)">
            <summary>
                Moves an existing subkey to a new location.
            </summary>
            <param name="oldKeyPath">
                The full path of the source key to copy.
            </param>
            <param name="newKeyPath">
                The full path of the destination key.
            </param>
            <param name="overwrite">
                <see langword="true"/> to remove an existing target before moving;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Reg.EntryExists(Microsoft.Win32.RegistryKey,System.String,System.String)">
            <summary>
                Determines whether the specified entry exists.
            </summary>
            <param name="key">
                The root <see cref="T:Microsoft.Win32.Registry"/> key that contains the subkey.
            </param>
            <param name="subKey">
                The path of the subkey which contains the entry.
            </param>
            <param name="entry">
                The entry to check.
            </param>
        </member>
        <member name="M:SilDev.Reg.EntryExists(System.String,System.String,System.String)">
            <summary>
                Determines whether the specified entry exists.
            </summary>
            <param name="key">
                The root key that contains the subkey.
            </param>
            <param name="subKey">
                The path of the subkey which contains the entry.
            </param>
            <param name="entry">
                The entry to check.
            </param>
        </member>
        <member name="M:SilDev.Reg.EntryExists(System.String,System.String)">
            <summary>
                Determines whether the specified entry exists.
            </summary>
            <param name="keyPath">
                The full path of the key which contains the entry.
            </param>
            <param name="entry">
                The entry to check.
            </param>
        </member>
        <member name="M:SilDev.Reg.Read``1(Microsoft.Win32.RegistryKey,System.String,System.String,``0)">
            <summary>
                Retrieves the value associated with the specified entry of the specified
                registry path.
            </summary>
            <typeparam name="TValue">
                The value type.
            </typeparam>
            <param name="key">
                The root <see cref="T:Microsoft.Win32.Registry"/> key that contains the subkey to open.
            </param>
            <param name="subKey">
                The path of the subkey that contains the entry to read.
            </param>
            <param name="entry">
                The entry to read
            </param>
            <param name="defValue">
                The value that is used as default.
            </param>
        </member>
        <member name="M:SilDev.Reg.Read``1(System.String,System.String,System.String,``0)">
            <summary>
                Retrieves the value associated with the specified entry of the specified
                registry path.
            </summary>
            <typeparam name="TValue">
                The value type.
            </typeparam>
            <param name="key">
                The root key that contains the subkey to open.
            </param>
            <param name="subKey">
                The path of the subkey that contains the entry to read.
            </param>
            <param name="entry">
                The entry to read
            </param>
            <param name="defValue">
                The value that is used as default.
            </param>
        </member>
        <member name="M:SilDev.Reg.Read``1(System.String,System.String,``0)">
            <summary>
                Retrieves the value associated with the specified entry of the specified
                registry path.
            </summary>
            <typeparam name="TValue">
                The value type.
            </typeparam>
            <param name="keyPath">
                The full path of the key that contains the entry to read.
            </param>
            <param name="entry">
                The entry to read
            </param>
            <param name="defValue">
                The value that is used as default.
            </param>
        </member>
        <member name="M:SilDev.Reg.ReadString(Microsoft.Win32.RegistryKey,System.String,System.String,System.String)">
            <summary>
                Retrieves the value associated with the specified entry of the specified
                registry path.
                <para>
                    A non-string value is converted to a valid <see cref="T:System.String"/>.
                </para>
            </summary>
            <param name="key">
                The root <see cref="T:Microsoft.Win32.Registry"/> key that contains the subkey to open.
            </param>
            <param name="subKey">
                The path of the subkey that contains the entry to read.
            </param>
            <param name="entry">
                The entry to read
            </param>
            <param name="defValue">
                The value that is used as default.
            </param>
        </member>
        <member name="M:SilDev.Reg.ReadString(System.String,System.String,System.String,System.String)">
            <summary>
                Retrieves the value associated with the specified entry of the specified
                registry path.
                <para>
                    A non-string value is converted to a valid <see cref="T:System.String"/>.
                </para>
            </summary>
            <param name="key">
                The root key that contains the subkey to open.
            </param>
            <param name="subKey">
                The path of the subkey that contains the entry to read.
            </param>
            <param name="entry">
                The entry to read
            </param>
            <param name="defValue">
                The value that is used as default.
            </param>
        </member>
        <member name="M:SilDev.Reg.ReadString(System.String,System.String,System.String)">
            <summary>
                Retrieves the value associated with the specified entry of the specified
                registry path.
                <para>
                    A non-string value is converted to a valid <see cref="T:System.String"/>.
                </para>
            </summary>
            <param name="keyPath">
                The full path of the key that contains the entry to read.
            </param>
            <param name="entry">
                The entry to read
            </param>
            <param name="defValue">
                The value that is used as default.
            </param>
        </member>
        <member name="M:SilDev.Reg.Write``1(Microsoft.Win32.RegistryKey,System.String,System.String,``0,Microsoft.Win32.RegistryValueKind)">
            <summary>
                Copies an object into the specified entry of the registry database.
            </summary>
            <typeparam name="TValue">
                The value type.
            </typeparam>
            <param name="key">
                The root <see cref="T:Microsoft.Win32.Registry"/> key that contains the subkey to create or
                override.
            </param>
            <param name="subKey">
                The path of the subkey to create or override.
            </param>
            <param name="entry">
                The entry to create or override.
            </param>
            <param name="value">
                The <see cref="T:System.Object"/> to be written.
            </param>
            <param name="type">
                The data type of the value to write.
            </param>
        </member>
        <member name="M:SilDev.Reg.Write``1(System.String,System.String,System.String,``0,Microsoft.Win32.RegistryValueKind)">
            <summary>
                Copies an object into the specified entry of the registry database.
            </summary>
            <typeparam name="TValue">
                The value type.
            </typeparam>
            <param name="key">
                The root key that contains the subkey to create or override.
            </param>
            <param name="subKey">
                The path of the subkey to create or override.
            </param>
            <param name="entry">
                The entry to create or override.
            </param>
            <param name="value">
                The <see cref="T:System.Object"/> to be written.
            </param>
            <param name="type">
                The data type of the value to write.
            </param>
        </member>
        <member name="M:SilDev.Reg.Write``1(System.String,System.String,``0,Microsoft.Win32.RegistryValueKind)">
            <summary>
                Copies an object into the specified entry of the registry database.
            </summary>
            <typeparam name="TValue">
                The value type.
            </typeparam>
            <param name="keyPath">
                The full path of the key to create or override.
            </param>
            <param name="entry">
                The entry to create or override.
            </param>
            <param name="value">
                The <see cref="T:System.Object"/> to be written.
            </param>
            <param name="type">
                The data type of the value to write.
            </param>
        </member>
        <member name="M:SilDev.Reg.RemoveEntry(Microsoft.Win32.RegistryKey,System.String,System.String)">
            <summary>
                Removes the specified entry from the specified registry path.
            </summary>
            <param name="key">
                The root <see cref="T:Microsoft.Win32.Registry"/> key that contains the subkey with the entry
                to remove.
            </param>
            <param name="subKey">
                The path of the subkey with the entry to remove.
            </param>
            <param name="entry">
                The entry to remove.
            </param>
        </member>
        <member name="M:SilDev.Reg.RemoveEntry(System.String,System.String,System.String)">
            <summary>
                Removes the specified entry from the specified registry path.
            </summary>
            <param name="key">
                The root key that contains the subkey with the entry to remove.
            </param>
            <param name="subKey">
                The path of the subkey with the entry to remove.
            </param>
            <param name="entry">
                The entry to remove.
            </param>
        </member>
        <member name="M:SilDev.Reg.RemoveEntry(System.String,System.String)">
            <summary>
                Removes the specified entry from the specified <see cref="T:Microsoft.Win32.Registry"/> path.
            </summary>
            <param name="keyPath">
                The full path of the key with the entry to remove.
            </param>
            <param name="entry">
                The entry to remove.
            </param>
        </member>
        <member name="M:SilDev.Reg.ImportFile(System.String,System.Boolean,System.Boolean)">
            <summary>
                Imports the specified REG file to the registry.
            </summary>
            <param name="path">
                The full path of the file to import.
            </param>
            <param name="elevated">
                <see langword="true"/> to import with highest user permissions; otherwise,
                <see langword="false"/>.
            </param>
            <param name="native">
                <see langword="true"/> to import with the system native architecture;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Reg.ImportFile(System.String,System.String[],System.Boolean,System.Boolean)">
            <summary>
                Creates a new REG file with the specified content, imports it into the
                registry, and then deletes the file.
            </summary>
            <param name="path">
                The full path of the file to import.
            </param>
            <param name="content">
                The full content of the file to import.
            </param>
            <param name="elevated">
                <see langword="true"/> to import with highest user permissions; otherwise,
                <see langword="false"/>.
            </param>
            <param name="native">
                <see langword="true"/> to import with the system native architecture;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Reg.ImportFile(System.String[],System.Boolean,System.Boolean)">
            <summary>
                Creates a new REG file with the specified content, imports it into the
                registry, and then deletes the file.
            </summary>
            <param name="content">
                The full content of the file to import.
            </param>
            <param name="elevated">
                <see langword="true"/> to import with highest user permissions; otherwise,
                <see langword="false"/>.
            </param>
            <param name="native">
                <see langword="true"/> to import with the system native architecture;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Reg.ExportKeys(System.String,System.Boolean,System.Boolean,System.String[])">
            <summary>
                Exports the full content of the specified registry paths into an REG file.
            </summary>
            <param name="destPath">
                The full path of the file to create or override.
            </param>
            <param name="elevated">
                <see langword="true"/> to export with highest user permissions; otherwise,
                <see langword="false"/>.
            </param>
            <param name="keyPaths">
                The full paths of the keys to export.
            </param>
            <param name="native">
                <see langword="true"/> to import with the system native architecture;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Reg.ExportKeys(System.String,System.Boolean,System.String[])">
            <summary>
                Exports the full content of the specified registry paths into an REG file.
            </summary>
            <param name="destPath">
                The full path of the file to create or override.
            </param>
            <param name="elevated">
                <see langword="true"/> to export with highest user permissions; otherwise,
                <see langword="false"/>.
            </param>
            <param name="keyPaths">
                The full paths of the keys to export.
            </param>
        </member>
        <member name="M:SilDev.Reg.ExportKeys(System.String,System.String[])">
            <summary>
                Exports the full content of the specified registry paths into an REG file.
            </summary>
            <param name="destPath">
                The full path of the file to create or override.
            </param>
            <param name="keyPaths">
                The full paths of the keys to export.
            </param>
        </member>
        <member name="T:SilDev.SizeOption">
            <summary>
                Provides size format options.
            </summary>
        </member>
        <member name="F:SilDev.SizeOption.None">
            <summary>
                Determines that the format is not changed.
            </summary>
        </member>
        <member name="F:SilDev.SizeOption.Trim">
            <summary>
                Determines that all zeros are removed after the comma.
            </summary>
        </member>
        <member name="F:SilDev.SizeOption.Round">
            <summary>
                Determines that the value is rounded to the nearest integral value.
            </summary>
        </member>
        <member name="T:SilDev.SizeUnit">
            <summary>
                Provides labels for size units.
            </summary>
            ReSharper disable InconsistentNaming
        </member>
        <member name="F:SilDev.SizeUnit.Byte">
            <summary>
                Stands for byte.
            </summary>
        </member>
        <member name="F:SilDev.SizeUnit.KB">
            <summary>
                Stands for kilobyte or kibibyte.
            </summary>
        </member>
        <member name="F:SilDev.SizeUnit.MB">
            <summary>
                Stands for megabyte or mebibyte.
            </summary>
        </member>
        <member name="F:SilDev.SizeUnit.GB">
            <summary>
                Stands for gigabyte or gibibyte.
            </summary>
        </member>
        <member name="F:SilDev.SizeUnit.TB">
            <summary>
                Stands for terabyte or tebibyte.
            </summary>
        </member>
        <member name="F:SilDev.SizeUnit.PB">
            <summary>
                Stands for petabyte or pebibyte.
            </summary>
        </member>
        <member name="F:SilDev.SizeUnit.EB">
            <summary>
                Stands for exabyte or exbibyte.
            </summary>
        </member>
        <member name="T:SilDev.Reorganize">
            <summary>
                Provides static un-categorized extension methods for converting or
                reorganizing of data.
            </summary>
        </member>
        <member name="M:SilDev.Reorganize.AppendFormatCurrent(System.Text.StringBuilder,System.String,System.Object[])">
            <summary>
                Appends the string returned by processing a composite format string, which
                contains zero or more format items, to this <see cref="T:System.Text.StringBuilder"/>
                instance. Each format item is replaced by the string representation of a
                corresponding argument in a parameter array using the
                <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/> format provider.
            </summary>
            <param name="stringBuilder">
                The <see cref="T:System.Text.StringBuilder"/> instance to which the string should be
                append.
            </param>
            <param name="format">
                A composite format string.
            </param>
            <param name="args">
                An array of objects to format.
            </param>
            <exception cref="T:System.ArgumentNullException">
                stringBuilder, format or args is null.
            </exception>
        </member>
        <member name="M:SilDev.Reorganize.AppendFormatDefault(System.Text.StringBuilder,System.String,System.Object[])">
            <summary>
                Appends the string returned by processing a composite format string, which
                contains zero or more format items, to this <see cref="T:System.Text.StringBuilder"/>
                instance. Each format item is replaced by the string representation of a
                corresponding argument in a parameter array using the
                <see cref="P:SilDev.CultureConfig.GlobalCultureInfo"/> format provider.
            </summary>
            <param name="stringBuilder">
                The <see cref="T:System.Text.StringBuilder"/> instance to which the string should be
                append.
            </param>
            <param name="format">
                A composite format string.
            </param>
            <param name="args">
                An array of objects to format.
            </param>
            <exception cref="T:System.ArgumentNullException">
                stringBuilder, format or args is null.
            </exception>
        </member>
        <member name="M:SilDev.Reorganize.AppendFormatLine(System.Text.StringBuilder,System.IFormatProvider,System.String,System.Object[])">
            <summary>
                Appends the string returned by processing a composite format string, which
                contains zero or more format items followed by the default line terminator
                to the end, to this <see cref="T:System.Text.StringBuilder"/> instance. Each format item
                is replaced by the string representation of a corresponding argument in a
                parameter array using a specified format provider.
            </summary>
            <param name="stringBuilder">
                The <see cref="T:System.Text.StringBuilder"/> instance to which the string should be
                append.
            </param>
            <param name="provider">
                An object that supplies culture-specific formatting information.
            </param>
            <param name="format">
                A composite format string.
            </param>
            <param name="args">
                An array of objects to format.
            </param>
            <exception cref="T:System.ArgumentNullException">
                stringBuilder, format or args is null.
            </exception>
        </member>
        <member name="M:SilDev.Reorganize.AppendFormatLineCurrent(System.Text.StringBuilder,System.String,System.Object[])">
            <summary>
                Appends the string returned by processing a composite format string, which
                contains zero or more format items followed by the default line terminator
                to the end, to this <see cref="T:System.Text.StringBuilder"/> instance. Each format item
                is replaced by the string representation of a corresponding argument in a
                parameter array using the <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/> format
                provider.
            </summary>
            <param name="stringBuilder">
                The <see cref="T:System.Text.StringBuilder"/> instance to which the string should be
                append.
            </param>
            <param name="format">
                A composite format string.
            </param>
            <param name="args">
                An array of objects to format.
            </param>
            <exception cref="T:System.ArgumentNullException">
                stringBuilder, format or args is null.
            </exception>
        </member>
        <member name="M:SilDev.Reorganize.AppendFormatLineDefault(System.Text.StringBuilder,System.String,System.Object[])">
            <summary>
                Appends the string returned by processing a composite format string, which
                contains zero or more format items followed by the default line terminator
                to the end, to this <see cref="T:System.Text.StringBuilder"/> instance. Each format item
                is replaced by the string representation of a corresponding argument in a
                parameter array using the <see cref="P:SilDev.CultureConfig.GlobalCultureInfo"/>
                format provider.
            </summary>
            <param name="stringBuilder">
                The <see cref="T:System.Text.StringBuilder"/> instance to which the string should be
                append.
            </param>
            <param name="format">
                A composite format string.
            </param>
            <param name="args">
                An array of objects to format.
            </param>
            <exception cref="T:System.ArgumentNullException">
                stringBuilder, format or args is null.
            </exception>
        </member>
        <member name="M:SilDev.Reorganize.ToStringThenClear(System.Text.StringBuilder)">
            <summary>
                Converts the value of this <see cref="T:System.Text.StringBuilder"/> instance to
                <see cref="T:System.String"/> and removes all characters before <see cref="T:System.String"/>
                is returned.
            </summary>
            <param name="stringBuilder">
                The <see cref="T:System.Text.StringBuilder"/> instance to convert.
            </param>
            <exception cref="T:System.ArgumentNullException">
                stringBuilder is null.
            </exception>
        </member>
        <member name="M:SilDev.Reorganize.ToStringThenClear(System.Text.StringBuilder,System.Int32,System.Int32)">
            <summary>
                Converts the value of a substring of this <see cref="T:System.Text.StringBuilder"/>
                instance to <see cref="T:System.String"/> and removes all characters before
                <see cref="T:System.String"/> is returned.
            </summary>
            <param name="stringBuilder">
                The <see cref="T:System.Text.StringBuilder"/> instance to convert.
            </param>
            <exception cref="T:System.ArgumentNullException">
                stringBuilder is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                startIndex or length is less than zero. -or- The sum of startIndex and
                length is greater than the length of the current instance.
            </exception>
        </member>
        <member name="M:SilDev.Reorganize.FormatSize(System.Int64,SilDev.SizeUnit,System.Boolean,System.Boolean,SilDev.SizeOption)">
            <summary>
                Converts this numeric value into a string that represents the number
                expressed as a size value in the specified <see cref="T:SilDev.SizeUnit"/>.
            </summary>
            <param name="value">
                The value to be converted.
            </param>
            <param name="unit">
                The new unit.
            </param>
            <param name="binary">
                <see langword="true"/> for the binary numeral system; otherwise,
                <see langword="false"/> for the decimal numeral system.
            </param>
            <param name="suffix">
                <see langword="true"/> to show the size unit suffix; otherwise,
                <see langword="false"/>.
            </param>
            <param name="sizeOptions">
            </param>
        </member>
        <member name="M:SilDev.Reorganize.FormatSize(System.Int64,SilDev.SizeUnit,System.Boolean,SilDev.SizeOption)">
            <summary>
                Converts this numeric value into a string that represents the number
                expressed as a size value in the specified <see cref="T:SilDev.SizeUnit"/>.
            </summary>
            <param name="value">
                The value to be converted.
            </param>
            <param name="unit">
                The new unit.
            </param>
            <param name="binary">
                <see langword="true"/> for the binary numeral system; otherwise,
                <see langword="false"/> for the decimal numeral system.
            </param>
            <param name="sizeOptions">
            </param>
        </member>
        <member name="M:SilDev.Reorganize.FormatSize(System.Int64,SilDev.SizeUnit,SilDev.SizeOption)">
            <summary>
                Converts this numeric value into a string that represents the number
                expressed as a size value in the specified <see cref="T:SilDev.SizeUnit"/>.
            </summary>
            <param name="value">
                The value to be converted.
            </param>
            <param name="unit">
                The new unit.
            </param>
            <param name="sizeOptions">
            </param>
        </member>
        <member name="M:SilDev.Reorganize.FormatSize(System.Int64,System.Boolean,System.Boolean,SilDev.SizeOption)">
            <summary>
                Converts this numeric value into a string that represents the number
                expressed as a size value in bytes, kilobytes, megabytes, gigabytes,
                terabyte, petabyte, exabyte, depending on the size.
            </summary>
            <param name="value">
                The value to be converted.
            </param>
            <param name="binary">
                <see langword="true"/> for the binary numeral system; otherwise,
                <see langword="false"/> for the decimal numeral system.
            </param>
            <param name="suffix">
                <see langword="true"/> to show the size unit suffix; otherwise,
                <see langword="false"/>.
            </param>
            <param name="sizeOptions">
            </param>
        </member>
        <member name="M:SilDev.Reorganize.FormatSize(System.Int64,System.Boolean,SilDev.SizeOption)">
            <summary>
                Converts this numeric value into a string that represents the number
                expressed as a size value in bytes, kilobytes, megabytes, gigabytes,
                terabyte, petabyte, exabyte, depending on the size.
            </summary>
            <param name="value">
                The value to be converted.
            </param>
            <param name="binary">
                <see langword="true"/> for the binary numeral system; otherwise,
                <see langword="false"/> for the decimal numeral system.
            </param>
            <param name="sizeOptions">
            </param>
        </member>
        <member name="M:SilDev.Reorganize.FormatSize(System.Int64,SilDev.SizeOption)">
            <summary>
                Converts this numeric value into a string that represents the number
                expressed as a size value in bytes, kilobytes, megabytes, gigabytes,
                terabyte, petabyte, exabyte, depending on the size.
            </summary>
            <param name="value">
                The value to be converted.
            </param>
            <param name="sizeOptions">
            </param>
        </member>
        <member name="M:SilDev.Reorganize.CopyTo(System.IO.Stream,System.IO.Stream)">
            <summary>
                Reads the bytes from the specified stream and writes them to another
                stream.
            </summary>
            <param name="srcStream">
                The <see cref="T:System.IO.Stream"/> to copy.
            </param>
            <param name="destStream">
                The <see cref="T:System.IO.Stream"/> to override.
            </param>
            <exception cref="T:System.ArgumentNullException">
                stream or bytes is null.
            </exception>
            <exception cref="T:System.IO.IOException">
                An I/O error occurred, such as the specified file cannot be found.
            </exception>
            <exception cref="T:System.NotSupportedException">
                The stream does not support writing.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                stream was closed while the bytes were being written.
            </exception>
        </member>
        <member name="M:SilDev.Reorganize.WriteByte(System.IO.Stream,System.Char)">
            <summary>
                Writes a character to the this stream and advances the current position
                within this stream by the number of bytes written.
            </summary>
            <param name="stream">
                The <see cref="T:System.IO.Stream"/> to write.
            </param>
            <param name="chr">
                The character to write.
            </param>
            <exception cref="T:System.ArgumentNullException">
                stream is null.
            </exception>
            <exception cref="T:System.IO.IOException">
                An I/O error occurred, such as the specified file cannot be found.
            </exception>
            <exception cref="T:System.NotSupportedException">
                The stream does not support writing.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                stream was closed while the bytes were being written.
            </exception>
        </member>
        <member name="M:SilDev.Reorganize.WriteByte(System.IO.Stream,System.Char,System.Int32)">
            <summary>
                Writes a character repeated a specified number of times to the this stream
                and advances the current position within this stream by the number of bytes
                written.
            </summary>
            <param name="stream">
                The <see cref="T:System.IO.Stream"/> to write.
            </param>
            <param name="chr">
                The character to write.
            </param>
            <param name="count">
                The number of times chr occurs.
            </param>
            <exception cref="T:System.ArgumentNullException">
                stream is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                count is less than zero.
            </exception>
            <exception cref="T:System.IO.IOException">
                An I/O error occurred, such as the specified file cannot be found.
            </exception>
            <exception cref="T:System.NotSupportedException">
                The stream does not support writing.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                stream was closed while the bytes were being written.
            </exception>
        </member>
        <member name="M:SilDev.Reorganize.WriteBytes(System.IO.Stream,System.String)">
            <summary>
                Writes a string to the this stream and advances the current position within
                this stream by the number of bytes written.
            </summary>
            <param name="stream">
                The <see cref="T:System.IO.Stream"/> to write.
            </param>
            <param name="str">
                The string to write.
            </param>
            <exception cref="T:System.ArgumentNullException">
                stream or str is null.
            </exception>
            <exception cref="T:System.IO.IOException">
                An I/O error occurred, such as the specified file cannot be found.
            </exception>
            <exception cref="T:System.NotSupportedException">
                The stream does not support writing.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                stream was closed while the bytes were being written.
            </exception>
        </member>
        <member name="M:SilDev.Reorganize.WriteBytes(System.IO.Stream,System.Byte[])">
            <summary>
                Writes a sequence of bytes to the this stream and advances the current
                position within this stream by the number of bytes written.
            </summary>
            <param name="stream">
                The <see cref="T:System.IO.Stream"/> to write.
            </param>
            <param name="buffer">
                An array of bytes to write.
            </param>
            <exception cref="T:System.ArgumentNullException">
                stream or bytes is null.
            </exception>
            <exception cref="T:System.IO.IOException">
                An I/O error occurred, such as the specified file cannot be found.
            </exception>
            <exception cref="T:System.NotSupportedException">
                The stream does not support writing.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                stream was closed while the bytes were being written.
            </exception>
        </member>
        <member name="M:SilDev.Reorganize.SerializeObject``1(``0,System.Runtime.Serialization.StreamingContextStates)">
            <summary>
                Serializes this object graph into a sequence of bytes.
            </summary>
            <typeparam name="TSource">
                The type of the source.
            </typeparam>
            <param name="src">
                The object graph to convert.
            </param>
            <param name="state">
                Specifies the destination context for the stream during serialization.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.DeserializeObject``1(System.Byte[],``0,System.Runtime.Serialization.StreamingContextStates)">
            <summary>
                Deserializes this sequence of bytes into an object graph.
            </summary>
            <typeparam name="TResult">
                The type of the result.
            </typeparam>
            <param name="bytes">
                The sequence of bytes to convert.
            </param>
            <param name="defValue">
                The default value.
            </param>
            <param name="state">
                Specifies the source context for the stream during serialization.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.Increment(System.IntPtr,System.IntPtr)">
            <summary>
                Increments the length of a platform-specific type number with the specified
                value.
            </summary>
            <param name="intPointer">
                The platform-specific type to change.
            </param>
            <param name="value">
                The number to be incremented.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.FormatCurrent(System.String,System.Object)">
            <summary>
                Replaces one or more format items in this string with the string
                representation of a specified object using the
                <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/> format information.
            </summary>
            <param name="format">
                A composite format string.
            </param>
            <param name="arg0">
                The first object to format.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.FormatCurrent(System.String,System.Object,System.Object)">
            <summary>
                Replaces one or more format items in this string with the string
                representation of a specified objects using the
                <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/> format information.
            </summary>
            <param name="format">
                A composite format string.
            </param>
            <param name="arg0">
                The first object to format.
            </param>
            <param name="arg1">
                The second object to format.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.FormatCurrent(System.String,System.Object,System.Object,System.Object)">
            <summary>
                Replaces one or more format items in this string with the string
                representation of a specified objects using the
                <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/> format information.
            </summary>
            <param name="format">
                A composite format string.
            </param>
            <param name="arg0">
                The first object to format.
            </param>
            <param name="arg1">
                The second object to format.
            </param>
            <param name="arg2">
                The third object to format.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SilDev.Reorganize.FormatCurrent(System.String,System.Object[])">
            <summary>
                Replaces one or more format items in this string with the string
                representation of a specified objects using the
                <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/> format information.
            </summary>
            <param name="format">
                A composite format string.
            </param>
            <param name="args">
                The objects to format.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.FormatInvariant(System.String,System.Object)">
            <summary>
                Replaces one or more format items in this string with the string
                representation of a specified object using the
                <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/> format information.
            </summary>
            <param name="format">
                A composite format string.
            </param>
            <param name="arg0">
                The first object to format.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.FormatInvariant(System.String,System.Object,System.Object)">
            <summary>
                Replaces one or more format items in this string with the string
                representation of a specified objects using the
                <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/> format information.
            </summary>
            <param name="format">
                A composite format string.
            </param>
            <param name="arg0">
                The first object to format.
            </param>
            <param name="arg1">
                The second object to format.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.FormatInvariant(System.String,System.Object,System.Object,System.Object)">
            <summary>
                Replaces one or more format items in this string with the string
                representation of a specified objects using the
                <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/> format information.
            </summary>
            <param name="format">
                A composite format string.
            </param>
            <param name="arg0">
                The first object to format.
            </param>
            <param name="arg1">
                The second object to format.
            </param>
            <param name="arg2">
                The third object to format.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SilDev.Reorganize.FormatInvariant(System.String,System.Object[])">
            <summary>
                Replaces one or more format items in this string with the string
                representation of a specified objects using the
                <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/> format information.
            </summary>
            <param name="format">
                A composite format string.
            </param>
            <param name="args">
                The objects to format.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.FormatDefault(System.String,System.Object)">
            <summary>
                Replaces one or more format items in this string with the string
                representation of a specified object using the
                <see cref="P:SilDev.CultureConfig.GlobalCultureInfo"/> format information.
            </summary>
            <param name="format">
                A composite format string.
            </param>
            <param name="arg0">
                The first object to format.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.FormatDefault(System.String,System.Object,System.Object)">
            <summary>
                Replaces one or more format items in this string with the string
                representation of a specified objects using the
                <see cref="P:SilDev.CultureConfig.GlobalCultureInfo"/> format information.
            </summary>
            <param name="format">
                A composite format string.
            </param>
            <param name="arg0">
                The first object to format.
            </param>
            <param name="arg1">
                The second object to format.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.FormatDefault(System.String,System.Object,System.Object,System.Object)">
            <summary>
                Replaces one or more format items in this string with the string
                representation of a specified objects using the
                <see cref="P:SilDev.CultureConfig.GlobalCultureInfo"/> format information.
            </summary>
            <param name="format">
                A composite format string.
            </param>
            <param name="arg0">
                The first object to format.
            </param>
            <param name="arg1">
                The second object to format.
            </param>
            <param name="arg2">
                The third object to format.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SilDev.Reorganize.FormatDefault(System.String,System.Object[])">
            <summary>
                Replaces one or more format items in this string with the string
                representation of a specified objects using the
                <see cref="P:SilDev.CultureConfig.GlobalCultureInfo"/> format information.
            </summary>
            <param name="format">
                A composite format string.
            </param>
            <param name="args">
                The objects to format.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.Replace(System.String,System.String,System.String,System.StringComparison)">
            <summary>
                Returns a new string in which all occurrences of a specified string in the
                current instance are replaced with another specified string.
            </summary>
            <param name="str">
            </param>
            The string to change.
            <param name="oldValue">
                The string to be replaced.
            </param>
            <param name="newValue">
                The string to replace all occurrences of oldValue.
            </param>
            <param name="comparisonType">
                One of the enumeration values that specifies the rules for the search.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.ReduceWhiteSpace(System.String)">
            <summary>
                Reduce all white space characters in a string.
            </summary>
            <param name="str">
                The string to change.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.Reverse(System.String)">
            <summary>
                Reverses the sequence of all characters in a string.
            </summary>
            <param name="str">
                The string to change.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.Trim(System.String,System.Drawing.Font,System.Int32)">
            <summary>
                Trim the string logical on its maximum size.
            </summary>
            <param name="str">
                The string to change.
            </param>
            <param name="font">
                The font that is used to measure.
            </param>
            <param name="width">
                The maximum width in pixel.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.ToBoolean``1(``0)">
            <summary>
                Converts the value of this element to an equivalent <see cref="T:System.Boolean"/>
                value.
            </summary>
            <typeparam name="TSource">
                The type of the source element.
            </typeparam>
            <param name="src">
                The source to convert.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.ToBoolean``1(System.Nullable{``0})">
            <summary>
                Converts the value of this element to an equivalent <see cref="T:System.Boolean"/>
                value.
            </summary>
            <typeparam name="TSource">
                The type of the source element.
            </typeparam>
            <param name="src">
                The source to convert.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.ToChar``1(``0)">
            <summary>
                Converts the value of this element to its equivalent Unicode character.
                using the <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/> format information.
            </summary>
            <typeparam name="TSource">
                The type of the source element.
            </typeparam>
            <param name="src">
                The source to convert.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.ToChar``1(System.Nullable{``0})">
            <summary>
                Converts the value of this element to its equivalent Unicode character.
                using the <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/> format information.
            </summary>
            <typeparam name="TSource">
                The type of the source element.
            </typeparam>
            <param name="src">
                The source to convert.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.ToSByte``1(``0)">
            <summary>
                Converts the value of this element to a 8-bit signed integer, using the
                <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/> format information.
            </summary>
            <typeparam name="TSource">
                The type of the source element.
            </typeparam>
            <param name="src">
                The source to convert.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.ToSByte``1(System.Nullable{``0})">
            <summary>
                Converts the value of this element to a 8-bit signed integer, using the
                <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/> format information.
            </summary>
            <typeparam name="TSource">
                The type of the source element.
            </typeparam>
            <param name="src">
                The source to convert.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.ToByte``1(``0)">
            <summary>
                Converts the value of this element to a 8-bit unsigned integer, using the
                <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/> format information.
            </summary>
            <typeparam name="TSource">
                The type of the source element.
            </typeparam>
            <param name="src">
                The source to convert.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.ToByte``1(System.Nullable{``0})">
            <summary>
                Converts the value of this element to a 8-bit unsigned integer, using the
                <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/> format information.
            </summary>
            <typeparam name="TSource">
                The type of the source element.
            </typeparam>
            <param name="src">
                The source to convert.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.ToInt16``1(``0)">
            <summary>
                Converts the value of this element to a 16-bit signed integer, using the
                <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/> format information.
            </summary>
            <typeparam name="TSource">
                The type of the source element.
            </typeparam>
            <param name="src">
                The source to convert.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.ToInt16``1(System.Nullable{``0})">
            <summary>
                Converts the value of this element to a 16-bit signed integer, using the
                <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/> format information.
            </summary>
            <typeparam name="TSource">
                The type of the source element.
            </typeparam>
            <param name="src">
                The source to convert.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.ToUInt16``1(``0)">
            <summary>
                Converts the value of this element to a 16-bit unsigned integer, using the
                <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/> format information.
            </summary>
            <typeparam name="TSource">
                The type of the source element.
            </typeparam>
            <param name="src">
                The source to convert.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.ToUInt16``1(System.Nullable{``0})">
            <summary>
                Converts the value of this element to a 16-bit unsigned integer, using the
                <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/> format information.
            </summary>
            <typeparam name="TSource">
                The type of the source element.
            </typeparam>
            <param name="src">
                The source to convert.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.ToInt32``1(``0)">
            <summary>
                Converts the value of this element to a 32-bit signed integer, using the
                <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/> format information.
            </summary>
            <typeparam name="TSource">
                The type of the source element.
            </typeparam>
            <param name="src">
                The source to convert.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.ToInt32``1(System.Nullable{``0})">
            <summary>
                Converts the value of this element to a 32-bit signed integer, using the
                <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/> format information.
            </summary>
            <typeparam name="TSource">
                The type of the source element.
            </typeparam>
            <param name="src">
                The source to convert.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.ToUInt32``1(``0)">
            <summary>
                Converts the value of this element to a 32-bit unsigned integer, using the
                <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/> format information.
            </summary>
            <typeparam name="TSource">
                The type of the source element.
            </typeparam>
            <param name="src">
                The source to convert.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.ToUInt32``1(System.Nullable{``0})">
            <summary>
                Converts the value of this element to a 32-bit unsigned integer, using the
                <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/> format information.
            </summary>
            <typeparam name="TSource">
                The type of the source element.
            </typeparam>
            <param name="src">
                The source to convert.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.ToInt64``1(``0)">
            <summary>
                Converts the value of this element to a 64-bit signed integer, using the
                <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/> format information.
            </summary>
            <typeparam name="TSource">
                The type of the source element.
            </typeparam>
            <param name="src">
                The source to convert.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.ToInt64``1(System.Nullable{``0})">
            <summary>
                Converts the value of this element to a 64-bit signed integer, using the
                <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/> format information.
            </summary>
            <typeparam name="TSource">
                The type of the source element.
            </typeparam>
            <param name="src">
                The source to convert.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.ToUInt64``1(``0)">
            <summary>
                Converts the value of this element to a 64-bit unsigned integer, using the
                <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/> format information.
            </summary>
            <typeparam name="TSource">
                The type of the source element.
            </typeparam>
            <param name="src">
                The source to convert.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.ToUInt64``1(System.Nullable{``0})">
            <summary>
                Converts the value of this element to a 64-bit unsigned integer, using the
                <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/> format information.
            </summary>
            <typeparam name="TSource">
                The type of the source element.
            </typeparam>
            <param name="src">
                The source to convert.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.ToSingle``1(``0)">
            <summary>
                Converts the value of this element to an single-precision floating-point
                number, using the <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/> format
                information.
            </summary>
            <typeparam name="TSource">
                The type of the source element.
            </typeparam>
            <param name="src">
                The source to convert.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.ToSingle``1(System.Nullable{``0})">
            <summary>
                Converts the value of this element to an single-precision floating-point
                number, using the <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/> format
                information.
            </summary>
            <typeparam name="TSource">
                The type of the source element.
            </typeparam>
            <param name="src">
                The source to convert.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.ToDouble``1(``0)">
            <summary>
                Converts the value of this element to an double-precision floating-point
                number, using the <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/> format
                information.
            </summary>
            <typeparam name="TSource">
                The type of the source element.
            </typeparam>
            <param name="src">
                The source to convert.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.ToDouble``1(System.Nullable{``0})">
            <summary>
                Converts the value of this element to an double-precision floating-point
                number, using the <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/> format
                information.
            </summary>
            <typeparam name="TSource">
                The type of the source element.
            </typeparam>
            <param name="src">
                The source to convert.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.ToDecimal``1(``0)">
            <summary>
                Converts the value of this element to an equivalent decimal number, using
                the <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/> format information.
            </summary>
            <typeparam name="TSource">
                The type of the source element.
            </typeparam>
            <param name="src">
                The source to convert.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.ToDecimal``1(System.Nullable{``0})">
            <summary>
                Converts the value of this element to an equivalent decimal number, using
                the <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/> format information.
            </summary>
            <typeparam name="TSource">
                The type of the source element.
            </typeparam>
            <param name="src">
                The source to convert.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.ToDateTime``1(``0)">
            <summary>
                Converts the value of this element to an equivalent <see cref="T:System.DateTime"/>
                object, using the <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/> format
                information.
            </summary>
            <typeparam name="TSource">
                The type of the source element.
            </typeparam>
            <param name="src">
                The source to convert.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.ToDateTime``1(System.Nullable{``0})">
            <summary>
                Converts the value of this element to an equivalent <see cref="T:System.DateTime"/>
                object, using the <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/> format
                information.
            </summary>
            <typeparam name="TSource">
                The type of the source element.
            </typeparam>
            <param name="src">
                The source to convert.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.ToStringCurrent``1(``0,System.String)">
            <summary>
                Converts the value of this element to its equivalent string representation
                using the <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/> format information.
            </summary>
            <typeparam name="TSource">
                The type of the source element.
            </typeparam>
            <param name="src">
                The source to convert.
            </param>
            <param name="format">
                The format to use.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.ToStringCurrent``1(``0)">
            <summary>
                Converts the value of this element to its equivalent string representation
                using the <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/> format information.
            </summary>
            <typeparam name="TSource">
                The type of the source element.
            </typeparam>
            <param name="src">
                The source to convert.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.ToStringCurrent(System.Boolean)">
            <summary>
                Converts the value of this boolean to its equivalent string representation
                using the <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/> format information.
            </summary>
            <param name="b">
                The boolean value to convert.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.ToStringCurrent(System.Char)">
            <summary>
                Converts the value of this character to its equivalent string
                representation using the <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/> format
                information.
            </summary>
            <param name="chr">
                The character to convert.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.ToStringCurrent(System.DateTime,System.String)">
            <summary>
                Converts the value of this <see cref="T:System.DateTime"/> object to its equivalent
                string representation using the <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>
                format information.
            </summary>
            <param name="dateTime">
                The <see cref="T:System.DateTime"/> value to convert.
            </param>
            <param name="format">
                A standard or custom date and time format string.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.ToStringCurrent(System.DateTime)">
            <summary>
                Converts the value of this <see cref="T:System.DateTime"/> object to its equivalent
                string representation using the <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>
                format information.
            </summary>
            <param name="dateTime">
                The <see cref="T:System.DateTime"/> value to convert.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.ToStringDefault``1(``0,System.String)">
            <summary>
                Converts the value of this element to its equivalent string representation
                using the <see cref="P:SilDev.CultureConfig.GlobalCultureInfo"/> format information.
            </summary>
            <typeparam name="TSource">
                The type of the source element.
            </typeparam>
            <param name="src">
                The source to convert.
            </param>
            <param name="format">
                The format to use.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.ToStringDefault``1(``0)">
            <summary>
                Converts the value of this element to its equivalent string representation
                using the <see cref="P:SilDev.CultureConfig.GlobalCultureInfo"/> format information.
            </summary>
            <typeparam name="TSource">
                The type of the source element.
            </typeparam>
            <param name="src">
                The source to convert.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.ToStringDefault(System.Boolean)">
            <summary>
                Converts the value of this boolean to its equivalent string representation
                using the <see cref="P:SilDev.CultureConfig.GlobalCultureInfo"/> format information.
            </summary>
            <param name="b">
                The boolean value to convert.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.ToStringDefault(System.Char)">
            <summary>
                Converts the value of this character to its equivalent string
                representation using the <see cref="P:SilDev.CultureConfig.GlobalCultureInfo"/>
                format information.
            </summary>
            <param name="chr">
                The character to convert.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.ToStringDefault(System.DateTime,System.String)">
            <summary>
                Converts the value of this <see cref="T:System.DateTime"/> object to its equivalent
                string representation using the
                <see cref="P:SilDev.CultureConfig.GlobalCultureInfo"/> format information.
            </summary>
            <param name="dateTime">
                The <see cref="T:System.DateTime"/> value to convert.
            </param>
            <param name="format">
                A standard or custom date and time format string.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.ToStringDefault(System.DateTime)">
            <summary>
                Converts the value of this <see cref="T:System.DateTime"/> object to its equivalent
                string representation using the
                <see cref="P:SilDev.CultureConfig.GlobalCultureInfo"/> format information.
            </summary>
            <param name="dateTime">
                The <see cref="T:System.DateTime"/> value to convert.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.ToStrings(System.String)">
            <summary>
                Creates a sequence of strings based on natural (base e) logarithm of a
                count of all the characters in the specified string.
            </summary>
            <param name="str">
                The string to change.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.Sort(System.String[])">
            <summary>
                Sorts the elements in an entire string array using the
                <see cref="T:System.IComparable`1"/> generic interface implementation of each
                element of the string array.
            </summary>
            <param name="strs">
                The sequence of strings to sort.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.Split(System.String,System.String,System.StringSplitOptions)">
            <summary>
                Splits a string into substrings based on the strings in an array. You can
                specify whether the substrings include empty array elements.
            </summary>
            <param name="str">
                The string to split.
            </param>
            <param name="separator">
                The string to use as a separator.
            </param>
            <param name="splitOptions">
                The split options.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.SplitNewLine(System.String,System.StringSplitOptions,System.Boolean)">
            <summary>
                Splits a string into substrings based on <see cref="P:System.Environment.NewLine"/>.
            </summary>
            <param name="str">
                The string to split.
            </param>
            <param name="splitOptions">
                The split options.
            </param>
            <param name="trim">
                <see langword="true"/> to trim each line; otherwise,
                <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.SplitNewLine(System.String,System.Boolean)">
            <summary>
                Splits a string into substrings based on <see cref="P:System.Environment.NewLine"/>.
            </summary>
            <param name="str">
                The string to split.
            </param>
            <param name="trim">
                <see langword="true"/> to trim each line; otherwise,
                <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.ToBytes``1(System.String,``0)">
            <summary>
                Converts all the characters in the specified string into a sequence of
                bytes with the specified <see cref="T:System.Text.Encoding"/> format.
            </summary>
            <typeparam name="TEncoding">
                The type of encoding.
            </typeparam>
            <param name="str">
                The string to convert.
            </param>
            <param name="encoding">
                The <see cref="T:System.Text.Encoding"/> format.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.ToBytesDefault(System.String)">
            <summary>
                Converts all the characters in the specified string into a sequence of
                bytes with the <see cref="P:SilDev.EncodingEx.Ansi"/> format.
            </summary>
            <param name="str">
                The string to convert.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.ToBytesUtf8(System.String)">
            <summary>
                Converts all the characters in the specified string into a sequence of
                bytes with the <see cref="P:SilDev.EncodingEx.Utf8NoBom"/> format.
            </summary>
            <param name="str">
                The string to convert.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.ToString``1(System.Byte[],``0)">
            <summary>
                Converts the specified sequence of bytes into a string with the specified
                <see cref="T:System.Text.Encoding"/> format.
            </summary>
            <typeparam name="TEncoding">
                The type of encoding.
            </typeparam>
            <param name="bytes">
                The sequence of bytes to convert.
            </param>
            <param name="encoding">
                The <see cref="T:System.Text.Encoding"/> format.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.ToStringDefault(System.Byte[])">
            <summary>
                Converts the specified sequence of bytes into a string with the specified
                <see cref="P:SilDev.EncodingEx.Ansi"/> format.
            </summary>
            <param name="bytes">
                The sequence of bytes to convert.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.ToStringUtf8(System.Byte[])">
            <summary>
                Converts the specified sequence of bytes into a string with the specified
                <see cref="P:SilDev.EncodingEx.Utf8NoBom"/> format.
            </summary>
            <param name="bytes">
                The sequence of bytes to convert.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.ToVersion(System.String)">
            <summary>
                Converts the string representation of a version number to an equivalent
                <see cref="T:System.Version"/> object.
            </summary>
            <param name="str">
                The string to convert.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.ToRectangle(System.String)">
            <summary>
                Converts the string representation of a rectangle to an equivalent
                <see cref="T:System.Drawing.Rectangle"/> object.
            </summary>
            <param name="str">
                The string to convert.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.ToPoint(System.String)">
            <summary>
                Converts the string representation of a pair of integers for x- and
                y-coordinate into a corresponding <see cref="T:System.Drawing.Point"/> object.
            </summary>
            <param name="str">
                The string to convert.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.ToSize(System.String)">
            <summary>
                Converts the string representation of a pair of integers for width and
                height into a corresponding <see cref="T:System.Drawing.Size"/> object.
            </summary>
            <param name="str">
                The string to convert.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.LowerText(System.String,System.String[])">
            <summary>
                Converts the specified strings in a string to lowercase.
            </summary>
            <param name="str">
                The string to change.
            </param>
            <param name="strs">
                The sequence of strings to convert.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.UpperText(System.String,System.String[])">
            <summary>
                Converts the specified strings in a string to uppercase.
            </summary>
            <param name="str">
                The string to change.
            </param>
            <param name="strs">
                The sequence of strings to convert.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.RemoveChar(System.Char[],System.Char[])">
            <summary>
                Removes the specified characters in a char array.
            </summary>
            <param name="array">
                The char array to change.
            </param>
            <param name="chrs">
                The sequence of characters to remove.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.RemoveChar(System.String,System.Char[])">
            <summary>
                Removes the specified characters in a string.
            </summary>
            <param name="str">
                The string to change.
            </param>
            <param name="chrs">
                The sequence of characters to remove.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.RemoveText(System.String,System.String[])">
            <summary>
                Removes the specified strings in a string.
            </summary>
            <param name="str">
                The string to change.
            </param>
            <param name="strs">
                The sequence of strings to remove.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.RemoveTextIgnoreCase(System.String,System.String[])">
            <summary>
                Removes the specified strings in a string.
            </summary>
            <param name="str">
                The string to change.
            </param>
            <param name="patterns">
                The sequence of regular expression patterns to match.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.Replace(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
                Returns a new sequence of bytes in which all occurrences of a specified
                sequence of bytes in this instance are replaced with another specified
                sequence of bytes.
            </summary>
            <param name="bytes">
                The sequence of bytes to change.
            </param>
            <param name="oldValue">
                The sequence of bytes to be replaced.
            </param>
            <param name="newValue">
                The sequence of bytes to replace all occurrences of oldValue.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.Parse(System.String,System.Type)">
            <summary>
                Converts the specified string to the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="value">
                The value to convert.
            </param>
            <param name="returnType">
                The type to which the return value should be converted.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.TryParse(System.String,System.Object@,System.Type)">
            <summary>
                Converts the specified string to the provided type.
            </summary>
            <param name="value">
                The value to convert.
            </param>
            <param name="result">
                The result value.
            </param>
            <param name="returnType">
                The type to which the return value should be converted.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.Parse``1(System.Object,``0)">
            <summary>
                Converts the specified object to the provided type.
            </summary>
            <typeparam name="TResult">
                The type of the result.
            </typeparam>
            <param name="value">
                The value to convert.
            </param>
            <param name="defValue">
                The default value.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.TryParse``1(System.Object,``0@,``0)">
            <summary>
                Converts the specified object to the provided type.
            </summary>
            <typeparam name="TResult">
                The type of the result.
            </typeparam>
            <param name="value">
                The value to convert.
            </param>
            <param name="result">
                The result value.
            </param>
            <param name="defValue">
                The default value.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.Update``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
                Updates an element with the provided key and value of the specified
                dictionary.
            </summary>
            <typeparam name="TKey">
                The type of the keys in the dictionary.
            </typeparam>
            <typeparam name="TValue">
                The type of the values in the dictionary.
            </typeparam>
            <param name="source">
                The generic collection of key/value pairs.
            </param>
            <param name="key">
                The key of the element to update.
            </param>
            <param name="value">
                The new value.
            </param>
            <exception cref="T:System.ArgumentNullException">
                source or key is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
                source is read-only.
            </exception>
        </member>
        <member name="T:SilDev.ImageResourceSymbol">
            <summary>
                Provides enumerated symbol index values of the Windows Image Resource
                dynamic link library ('imageres.dll') file on Windows 10.
                <para>
                    &#9762; Please note that Microsoft has started replacing some icons
                    with blank ones and the general order also changes with each version of
                    Windows. The order should be handled until Windows 11, but if some
                    symbols are wrong, you can play this indexing game yourself using
                    directly the <see cref="M:SilDev.ResourcesEx.GetSystemIcon(System.Int32,System.Boolean,System.String)"/>
                    method.
                </para>
            </summary>
        </member>
        <member name="T:SilDev.ResourcesEx">
            <summary>
                Provides static methods for the usage of data resources.
            </summary>
        </member>
        <member name="M:SilDev.ResourcesEx.GetIconPairsFromFile(System.String)">
            <summary>
                Extracts all icon resources from the file under the specified path, and
                returns its <see cref="T:System.Tuple`2"/> instances with the large icon as
                the first item and the small icon as the second.
            </summary>
            <param name="path">
                The path to the file that contains icon resources.
            </param>
            <exception cref="T:System.ArgumentNullException">
                path is null.
            </exception>
            <exception cref="T:SilDev.PathNotFoundException">
                path not found.
            </exception>
            <exception cref="T:System.ComponentModel.Win32Exception">
                path has no icon resources.
            </exception>
        </member>
        <member name="M:SilDev.ResourcesEx.GetIconsFromFile(System.String,System.Boolean)">
            <summary>
                Extracts all large or small icon resources from the file under the
                specified path, and returns its <see cref="T:System.Drawing.Icon"/> instances.
            </summary>
            <param name="path">
                The path to the file that contains icon resources.
            </param>
            <param name="large">
                <see langword="true"/> to return the large icons; otherwise,
                <see langword="false"/> to return the small icons.
            </param>
            <exception cref="T:System.ArgumentNullException">
                path is null.
            </exception>
            <exception cref="T:SilDev.PathNotFoundException">
                path not found.
            </exception>
            <exception cref="T:System.ComponentModel.Win32Exception">
                path has no icon resources.
            </exception>
        </member>
        <member name="M:SilDev.ResourcesEx.GetIconFromFile(System.String,System.Int32,System.Boolean)">
            <summary>
                Extracts an icon resource under the specified index, from the file under
                the specified path, and returns its <see cref="T:System.Drawing.Icon"/> instance.
            </summary>
            <param name="path">
                The path to the file that contains icon resources.
            </param>
            <param name="index">
                The index of the icon to extract.
            </param>
            <param name="large">
                <see langword="true"/> to return the large icon; otherwise,
                <see langword="false"/> to return the small icon.
            </param>
        </member>
        <member name="M:SilDev.ResourcesEx.GetImageResourceValue(SilDev.ImageResourceSymbol,System.String)">
            <summary>
                Retrieves a backward-compatible integer value of the specified
                <see cref="T:SilDev.ImageResourceSymbol"/> value, which depends on the file version
                of the 'imageres.dll' file under the specified location.
            </summary>
            <param name="value">
                The <see cref="T:SilDev.ImageResourceSymbol"/> value.
            </param>
            <param name="location">
                The directory where the 'imageres.dll' file is located.
            </param>
        </member>
        <member name="M:SilDev.ResourcesEx.GetImageResourceName(System.Int32,System.String)">
            <summary>
                Retrieves a backward-compatible string value of the specified symbol index
                value, which depends on the file version of the 'imageres.dll' file under
                the specified location.
            </summary>
            <param name="value">
                The symbol index value.
            </param>
            <param name="location">
                The directory where the 'imageres.dll' file is located.
            </param>
        </member>
        <member name="M:SilDev.ResourcesEx.GetSystemIcon(System.Int32,System.Boolean,System.String)">
            <summary>
                Extracts a large or small icon resource under the specified index, from the
                'imageres.dll' under specified location, and returns its <see cref="T:System.Drawing.Icon"/>
                instance.
            </summary>
            <param name="index">
                The index of the icon to extract.
            </param>
            <param name="large">
                <see langword="true"/> to return the large image; otherwise,
                <see langword="false"/>.
            </param>
            <param name="location">
                The directory where the 'imageres.dll' file is located.
            </param>
        </member>
        <member name="M:SilDev.ResourcesEx.GetSystemIcon(System.Int32,System.String)">
            <inheritdoc cref="M:SilDev.ResourcesEx.GetSystemIcon(System.Int32,System.Boolean,System.String)"/>
        </member>
        <member name="M:SilDev.ResourcesEx.GetSystemIcon(SilDev.ImageResourceSymbol,System.Boolean,System.String)">
            <inheritdoc cref="M:SilDev.ResourcesEx.GetSystemIcon(System.Int32,System.Boolean,System.String)"/>
        </member>
        <member name="M:SilDev.ResourcesEx.GetSystemIcon(SilDev.ImageResourceSymbol,System.String)">
            <inheritdoc cref="M:SilDev.ResourcesEx.GetSystemIcon(System.Int32,System.Boolean,System.String)"/>
        </member>
        <member name="M:SilDev.ResourcesEx.GetFileTypeIcon(System.String,System.Boolean)">
            <summary>
                Returns an file type icon of the specified file.
            </summary>
            <param name="path">
                The file to get the file type icon.
            </param>
            <param name="large">
                <see langword="true"/> to return the large image; otherwise,
                <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.ResourcesEx.Extract(System.Byte[],System.String,System.Boolean)">
            <summary>
                Extracts the specified resources from the current process to a new file.
            </summary>
            <param name="resData">
                The resource to extract.
            </param>
            <param name="destPath">
                The file to create.
            </param>
            <param name="reverseBytes">
                <see langword="true"/> to invert the order of the bytes in the specified
                sequence before extracting; otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="T:SilDev.ServiceState">
            <summary>
                Provides enumerated values of service states.
            </summary>
        </member>
        <member name="F:SilDev.ServiceState.Continuing">
            <summary>
                The service continue is pending.
            </summary>
        </member>
        <member name="F:SilDev.ServiceState.Pausing">
            <summary>
                The service pause is pending.
            </summary>
        </member>
        <member name="F:SilDev.ServiceState.Paused">
            <summary>
                The service is paused.
            </summary>
        </member>
        <member name="F:SilDev.ServiceState.Running">
            <summary>
                The service is running.
            </summary>
        </member>
        <member name="F:SilDev.ServiceState.Starting">
            <summary>
                The service is starting.
            </summary>
        </member>
        <member name="F:SilDev.ServiceState.Stopping">
            <summary>
                The service is stopping.
            </summary>
        </member>
        <member name="F:SilDev.ServiceState.Stopped">
            <summary>
                The service is not running.
            </summary>
        </member>
        <member name="F:SilDev.ServiceState.NotFound">
            <summary>
                The service could not be found.
            </summary>
        </member>
        <member name="F:SilDev.ServiceState.Unknown">
            <summary>
                The service state could not be determined.
            </summary>
        </member>
        <member name="T:SilDev.Service">
            <summary>
                Provides static methods to control service applications.
            </summary>
        </member>
        <member name="M:SilDev.Service.Install(System.String,System.String,System.String,System.String)">
            <summary>
                Creates a service object.
            </summary>
            <param name="serviceName">
                The name of the service to install.
            </param>
            <param name="displayName">
                The display name to be used by user interface programs to identify the
                service.
            </param>
            <param name="path">
                The fully qualified path to the service binary file.
            </param>
            <param name="args">
                The command-line arguments for the service binary file.
            </param>
        </member>
        <member name="M:SilDev.Service.Install(System.String,System.String)">
            <summary>
                Creates a service object.
            </summary>
            <param name="serviceName">
                The name of the service to install.
            </param>
            <param name="path">
                The fully qualified path to the service binary file.
            </param>
        </member>
        <member name="M:SilDev.Service.Uninstall(System.String)">
            <summary>
                Removes an existing service.
            </summary>
            <param name="serviceName">
                The name of the service to uninstall.
            </param>
        </member>
        <member name="M:SilDev.Service.Exists(System.String)">
            <summary>
                Determines whether the specified service exists.
            </summary>
            <param name="serviceName">
                The name of the service to check.
            </param>
        </member>
        <member name="M:SilDev.Service.Start(System.String)">
            <summary>
                Starts an existing service.
            </summary>
            <param name="serviceName">
                The name of the service to start.
            </param>
        </member>
        <member name="M:SilDev.Service.Stop(System.String)">
            <summary>
                Stops an existing service.
            </summary>
            <param name="serviceName">
                The name of the service to stop.
            </param>
        </member>
        <member name="M:SilDev.Service.GetStatus(System.String)">
            <summary>
                Returns the current <see cref="T:SilDev.ServiceState"/> of an existing service.
            </summary>
            <param name="serviceName">
                The name of the service to check.
            </param>
        </member>
        <member name="T:SilDev.ShellLinkShowState">
            <summary>
                Provides enumerated values of window show statements.
            </summary>
        </member>
        <member name="F:SilDev.ShellLinkShowState.Normal">
            <summary>
                Activates and displays a window.
            </summary>
        </member>
        <member name="F:SilDev.ShellLinkShowState.Maximized">
            <summary>
                Activates the window and displays it as a maximized window.
            </summary>
        </member>
        <member name="F:SilDev.ShellLinkShowState.MinNoActive">
            <summary>
                Displays the window as a minimized window.
            </summary>
        </member>
        <member name="T:SilDev.ShellLinkInfo">
            <summary>
                Specifies a set of values that are used when you create a shell link.
            </summary>
        </member>
        <member name="P:SilDev.ShellLinkInfo.Description">
            <summary>
                The description for the link.
            </summary>
        </member>
        <member name="P:SilDev.ShellLinkInfo.Arguments">
            <summary>
                The arguments which applies when the link is started.
            </summary>
        </member>
        <member name="P:SilDev.ShellLinkInfo.TargetPath">
            <summary>
                The file or directory to be linked.
            </summary>
        </member>
        <member name="P:SilDev.ShellLinkInfo.WorkingDirectory">
            <summary>
                The working directory for the link to be started.
            </summary>
        </member>
        <member name="P:SilDev.ShellLinkInfo.IconLocation">
            <summary>
                The icon resource path and resource identifier.
            </summary>
        </member>
        <member name="P:SilDev.ShellLinkInfo.ShowState">
            <summary>
                The show state of the window.
            </summary>
        </member>
        <member name="P:SilDev.ShellLinkInfo.LinkPath">
            <summary>
                The fully qualified name of the link.
            </summary>
        </member>
        <member name="M:SilDev.ShellLinkInfo.Equals(SilDev.ShellLinkInfo)">
            <summary>
                Determines whether this instance have same values as the specified
                <see cref="T:SilDev.ShellLinkInfo"/> instance.
            </summary>
            <param name="other">
                The <see cref="T:SilDev.ShellLinkInfo"/> instance to compare.
            </param>
        </member>
        <member name="M:SilDev.ShellLinkInfo.Equals(System.Object)">
            <summary>
                Determines whether this instance have same values as the specified
                <see cref="T:System.Object"/>.
            </summary>
            <param name="other">
                The  <see cref="T:System.Object"/> to compare.
            </param>
        </member>
        <member name="M:SilDev.ShellLinkInfo.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:SilDev.ShellLinkInfo.op_Equality(SilDev.ShellLinkInfo,SilDev.ShellLinkInfo)">
            <summary>
                Determines whether two specified <see cref="T:SilDev.ShellLinkInfo"/> instances have
                same values.
            </summary>
            <param name="left">
                The first <see cref="T:SilDev.ShellLinkInfo"/> instance to compare.
            </param>
            <param name="right">
                The second <see cref="T:SilDev.ShellLinkInfo"/> instance to compare.
            </param>
        </member>
        <member name="M:SilDev.ShellLinkInfo.op_Inequality(SilDev.ShellLinkInfo,SilDev.ShellLinkInfo)">
            <summary>
                Determines whether two specified <see cref="T:SilDev.ShellLinkInfo"/> instances have
                different values.
            </summary>
            <param name="left">
                The first <see cref="T:SilDev.ShellLinkInfo"/> instance to compare.
            </param>
            <param name="right">
                The second <see cref="T:SilDev.ShellLinkInfo"/> instance to compare.
            </param>
        </member>
        <member name="T:SilDev.ShellLink">
            <summary>
                Provides the functionality to handle shell links.
            </summary>
        </member>
        <member name="M:SilDev.ShellLink.Create(SilDev.ShellLinkInfo,System.Boolean)">
            <summary>
                Creates a shell link based on the specified <see cref="T:SilDev.ShellLinkInfo"/>
                structure.
            </summary>
            <param name="shellLinkInfo">
                The <see cref="T:SilDev.ShellLinkInfo"/> structure.
            </param>
            <param name="skipExists">
                <see langword="true"/> to skip existing links without further checks;
                otherwise, <see langword="false"/>.
            </param>
            ReSharper disable SuspiciousTypeConversion.Global
        </member>
        <member name="M:SilDev.ShellLink.Destroy(System.String)">
            <summary>
                Removes a link of the specified file or directory.
            </summary>
            <param name="path">
                The shell link to be removed.
            </param>
        </member>
        <member name="M:SilDev.ShellLink.GetTarget(System.String)">
            <summary>
                Returns the target path of the specified link.
            </summary>
            <param name="path">
                The link to get the target path.
            </param>
        </member>
        <member name="T:SilDev.SymbolicLink">
            <summary>
                Provides the functionality to handle symbolic links.
            </summary>
        </member>
        <member name="M:SilDev.SymbolicLink.Create(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Creates a symbolic link to the specified file or directory based on command
                prompt which allows a simple solution for the elevated execution of this
                order.
            </summary>
            <param name="linkPath">
                The file or directory to be linked.
            </param>
            <param name="destPath">
                The fully qualified name of the new link.
            </param>
            <param name="destIsDir">
                <see langword="true"/> to determine that the destination path is a
                directory; otherwise, <see langword="false"/>.
            </param>
            <param name="backup">
                <see langword="true"/> to create an backup for existing files; otherwise,
                <see langword="false"/>.
            </param>
            <param name="elevated">
                <see langword="true"/> to create this link with highest privileges;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.SymbolicLink.Destroy(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Removes an symbolic link of the specified file or directory link based on
                command prompt which allows a simple solution for the elevated execution of
                this order.
            </summary>
            <param name="path">
                The link to be removed.
            </param>
            <param name="pathIsDir">
                <see langword="true"/> to determine that the path is a directory;
                otherwise, <see langword="false"/>.
            </param>
            <param name="backup">
                <see langword="true"/> to restore found backups; otherwise,
                <see langword="false"/>.
            </param>
            <param name="elevated">
                <see langword="true"/> to remove this link with highest privileges;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="T:SilDev.RestoreEventType">
            <summary>
                The type of event. For more information, see
                <see cref="M:SilDev.SystemRestore.Create(System.String,SilDev.RestoreEventType,SilDev.RestorePointType)"/>.
            </summary>
        </member>
        <member name="F:SilDev.RestoreEventType.BeginNestedSystemChange">
            <summary>
                A system change has begun. A subsequent nested call does not create a new
                restore point.
                <para>
                    Subsequent calls must use <see cref="F:SilDev.RestoreEventType.EndNestedSystemChange"/>, not
                    <see cref="F:SilDev.RestoreEventType.EndSystemChange"/>.
                </para>
            </summary>
        </member>
        <member name="F:SilDev.RestoreEventType.BeginSystemChange">
            <summary>
                A system change has begun.
            </summary>
        </member>
        <member name="F:SilDev.RestoreEventType.EndNestedSystemChange">
            <summary>
                A system change has ended.
            </summary>
        </member>
        <member name="F:SilDev.RestoreEventType.EndSystemChange">
            <summary>
                A system change has ended.
            </summary>
        </member>
        <member name="T:SilDev.RestorePointType">
            <summary>
                The type of restore point. For more information, see
                <see cref="M:SilDev.SystemRestore.Create(System.String,SilDev.RestoreEventType,SilDev.RestorePointType)"/>.
            </summary>
        </member>
        <member name="F:SilDev.RestorePointType.ApplicationInstall">
            <summary>
                An application has been installed.
            </summary>
        </member>
        <member name="F:SilDev.RestorePointType.ApplicationUninstall">
            <summary>
                An application has been uninstalled.
            </summary>
        </member>
        <member name="F:SilDev.RestorePointType.CancelledOperation">
            <summary>
                An application needs to delete the restore point it created. For example,
                an application would use this flag when a user cancels an installation.
            </summary>
        </member>
        <member name="F:SilDev.RestorePointType.DeviceDriverInstall">
            <summary>
                A device driver has been installed.
            </summary>
        </member>
        <member name="F:SilDev.RestorePointType.ModifySettings">
            <summary>
                An application has had features added or removed.
            </summary>
        </member>
        <member name="T:SilDev.SystemRestore">
            <summary>
                Provides functionality to handle system restore points.
            </summary>
        </member>
        <member name="P:SilDev.SystemRestore.IsEnabled">
            <summary>
                Determines whether the system restoring is enabled.
            </summary>
        </member>
        <member name="M:SilDev.SystemRestore.Create(System.String,SilDev.RestoreEventType,SilDev.RestorePointType)">
            <summary>
                Creates a restore point on the local system.
            </summary>
            <param name="description">
                The description to be displayed so the user can easily identify a restore
                point.
            </param>
            <param name="eventType">
                The type of event.
            </param>
            <param name="restorePointType">
                The type of restore point.
            </param>
        </member>
        <member name="T:SilDev.TaskBarAlignment">
            <summary>
                Provides enumerated flags of the taskbar alignment, added in Windows 11.
            </summary>
        </member>
        <member name="F:SilDev.TaskBarAlignment.Left">
            <summary>
                The taskbar alignment is on the left side.
            </summary>
        </member>
        <member name="F:SilDev.TaskBarAlignment.Center">
            <summary>
                The taskbar alignment is centered.
            </summary>
        </member>
        <member name="T:SilDev.TaskBarLocation">
            <summary>
                Provides enumerated flags of the taskbar location.
            </summary>
        </member>
        <member name="F:SilDev.TaskBarLocation.Hidden">
            <summary>
                The taskbar is hidden.
            </summary>
        </member>
        <member name="F:SilDev.TaskBarLocation.Top">
            <summary>
                The taskbar is located at the top.
            </summary>
        </member>
        <member name="F:SilDev.TaskBarLocation.Bottom">
            <summary>
                The taskbar is located at the bottom.
            </summary>
        </member>
        <member name="F:SilDev.TaskBarLocation.Left">
            <summary>
                The taskbar is on the left side.
            </summary>
        </member>
        <member name="F:SilDev.TaskBarLocation.Right">
            <summary>
                The taskbar is on the right side.
            </summary>
        </member>
        <member name="T:SilDev.TaskBarProgressState">
            <summary>
                Provides enumerated options that control the current state of the progress
                button.
            </summary>
        </member>
        <member name="F:SilDev.TaskBarProgressState.NoProgress">
            <summary>
                Stops displaying progress and returns the button to its normal state. Call
                this method with this flag to dismiss the progress bar when the operation
                is complete or canceled.
            </summary>
        </member>
        <member name="F:SilDev.TaskBarProgressState.Indeterminate">
            <summary>
                The progress indicator does not grow in size, but cycles repeatedly along
                the length of the taskbar button. This indicates activity without
                specifying what proportion of the progress is complete. Progress is taking
                place, but there is no prediction as to how long the operation will take.
            </summary>
        </member>
        <member name="F:SilDev.TaskBarProgressState.Normal">
            <summary>
                The progress indicator grows in size from left to right in proportion to
                the estimated amount of the operation completed. This is a determinate
                progress indicator; a prediction is being made as to the duration of the
                operation.
            </summary>
        </member>
        <member name="F:SilDev.TaskBarProgressState.Error">
            <summary>
                The progress indicator turns red to show that an error has occurred in one
                of the windows that is broadcasting progress. This is a determinate state.
                If the progress indicator is in the indeterminate state, it switches to a
                red determinate display of a generic percentage not indicative of actual
                progress.
            </summary>
        </member>
        <member name="F:SilDev.TaskBarProgressState.Paused">
            <summary>
                The progress indicator turns yellow to show that progress is currently
                stopped in one of the windows but can be resumed by the user. No error
                condition exists and nothing is preventing the progress from continuing.
                This is a determinate state. If the progress indicator is in the
                indeterminate state, it switches to a yellow determinate display of a
                generic percentage not indicative of actual progress.
            </summary>
        </member>
        <member name="T:SilDev.TaskBarState">
            <summary>
                Provides enumerated options that control the current state of the taskbar.
            </summary>
        </member>
        <member name="F:SilDev.TaskBarState.AutoHide">
            <summary>
                The taskbar is in the autohide state.
            </summary>
        </member>
        <member name="F:SilDev.TaskBarState.AlwaysOnTop">
            <summary>
                The taskbar is in the always-on-top state.
                <para>
                    Note that as of Windows 7, AlwaysOnTop is no longer returned because
                    the taskbar is always in that state.
                </para>
            </summary>
        </member>
        <member name="T:SilDev.TaskBar">
            <summary>
                Provides static methods to enable you to get or set the state of the
                taskbar.
            </summary>
        </member>
        <member name="M:SilDev.TaskBar.GetState">
            <summary>
                Returns the current <see cref="T:SilDev.TaskBarState"/> of the taskbar.
            </summary>
        </member>
        <member name="M:SilDev.TaskBar.SetState(SilDev.TaskBarState)">
            <summary>
                Sets the new <see cref="T:SilDev.TaskBarState"/> of the taskbar.
            </summary>
            <param name="state">
                The new state to set.
            </param>
        </member>
        <member name="M:SilDev.TaskBar.GetAlignment">
            <summary>
                Returns the current <see cref="T:SilDev.TaskBarAlignment"/> of the taskbar.
            </summary>
        </member>
        <member name="M:SilDev.TaskBar.GetLocation(System.IntPtr)">
            <summary>
                Returns the location of the taskbar.
            </summary>
            <param name="hWnd">
                The handle of the window on which the taskbar is located.
            </param>
        </member>
        <member name="M:SilDev.TaskBar.GetSize(System.IntPtr)">
            <summary>
                Returns the size of the taskbar.
            </summary>
            <param name="hWnd">
                The handle of the window on which the taskbar is located.
            </param>
        </member>
        <member name="M:SilDev.TaskBar.AddTab(System.IntPtr)">
            <summary>
                Adds an item to the taskbar.
            </summary>
            <param name="hWnd">
                A handle to the window to be added to the taskbar.
            </param>
            ReSharper disable SuspiciousTypeConversion.Global
        </member>
        <member name="M:SilDev.TaskBar.DeleteTab(System.IntPtr)">
            <summary>
                Deletes an item from the taskbar.
            </summary>
            <param name="hWnd">
                A handle to the window to be deleted from the taskbar.
            </param>
            ReSharper disable SuspiciousTypeConversion.Global
        </member>
        <member name="M:SilDev.TaskBar.GetPinLink(System.String)">
            <summary>
                Gets the link path from a pinned item based on its file path.
            </summary>
            <param name="path">
                The file to get the link.
            </param>
        </member>
        <member name="M:SilDev.TaskBar.IsPinned(System.String)">
            <summary>
                Determines whether the specified file is pinned.
            </summary>
            <param name="path">
                The file to be checked.
            </param>
        </member>
        <member name="M:SilDev.TaskBar.Pin(System.String)">
            <summary>
                Pin the specified file to taskbar.
            </summary>
            <param name="path">
                The file to be pinned.
            </param>
        </member>
        <member name="M:SilDev.TaskBar.Unpin(System.String)">
            <summary>
                Unpin the specified file to taskbar.
            </summary>
            <param name="path">
                The file to be unpinned.
            </param>
        </member>
        <member name="T:SilDev.TaskBarProgress">
            <summary>
                Provides static methods to manage a progress bar hosted in a taskbar
                button.
            </summary>
            ReSharper disable SuspiciousTypeConversion.Global
        </member>
        <member name="M:SilDev.TaskBarProgress.SetState(System.IntPtr,SilDev.TaskBarProgressState)">
            <summary>
                Sets the type and state of the progress indicator displayed on a taskbar
                button.
            </summary>
            <param name="hWnd">
                The handle of the window in which the progress of an operation is being
                shown.
            </param>
            <param name="state">
                The flag that control the current state of the progress button.
            </param>
        </member>
        <member name="M:SilDev.TaskBarProgress.SetValue(System.IntPtr,System.Double,System.Double)">
            <summary>
                Displays or updates a progress bar hosted in a taskbar button to show the
                specific percentage completed of the full operation.
            </summary>
            <param name="hWnd">
                The handle of the window whose associated taskbar button is being used as a
                progress indicator.
            </param>
            <param name="progressValue">
                An application-defined value that indicates the proportion of the operation
                that has been completed at the time the method is called.
            </param>
            <param name="progressMax">
                An application-defined value that specifies the value ullCompleted will
                have when the operation is complete.
            </param>
        </member>
        <member name="T:SilDev.TextEx">
            <summary>
                Provides static methods for converting text.
            </summary>
        </member>
        <member name="M:SilDev.TextEx.IsAscii(System.Char)">
            <summary>
                Indicates whether the this character is categorized as an ASCII character.
            </summary>
            <param name="ch">
                The character to evaluate.
            </param>
        </member>
        <member name="M:SilDev.TextEx.IsLatin1(System.Char)">
            <summary>
                Indicates whether the this character is categorized as an Latin-1
                (ISO-8859-1) character.
            </summary>
            <param name="ch">
                The character to evaluate.
            </param>
        </member>
        <member name="M:SilDev.TextEx.IsLineSeparator(System.Char)">
            <summary>
                Indicates whether the this character is categorized as a line separator
                character.
            </summary>
            <param name="ch">
                The character to evaluate.
            </param>
        </member>
        <member name="M:SilDev.TextEx.StripNewLine(System.String)">
            <summary>
                Strips multiple line separator characters.
            </summary>
            <param name="text">
                The text to change.
            </param>
        </member>
        <member name="M:SilDev.TextEx.StripWhiteSpace(System.String)">
            <summary>
                Strips multiple white-space characters.
            </summary>
            <param name="text">
                The text to change.
            </param>
        </member>
        <member name="M:SilDev.TextEx.FormatNewLine(System.String,System.String)">
            <summary>
                Converts the current line separator format of the specified format.
            </summary>
            <param name="text">
                The text to change.
            </param>
            <param name="newLineFormat">
                The new format to be applied.
                <para>
                    For constant templates, see <see cref="T:SilDev.TextSeparatorString"/>.
                </para>
            </param>
        </member>
        <member name="M:SilDev.TextEx.FormatWhiteSpace(System.String,System.String)">
            <summary>
                Converts the current line separator format of the specified format.
            </summary>
            <param name="text">
                The text to change.
            </param>
            <param name="newWhiteSpace">
                The new format to be applied.
                <para>
                    For constant templates, see <see cref="T:SilDev.TextSeparatorString"/>.
                </para>
            </param>
        </member>
        <member name="T:SilDev.TextSeparatorChar">
            <summary>
                Provides constant <see cref="T:System.Char"/> values of separator characters.
            </summary>
        </member>
        <member name="F:SilDev.TextSeparatorChar.BoundaryNeutral">
            <summary>
                Boundary Neutral [BN].
            </summary>
        </member>
        <member name="F:SilDev.TextSeparatorChar.CarriageReturn">
            <summary>
                Carriage Return [CR].
            </summary>
        </member>
        <member name="F:SilDev.TextSeparatorChar.CommonNumberSeparator">
            <summary>
                Common Number Separator [CS].
            </summary>
        </member>
        <member name="F:SilDev.TextSeparatorChar.FormFeed">
            <summary>
                Form Feed [FF].
            </summary>
        </member>
        <member name="F:SilDev.TextSeparatorChar.HorizontalTab">
            <summary>
                Horizontal Tab [TAB].
            </summary>
        </member>
        <member name="F:SilDev.TextSeparatorChar.LineFeed">
            <summary>
                Line Feed [LF].
            </summary>
        </member>
        <member name="F:SilDev.TextSeparatorChar.LineSeparator">
            <summary>
                Line Separator.
            </summary>
        </member>
        <member name="F:SilDev.TextSeparatorChar.NextLine">
            <summary>
                Next Line [NEL].
            </summary>
        </member>
        <member name="F:SilDev.TextSeparatorChar.ParagraphSeparator">
            <summary>
                Paragraph Separator [B].
            </summary>
        </member>
        <member name="F:SilDev.TextSeparatorChar.Space">
            <summary>
                Space.
            </summary>
        </member>
        <member name="F:SilDev.TextSeparatorChar.VerticalTab">
            <summary>
                Vertical Tab [VT].
            </summary>
        </member>
        <member name="F:SilDev.TextSeparatorChar.AllNewLineChars">
            <summary>
                Returns a sequence of all line separator characters.
            </summary>
        </member>
        <member name="F:SilDev.TextSeparatorChar.AllWhiteSpaceChars">
            <summary>
                Returns a sequence of all whitespace characters.
            </summary>
        </member>
        <member name="T:SilDev.TextSeparatorString">
            <summary>
                Provides constant <see cref="T:System.String"/> values of separator characters.
            </summary>
        </member>
        <member name="F:SilDev.TextSeparatorString.BoundaryNeutral">
            <summary>
                Boundary Neutral [BN].
            </summary>
        </member>
        <member name="F:SilDev.TextSeparatorString.CarriageReturn">
            <summary>
                Carriage Return [CR].
            </summary>
        </member>
        <member name="F:SilDev.TextSeparatorString.CommonNumberSeparator">
            <summary>
                Common Number Separator [CS].
            </summary>
        </member>
        <member name="F:SilDev.TextSeparatorString.FormFeed">
            <summary>
                Form Feed [FF].
            </summary>
        </member>
        <member name="F:SilDev.TextSeparatorString.HorizontalTab">
            <summary>
                Horizontal Tab [TAB].
            </summary>
        </member>
        <member name="F:SilDev.TextSeparatorString.LineFeed">
            <summary>
                Line Feed [LF].
            </summary>
        </member>
        <member name="F:SilDev.TextSeparatorString.LineSeparator">
            <summary>
                Line Separator.
            </summary>
        </member>
        <member name="F:SilDev.TextSeparatorString.NextLine">
            <summary>
                Next Line [NEL].
            </summary>
        </member>
        <member name="F:SilDev.TextSeparatorString.ParagraphSeparator">
            <summary>
                Paragraph Separator [B].
            </summary>
        </member>
        <member name="F:SilDev.TextSeparatorString.Space">
            <summary>
                Space.
            </summary>
        </member>
        <member name="F:SilDev.TextSeparatorString.VerticalTab">
            <summary>
                Vertical Tab [VT].
            </summary>
        </member>
        <member name="F:SilDev.TextSeparatorString.WindowsDefault">
            <summary>
                Carriage Return [CR] &amp; Line Feed [LF].
            </summary>
        </member>
        <member name="F:SilDev.TextSeparatorString.AllNewLineStrings">
            <summary>
                Returns a sequence of all line separator strings.
            </summary>
        </member>
        <member name="F:SilDev.TextSeparatorString.AllWhiteSpaceStrings">
            <summary>
                Returns a sequence of all whitespace strings.
            </summary>
        </member>
        <member name="T:SilDev.Tray">
            <summary>
                Provides the functionality to manage the items of the system tray area.
            </summary>
        </member>
        <member name="M:SilDev.Tray.Refresh">
            <summary>
                Refreshes the symbols on system tray.
            </summary>
        </member>
        <member name="M:SilDev.Tray.RefreshAsync(System.Int32,System.Int32)">
            <summary>
                Refreshes the symbols on system tray asynchronous.
            </summary>
            <param name="num">
                Number of refreshes.
            </param>
            <param name="wait">
                Delay between refreshes in milliseconds.
            </param>
        </member>
        <member name="T:SilDev.WinApi">
            <summary>
                An overkill class that provides a lot of Windows API (Application
                Programming Interface) functions.
            </summary>
            ReSharper disable CommentTypo
        </member>
        <member name="T:SilDev.WinApi.EnumChildProc">
            <summary>
                An application-defined callback function. It receives the child window
                handles. The WNDENUMPROC type defines a pointer to this callback function.
                EnumChildProc is a placeholder for the application-defined function name.
            </summary>
            <param name="hWnd">
                A handle to a child window of the parent window.
            </param>
            <param name="lParam">
                The application-defined value.
            </param>
            <returns>
                To continue enumeration, the callback function must return
                <see langword="true"/>; to stop enumeration, it must return
                <see langword="false"/>.
            </returns>
        </member>
        <member name="T:SilDev.WinApi.EnumThreadWndProc">
            <summary>
                An application-defined callback function used with the EnumThreadWindows
                function. It receives the window handles associated with a thread. The
                WNDENUMPROC type defines a pointer to this callback function.
                EnumThreadWndProc is a placeholder for the application-defined function
                name.
            </summary>
            <param name="hWnd">
                A handle to a window associated with the thread specified in the
                <see cref="M:SilDev.WinApi.NativeHelper.EnumThreadWindows(System.UInt32,SilDev.WinApi.EnumThreadWndProc,System.IntPtr)"/>
                function.
            </param>
            <param name="lParam">
                The application-defined value given in the
                <see cref="M:SilDev.WinApi.NativeHelper.EnumThreadWindows(System.UInt32,SilDev.WinApi.EnumThreadWndProc,System.IntPtr)"/>
                function.
            </param>
            <returns>
                To continue enumeration, the callback function must return
                <see langword="true"/>; to stop enumeration, it must return
                <see langword="false"/>.
            </returns>
        </member>
        <member name="T:SilDev.WinApi.HookProc">
            <summary>
                Represents a pointer to the hook procedure.
            </summary>
            <param name="nCode">
                The hook code passed to the current hook procedure. The next hook procedure
                uses this code to determine how to process the hook information.
            </param>
            <param name="wParam">
                The wParam value passed to the current hook procedure. The meaning of this
                parameter depends on the type of hook associated with the current hook
                chain.
            </param>
            <param name="lParam">
                The lParam value passed to the current hook procedure. The meaning of this
                parameter depends on the type of hook associated with the current hook
                chain.
            </param>
            <returns>
                If the function succeeds, the return value is the handle to the hook
                procedure. If the function fails, the return value is
                <see langword="null"/>.
            </returns>
        </member>
        <member name="T:SilDev.WinApi.TimerProc">
            <summary>
                Defines a pointer to this callback function.
            </summary>
            <param name="hWnd">
                A handle to the window associated with the timer.
            </param>
            <param name="uMsg">
                The WM_TIMER (0x113) message.
            </param>
            <param name="nIdEvent">
                The timer's identifier.
            </param>
            <param name="dwTime">
                The number of milliseconds that have elapsed since the system was started.
            </param>
        </member>
        <member name="T:SilDev.WinApi.AccessRights">
            <summary>
                Provides enumerated values of process security and access rights.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AccessRights.ProcessTerminate">
            <summary>
                Required to terminate a process using
                <see cref="M:SilDev.WinApi.NativeHelper.TerminateProcess(System.IntPtr,System.UInt32)"/>.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AccessRights.ProcessCreateThread">
            <summary>
                Required to create a thread.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AccessRights.ProcessVmOperation">
            <summary>
                Required to perform an operation on the address space of a process.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AccessRights.ProcessVmRead">
            <summary>
                Required to read memory in a process using
                <see cref="M:SilDev.WinApi.NativeHelper.ReadProcessMemory(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr@)"/>
                .
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AccessRights.ProcessVmWrite">
            <summary>
                Required to write to memory in a process using
                <see cref="M:SilDev.WinApi.NativeHelper.WriteProcessMemory(System.IntPtr,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr@)"/>
                .
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AccessRights.ProcessDupHandle">
            <summary>
                Required to duplicate a handle using
                <see cref="M:SilDev.WinApi.NativeHelper.DuplicateHandle(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr@,System.UInt32,System.Boolean,System.UInt32)"/>
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AccessRights.ProcessCreateProcess">
            <summary>
                Required to create a process.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AccessRights.ProcessSetQuota">
            <summary>
                Required to set memory limits using
                <see cref="M:SilDev.WinApi.NativeHelper.SetProcessWorkingSetSize(System.IntPtr,System.UIntPtr,System.UIntPtr)"/>
                .
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AccessRights.ProcessSetInformation">
            <summary>
                Required to set certain information about a process, such as its priority
                class.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AccessRights.ProcessQueryInformation">
            <summary>
                Required to retrieve certain information about a process, such as its
                token, exit code, and priority class.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AccessRights.ProcessSuspendResume">
            <summary>
                Required to suspend or resume a process.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AccessRights.ProcessQueryLimitedInformation">
            <summary>
                Required to retrieve certain information about a process.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AccessRights.Delete">
            <summary>
                Required to delete the object.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AccessRights.ReadControl">
            <summary>
                Required to read information in the security descriptor for the object, not
                including the information in the SACL.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AccessRights.WriteDac">
            <summary>
                Required to modify the DACL in the security descriptor for the object.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AccessRights.WriteOwner">
            <summary>
                Required to change the owner in the security descriptor for the object.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AccessRights.Synchronize">
            <summary>
                The right to use the object for synchronization. This enables a thread to
                wait until the object is in the signaled state.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.AnimateWindowFlags">
            <summary>
                Provides enumerated values of window animations.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AnimateWindowFlags.HorPositive">
            <summary>
                Animates the window from left to right. This flag can be used with roll or
                slide animation. It is ignored when used with <see cref="F:SilDev.WinApi.AnimateWindowFlags.Center"/> or
                <see cref="F:SilDev.WinApi.AnimateWindowFlags.Blend"/>.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AnimateWindowFlags.HorNegative">
            <summary>
                Animates the window from right to left. This flag can be used with roll or
                slide animation. It is ignored when used with <see cref="F:SilDev.WinApi.AnimateWindowFlags.Center"/> or
                <see cref="F:SilDev.WinApi.AnimateWindowFlags.Blend"/>.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AnimateWindowFlags.VerPositive">
            <summary>
                Animates the window from top to bottom. This flag can be used with roll or
                slide animation. It is ignored when used with <see cref="F:SilDev.WinApi.AnimateWindowFlags.Center"/> or
                <see cref="F:SilDev.WinApi.AnimateWindowFlags.Blend"/>.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AnimateWindowFlags.VerNegative">
            <summary>
                Animates the window from bottom to top. This flag can be used with roll or
                slide animation. It is ignored when used with <see cref="F:SilDev.WinApi.AnimateWindowFlags.Center"/> or
                <see cref="F:SilDev.WinApi.AnimateWindowFlags.Blend"/>.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AnimateWindowFlags.Center">
            <summary>
                Makes the window appear to collapse inward if <see cref="F:SilDev.WinApi.AnimateWindowFlags.Hide"/> is used or
                expand outward if the <see cref="F:SilDev.WinApi.AnimateWindowFlags.Hide"/> is not used. The various direction
                flags have no effect.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AnimateWindowFlags.Hide">
            <summary>
                Hides the window. By default, the window is shown.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AnimateWindowFlags.Activate">
            <summary>
                Activates the window. Do not use this value with <see cref="F:SilDev.WinApi.AnimateWindowFlags.Hide"/>.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AnimateWindowFlags.Slide">
            <summary>
                Uses slide animation. By default, roll animation is used. This flag is
                ignored when used with <see cref="F:SilDev.WinApi.AnimateWindowFlags.Center"/>.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AnimateWindowFlags.Blend">
            <summary>
                Uses a fade effect. This flag can be used only if hwnd is a top-level
                window.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.AppBarMessageOption">
            <summary>
                Provides enumerated values of appbar messages.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AppBarMessageOption.New">
            <summary>
                Registers a new appbar and specifies the message identifier that the system
                should use to send notification messages to the appbar.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AppBarMessageOption.Remove">
            <summary>
                Unregisters an appbar, removing the bar from the system's internal list.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AppBarMessageOption.QueryPos">
            <summary>
                Requests a size and screen position for an appbar.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AppBarMessageOption.SetPos">
            <summary>
                Sets the size and screen position of an appbar.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AppBarMessageOption.GetState">
            <summary>
                Retrieves the autohide and always-on-top states of the Windows taskbar.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AppBarMessageOption.GetTaskBarPos">
            <summary>
                Retrieves the bounding rectangle of the Windows taskbar. Note that this
                applies only to the system taskbar. Other objects, particularly toolbars
                supplied with third-party software, also can be present. As a result, some
                of the screen area not covered by the Windows taskbar might not be visible
                to the user. To retrieve the area of the screen not covered by both the
                taskbar and other app bars-the working area available to your application-,
                use the GetMonitorInfo function.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AppBarMessageOption.Activate">
            <summary>
                Notifies the system to activate or deactivate an appbar. The lParam member
                of the <see cref="T:SilDev.WinApi.AppBarData"/> pointed to by pData is set to
                <see langword="true"/> to activate or <see langword="false"/> to
                deactivate.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AppBarMessageOption.GetAutoHideBar">
            <summary>
                Retrieves the handle to the autohide appbar associated with a particular
                edge of the screen.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AppBarMessageOption.SetAutoHideBar">
            <summary>
                Registers or unregisters an autohide appbar for an edge of the screen.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AppBarMessageOption.WindowPosChanged">
            <summary>
                Notifies the system when an appbar's position has changed.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AppBarMessageOption.SetState">
            <summary>
                Sets the state of the appbar's autohide and always-on-top attributes.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AppBarMessageOption.GetAutoHideBarEx">
            <summary>
                Retrieves the handle to the autohide appbar associated with a particular
                edge of a particular monitor.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AppBarMessageOption.SetAutoHideBarEx">
            <summary>
                Registers or unregisters an autohide appbar for an edge of a particular
                monitor.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.DwmBooleanOption">
            <summary>
                Provides enumerated boolean options.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.DwmBooleanOption.DwmwCpFalse">
            <summary>
                Send <see langword="false"/>.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.DwmBooleanOption.DwmwCpTrue">
            <summary>
                Send <see langword="true"/>.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.DwmWindowAttribute">
            <summary>
                Provides enumerated attributes of DwmSetWindowAttribute.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.DwmWindowAttribute.DwmwaUseImmersiveDarkModeBefore20H1">
            <summary>
                Specifies to use the dark mode for a window (before update 20H1).
            </summary>
        </member>
        <member name="F:SilDev.WinApi.DwmWindowAttribute.DwmwaUseImmersiveDarkMode">
            <summary>
                Specifies to use the dark mode for a window.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.DwmWindowAttribute.DwmwaWindowCornerPreference">
            <summary>
                Specifies the rounded corner preference for a window.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.DwmWindowAttribute.DwmwaMicaEffect">
            <summary>
                Specifies to use the Mica material  for a window.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.DwmWindowCornerPreference">
            <summary>
                Provides enumerated preferences of DwmSetWindowAttribute.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.DwmWindowCornerPreference.DwmwCpDefault">
            <summary>
                Let the system decide whether or not to round window corners.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.DwmWindowCornerPreference.DwmwCpDoNotRound">
            <summary>
                Never round window corners.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.DwmWindowCornerPreference.DwmwCpRound">
            <summary>
                Round the corners if appropriate.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.DwmWindowCornerPreference.DwmwCpRoundSmall">
            <summary>
                Round the corners if appropriate, with a small radius.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.DuplicateOption">
            <summary>
                Provides enumerated options of handle duplication.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.DuplicateOption.CloseSource">
            <summary>
                Closes the source handle. This occurs regardless of any error status
                returned.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.DuplicateOption.SameAccess">
            <summary>
                Ignores the dwDesiredAccess parameter. The duplicate handle has the same
                access as the source handle.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.LocalAllocFlags">
            <summary>
                Provides enumerated attributes of memory allocation.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.LocalAllocFlags.LMemFixed">
            <summary>
                Allocates fixed memory. The return value is a pointer to the memory object.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.LocalAllocFlags.NonZeroLPtr">
            <summary>
                Same as <see cref="F:SilDev.WinApi.LocalAllocFlags.LMemFixed"/>.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.LocalAllocFlags.LMemMoveable">
            <summary>
                Allocates movable memory. Memory blocks are never moved in physical memory,
                but they can be moved within the default heap.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.LocalAllocFlags.NonZeroLHND">
            <summary>
                Same as <see cref="F:SilDev.WinApi.LocalAllocFlags.LMemMoveable"/>.
            </summary>
            ReSharper disable once InconsistentNaming
        </member>
        <member name="F:SilDev.WinApi.LocalAllocFlags.LMemZeroInit">
            <summary>
                Initializes memory contents to zero.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.LocalAllocFlags.LPtr">
            <summary>
                Combines <see cref="F:SilDev.WinApi.LocalAllocFlags.LMemFixed"/> and <see cref="F:SilDev.WinApi.LocalAllocFlags.LMemZeroInit"/>.
            </summary>
            ReSharper disable once InconsistentNaming
        </member>
        <member name="F:SilDev.WinApi.LocalAllocFlags.LHND">
            <summary>
                Combines <see cref="F:SilDev.WinApi.LocalAllocFlags.LMemMoveable"/> and <see cref="F:SilDev.WinApi.LocalAllocFlags.LMemZeroInit"/>.
            </summary>
            ReSharper disable once InconsistentNaming
        </member>
        <member name="T:SilDev.WinApi.MemAllocTypes">
            <summary>
                Provides enumerated values of memory allocation types.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.MemAllocTypes.Commit">
            <summary>
                Allocates memory charges (from the overall size of memory and the paging
                files on disk) for the specified reserved memory pages. The function also
                guarantees that when the caller later initially accesses the memory, the
                contents will be zero. Actual physical pages are not allocated unless/until
                the virtual addresses are actually accessed.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.MemAllocTypes.Reserve">
            <summary>
                Reserves a range of the process's virtual address space without allocating
                any actual physical storage in memory or in the paging file on disk.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.MemAllocTypes.Decommit">
            <summary>
                Decommits the specified region of committed pages. After the operation, the
                pages are in the reserved state.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.MemAllocTypes.Release">
            <summary>
                Releases the specified region of pages. After the operation, the pages are
                in the free state.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.MemAllocTypes.Reset">
            <summary>
                Indicates that data in the memory range specified by lpAddress and dwSize
                is no longer of interest. The pages should not be read from or written to
                the paging file. However, the memory block will be used again later, so it
                should not be decommitted. This value cannot be used with any other value.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.MemAllocTypes.Physical">
            <summary>
                Reserves an address range that can be used to map Address Windowing
                Extensions (AWE) pages.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.MemAllocTypes.TopDown">
            <summary>
                Allocates memory at the highest possible address. This can be slower than
                regular allocations, especially when there are many allocations.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.MemAllocTypes.WriteWatch">
            <summary>
                Causes the system to track pages that are written to in the allocated
                region. If you specify this value, you must also specify
                <see cref="F:SilDev.WinApi.MemAllocTypes.Reserve"/>.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.MemAllocTypes.LargePages">
            <summary>
                Allocates memory using large page support.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.MemFreeType">
            <summary>
                Provides enumerated free type values of memory allocation.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.MemFreeType.Decommit">
            <summary>
                Decommits the specified region of committed pages. After the operation, the
                pages are in the reserved state.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.MemFreeType.Release">
            <summary>
                Releases the specified region of pages. After the operation, the pages are
                in the free state.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.MemProtectFlags">
            <summary>
                Provides enumerated constants of memory protection.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.MemProtectFlags.PageNoAccess">
            <summary>
                Disables all access to the committed region of pages. An attempt to read
                from, write to, or execute the committed region results in an access
                violation.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.MemProtectFlags.PageReadOnly">
            <summary>
                Enables read-only access to the committed region of pages. An attempt to
                write to the committed region results in an access violation. If Data
                Execution Prevention is enabled, an attempt to execute code in the
                committed region results in an access violation.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.MemProtectFlags.PageReadWrite">
            <summary>
                Enables read-only or read/write access to the committed region of pages. If
                Data Execution Prevention is enabled, attempting to execute code in the
                committed region results in an access violation.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.MemProtectFlags.PageWriteCopy">
            <summary>
                Enables read-only or copy-on-write access to a mapped view of a file
                mapping object. An attempt to write to a committed copy-on-write page
                results in a private copy of the page being made for the process. The
                private page is marked as <see cref="F:SilDev.WinApi.MemProtectFlags.PageReadWrite"/>, and the change is
                written to the new page. If Data Execution Prevention is enabled,
                attempting to execute code in the committed region results in an access
                violation.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.MemProtectFlags.PageExecute">
            <summary>
                Enables execute access to the committed region of pages. An attempt to
                write to the committed region results in an access violation.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.MemProtectFlags.PageExecuteRead">
            <summary>
                Enables execute or read-only access to the committed region of pages. An
                attempt to write to the committed region results in an access violation.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.MemProtectFlags.PageExecuteReadWrite">
            <summary>
                Enables execute, read-only, or read/write access to the committed region of
                pages.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.MemProtectFlags.PageExecuteWriteCopy">
            <summary>
                Enables execute, read-only, or copy-on-write access to a mapped view of a
                file mapping object. An attempt to write to a committed copy-on-write page
                results in a private copy of the page being made for the process. The
                private page is marked as <see cref="F:SilDev.WinApi.MemProtectFlags.PageExecuteReadWrite"/>, and the
                change is written to the new page.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.MemProtectFlags.PageGuard">
            <summary>
                Pages in the region become guard pages. Any attempt to access a guard page
                causes the system to raise a STATUS_GUARD_PAGE_VIOLATION (0x80000001)
                exception and turn off the guard page status. Guard pages thus act as a
                one-time access alarm.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.MemProtectFlags.PageNoCache">
            <summary>
                Sets all pages to be non-cachable. Applications should not use this
                attribute except when explicitly required for a device. Using the
                interlocked functions with memory that is mapped with
                <see cref="F:SilDev.WinApi.MemProtectFlags.PageNoCache"/> can result in an <see cref="T:System.Runtime.InteropServices.ExternalException"/>.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.MemProtectFlags.PageWriteCombine">
            <summary>
                Sets all pages to be write-combined.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.MemProtectFlags.PageTargetsInvalid">
            <summary>
                Sets all locations in the pages as invalid targets for CFG. Used along with
                any execute page protection like <see cref="F:SilDev.WinApi.MemProtectFlags.PageExecute"/>,
                <see cref="F:SilDev.WinApi.MemProtectFlags.PageExecuteRead"/>, <see cref="F:SilDev.WinApi.MemProtectFlags.PageExecuteReadWrite"/> and
                <see cref="F:SilDev.WinApi.MemProtectFlags.PageExecuteWriteCopy"/>. Any indirect call to locations in those
                pages will fail CFG checks and the process will be terminated. The default
                behavior for executable pages allocated is to be marked valid call targets
                for CFG.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.MemProtectFlags.PageTargetsNoUpdate">
            <summary>
                Pages in the region will not have their CFG information updated while the
                protection changes for VirtualProtect. For example, if the pages in the
                region was allocated using <see cref="F:SilDev.WinApi.MemProtectFlags.PageTargetsInvalid"/>, then the
                invalid information will be maintained while the page protection changes.
                This flag is only valid when the protection changes to an executable type
                like <see cref="F:SilDev.WinApi.MemProtectFlags.PageExecute"/>, <see cref="F:SilDev.WinApi.MemProtectFlags.PageExecuteRead"/>,
                <see cref="F:SilDev.WinApi.MemProtectFlags.PageExecuteReadWrite"/> and <see cref="F:SilDev.WinApi.MemProtectFlags.PageExecuteWriteCopy"/>.
                The default behavior for VirtualProtect protection change to executable is
                to mark all locations as valid call targets for CFG.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.MimeFlags">
            <summary>
                Provides enumerated options for MIME functions.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.MimeFlags.Default">
            <summary>
                No flags specified. Use default behavior for the function.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.MimeFlags.UrlAsFileName">
            <summary>
                Treat the specified pwzUrl as a file name.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.MimeFlags.EnableMimeSniffing">
            <summary>
                Internet Explorer 6 for Windows XP SP2 and later. Use MIME-type detection
                even if FEATURE_MIME_SNIFFING is detected. Usually, this feature control
                key would disable MIME-type detection.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.MimeFlags.IgnoreMimeTextPlain">
            <summary>
                Internet Explorer 6 for Windows XP SP2 and later. Perform MIME-type
                detection if "text/plain" is proposed, even if data sniffing is otherwise
                disabled. Plain text may be converted to text/html if HTML tags are
                detected.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.MimeFlags.ServerMime">
            <summary>
                Internet Explorer 8. Use the authoritative MIME type specified in
                pwzMimeProposed. Unless <see cref="F:SilDev.WinApi.MimeFlags.IgnoreMimeTextPlain"/> is specified, no
                data sniffing is performed.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.MimeFlags.RespectTextPlain">
            <summary>
                Internet Explorer 9. Do not perform detection if "text/plain" is specified
                in pwzMimeProposed.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.MimeFlags.ReturnUpdatedImgMimes">
            <summary>
                Internet Explorer 9. Returns image/png and image/jpeg instead of
                image/x-png and image/pjpeg.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.ModifyMenuFlags">
            <summary>
                Provides enumerated values of menu items.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ModifyMenuFlags.ByCommand">
            <summary>
                Indicates that the uPosition parameter gives the identifier of the menu
                item. The <see cref="F:SilDev.WinApi.ModifyMenuFlags.ByCommand"/> flag is the default if neither the
                <see cref="F:SilDev.WinApi.ModifyMenuFlags.ByCommand"/> nor <see cref="F:SilDev.WinApi.ModifyMenuFlags.ByPosition"/> flag is specified.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ModifyMenuFlags.Enabled">
            <summary>
                Enables the menu item so that it can be selected and restores it from its
                grayed state.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ModifyMenuFlags.TextString">
            <summary>
                Specifies that the menu item is a text string; the lpNewItem parameter is a
                pointer to the string.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ModifyMenuFlags.Unchecked">
            <summary>
                Does not place a check mark next to the item (the default). If your
                application supplies check-mark bitmaps (see the SetMenuItemBitmaps
                function), this flag displays a clear bitmap next to the menu item.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ModifyMenuFlags.Grayed">
            <summary>
                Disables the menu item and grays it so that it cannot be selected.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ModifyMenuFlags.Disabled">
            <summary>
                Disables the menu item so that it cannot be selected, but this flag does
                not gray it.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ModifyMenuFlags.Bitmap">
            <summary>
                Uses a bitmap as the menu item. The lpNewItem parameter contains a handle
                to the bitmap.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ModifyMenuFlags.Checked">
            <summary>
                Places a check mark next to the item. If your application provides
                check-mark bitmaps (see the SetMenuItemBitmaps function), this flag
                displays a selected bitmap next to the menu item.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ModifyMenuFlags.Popup">
            <summary>
                Specifies that the menu item opens a drop-down menu or submenu. The
                uIDNewItem parameter specifies a handle to the drop-down menu or submenu.
                This flag is used to add a menu name to a menu bar or a menu item that
                opens a submenu to a drop-down menu, submenu, or shortcut menu.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ModifyMenuFlags.MenuBarBreak">
            <summary>
                Functions the same as the <see cref="F:SilDev.WinApi.ModifyMenuFlags.MenuBreak"/> flag for a menu bar. For
                a drop-down menu, submenu, or shortcut menu, the new column is separated
                from the old column by a vertical line.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ModifyMenuFlags.MenuBreak">
            <summary>
                Places the item on a new line (for menu bars) or in a new column (for a
                drop-down menu, submenu, or shortcut menu) without separating columns.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ModifyMenuFlags.OwnerDraw">
            <summary>
                Specifies that the item is an owner-drawn item. Before the menu is
                displayed for the first time, the window that owns the menu receives a
                WM_MEASUREITEM message to retrieve the width and height of the menu item.
                The WM_DRAWITEM message is then sent to the window procedure of the owner
                window whenever the appearance of the menu item must be updated.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ModifyMenuFlags.ByPosition">
            <summary>
                Indicates that the uPosition parameter gives the zero-based relative
                position of the menu item.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ModifyMenuFlags.Separator">
            <summary>
                Draws a horizontal dividing line. This flag is used only in a drop-down
                menu, submenu, or shortcut menu. The line cannot be grayed, disabled, or
                highlighted. The lpNewItem and uIDNewItem parameters are ignored.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ModifyMenuFlags.Remove">
            <summary>
                Remove uPosition parameters.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.ProcessInfoFlags">
            <summary>
                Provides enumerated values of the process information class.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ProcessInfoFlags.ProcessBasicInformation">
            <summary>
                Retrieves a pointer to a PEB structure that can be used to determine
                whether the specified process is being debugged, and a unique value used by
                the system to identify the specified process.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ProcessInfoFlags.ProcessDebugPort">
            <summary>
                Retrieves a DWORD_PTR value that is the port number of the debugger for the
                process. A nonzero value indicates that the process is being run under the
                control of a ring 3 debugger.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ProcessInfoFlags.ProcessWow64Information">
            <summary>
                Determines whether the process is running in the WOW64 environment (WOW64
                is the x86 emulator that allows Win32-based applications to run on 64-bit
                Windows).
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ProcessInfoFlags.ProcessImageFileName">
            <summary>
                Retrieves a <see cref="T:System.String"/> value containing the name of the image
                file for the process.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ProcessInfoFlags.ProcessBreakOnTermination">
            <summary>
                Retrieves a <see cref="T:System.UInt64"/> value indicating whether the process is
                considered critical.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.RedrawWindowFlags">
            <summary>
                Provides enumerated values of the redraw window flags.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.RedrawWindowFlags.Invalidate">
            <summary>
                Invalidates lprcUpdate or hrgnUpdate (only one may be non-
                <see langword="null"/>). If both are <see langword="null"/>, the entire
                window is invalidated.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.RedrawWindowFlags.InternalPaint">
            <summary>
                Causes a WM_PAINT message to be posted to the window regardless of whether
                any portion of the window is invalid.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.RedrawWindowFlags.Erase">
            <summary>
                Causes the window to receive a WM_ERASEBKGND message when the window is
                repainted. The <see cref="F:SilDev.WinApi.RedrawWindowFlags.Invalidate"/> flag must also be specified;
                otherwise, <see cref="F:SilDev.WinApi.RedrawWindowFlags.Erase"/> has no effect.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.RedrawWindowFlags.Validate">
            <summary>
                Validates lprcUpdate or hrgnUpdate (only one may be non-
                <see langword="null"/>). If both are <see langword="null"/>, the entire
                window is validated. This flag does not affect internal WM_PAINT messages.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.RedrawWindowFlags.NoInternalPaint">
            <summary>
                Suppresses any pending internal WM_PAINT messages. This flag does not
                affect WM_PAINT messages resulting from a non-<see langword="null"/> update
                area.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.RedrawWindowFlags.NoErase">
            <summary>
                Suppresses any pending WM_ERASEBKGND messages.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.RedrawWindowFlags.NoChildren">
            <summary>
                Excludes child windows, if any, from the repainting operation.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.RedrawWindowFlags.AllChildren">
            <summary>
                Includes child windows, if any, in the repainting operation.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.RedrawWindowFlags.UpdateNow">
            <summary>
                Causes the affected windows (as specified by the RDW_ALLCHILDREN and
                RDW_NOCHILDREN flags) to receive WM_NCPAINT, WM_ERASEBKGND, and WM_PAINT
                messages, if necessary, before the function returns.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.RedrawWindowFlags.EraseNow">
            <summary>
                Causes the affected windows (as specified by the RDW_ALLCHILDREN and
                RDW_NOCHILDREN flags) to receive WM_NCPAINT and WM_ERASEBKGND messages, if
                necessary, before the function returns. WM_PAINT messages are received at
                the ordinary time.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.RedrawWindowFlags.Frame">
            <summary>
                Causes any part of the nonclient area of the window that intersects the
                update region to receive a WM_NCPAINT message. The <see cref="F:SilDev.WinApi.RedrawWindowFlags.Invalidate"/>
                flag must also be specified; otherwise, <see cref="F:SilDev.WinApi.RedrawWindowFlags.Frame"/> has no effect.
                The WM_NCPAINT message is typically not sent during the execution of
                RedrawWindow unless either <see cref="F:SilDev.WinApi.RedrawWindowFlags.UpdateNow"/> or
                <see cref="F:SilDev.WinApi.RedrawWindowFlags.EraseNow"/> is specified.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.RedrawWindowFlags.NoFrame">
            <summary>
                Suppresses any pending WM_NCPAINT messages. This flag must be used with
                <see cref="F:SilDev.WinApi.RedrawWindowFlags.Validate"/> and is typically used with <see cref="F:SilDev.WinApi.RedrawWindowFlags.NoChildren"/>.
                <see cref="F:SilDev.WinApi.RedrawWindowFlags.NoFrame"/> should be used with care, as it could cause parts of
                a window to be painted improperly.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.ServiceError">
            <summary>
                Provides enumerated values of service errors.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceError.Ignore">
            <summary>
                The startup program ignores the error and continues the startup operation.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceError.Normal">
            <summary>
                The startup program logs the error in the event log but continues the
                startup operation.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceError.Severe">
            <summary>
                The startup program logs the error in the event log. If the last-known-good
                configuration is being started, the startup operation continues. Otherwise,
                the system is restarted with the last-known-good configuration.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceError.Critical">
            <summary>
                The startup program logs the error in the event log, if possible. If the
                last-known-good configuration is being started, the startup operation
                fails. Otherwise, the system is restarted with the last-known good
                configuration.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.SetWindowPosFlags">
            <summary>
                Provides enumerated attributes of memory allocation.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SetWindowPosFlags.NoSize">
            <summary>
                Retains the current size (ignores the cx and cy parameters).
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SetWindowPosFlags.NoMove">
            <summary>
                Retains the current position (ignores X and Y parameters).
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SetWindowPosFlags.NoZOrder">
            <summary>
                Retains the current Z order (ignores the hWndInsertAfter parameter).
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SetWindowPosFlags.NoRedraw">
            <summary>
                Does not redraw changes. If this flag is set, no repainting of any kind
                occurs. This applies to the client area, the nonclient area (including the
                title bar and scroll bars), and any part of the parent window uncovered as
                a result of the window being moved. When this flag is set, the application
                must explicitly invalidate or redraw any parts of the window and parent
                window that need redrawing.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SetWindowPosFlags.NoActive">
            <summary>
                Does not activate the window. If this flag is not set, the window is
                activated and moved to the top of either the topmost or non-topmost group
                (depending on the setting of the hWndInsertAfter parameter).
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SetWindowPosFlags.DrawFrame">
            <summary>
                Draws a frame (defined in the window's class description) around the
                window.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SetWindowPosFlags.FrameChanged">
            <summary>
                Applies new frame styles set using the SetWindowLong function. Sends a
                WM_NCCALCSIZE message to the window, even if the window's size is not being
                changed. If this flag is not specified, WM_NCCALCSIZE is sent only when the
                window's size is being changed.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SetWindowPosFlags.ShowWindow">
            <summary>
                Displays the window.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SetWindowPosFlags.HideWindow">
            <summary>
                Hides the window.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SetWindowPosFlags.NoCopyBits">
            <summary>
                Discards the entire contents of the client area. If this flag is not
                specified, the valid contents of the client area are saved and copied back
                into the client area after the window is sized or repositioned.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SetWindowPosFlags.NoOwnerZOrder">
            <summary>
                Does not change the owner window's position in the Z order.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SetWindowPosFlags.NoReposition">
            <summary>
                Same as the <see cref="F:SilDev.WinApi.SetWindowPosFlags.NoOwnerZOrder"/> flag.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SetWindowPosFlags.NoSendChanging">
            <summary>
                Prevents the window from receiving the WM_WINDOWPOSCHANGING (0x46) message.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SetWindowPosFlags.DeferErase">
            <summary>
                Prevents generation of the WM_SYNCPAINT message.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SetWindowPosFlags.AsyncWindowPos">
            <summary>
                If the calling thread and the thread that owns the window are attached to
                different input queues, the system posts the request to the thread that
                owns the window. This prevents the calling thread from blocking its
                execution while other threads process the request.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.ShowScrollBarOption">
            <summary>
                Provides enumerated values of scroll bar show statements.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ShowScrollBarOption.Horizontal">
            <summary>
                Shows or hides a window's standard horizontal scroll bars.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ShowScrollBarOption.Vertical">
            <summary>
                Shows or hides a window's standard vertical scroll bar.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ShowScrollBarOption.Control">
            <summary>
                Shows or hides a scroll bar control. The hwnd parameter must be the handle
                to the scroll bar control.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ShowScrollBarOption.Both">
            <summary>
                Shows or hides a window's standard horizontal and vertical scroll bars.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.ShowWindowFlags">
            <summary>
                Provides enumerated values of window's show statements.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ShowWindowFlags.Hide">
            <summary>
                Hides the window and activates another window.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ShowWindowFlags.ShowNormal">
            <summary>
                Activates and displays a window. If the window is minimized or maximized,
                the system restores it to its original size and position. An application
                should specify this flag when displaying the window for the first time.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ShowWindowFlags.ShowMinimized">
            <summary>
                Activates the window and displays it as a minimized window.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ShowWindowFlags.Maximize">
            <summary>
                Maximizes the specified window.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ShowWindowFlags.ShowMaximized">
            <summary>
                Activates the window and displays it as a maximized window.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ShowWindowFlags.ShowNoActivate">
            <summary>
                Displays a window in its most recent size and position. This value is
                similar to <see cref="F:SilDev.WinApi.ShowWindowFlags.ShowNormal"/>, except that the window is not
                activated.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ShowWindowFlags.Show">
            <summary>
                Activates the window and displays it in its current size and position.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ShowWindowFlags.Minimize">
            <summary>
                Minimizes the specified window and activates the next top-level window in
                the Z order.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ShowWindowFlags.ShowMinNoActive">
            <summary>
                Displays the window as a minimized window. This value is similar to
                <see cref="F:SilDev.WinApi.ShowWindowFlags.ShowMinimized"/>, except the window is not activated.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ShowWindowFlags.ShowNa">
            <summary>
                Displays the window in its current size and position. This value is similar
                to <see cref="F:SilDev.WinApi.ShowWindowFlags.Show"/>, except that the window is not activated.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ShowWindowFlags.Restore">
            <summary>
                Activates and displays the window. If the window is minimized or maximized,
                the system restores it to its original size and position. An application
                should specify this flag when restoring a minimized window.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ShowWindowFlags.ShowDefault">
            <summary>
                Sets the show state based on the SW_ value specified in the STARTUPINFO
                structure passed to the CreateProcess function by the program that started
                the application.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ShowWindowFlags.ForceMinimize">
            <summary>
                Minimizes a window, even if the thread that owns the window is not
                responding. This flag should only be used when minimizing windows from a
                different thread.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.StandardAccessRights">
            <summary>
                Provides enumerated values of standard access rights.
                <para>
                    Each type of securable object has a set of access rights that
                    correspond to operations specific to that type of object. In addition
                    to these object-specific access rights, there is a set of standard
                    access rights that correspond to operations common to most types of
                    securable objects.
                </para>
            </summary>
        </member>
        <member name="F:SilDev.WinApi.StandardAccessRights.Delete">
            <summary>
                The right to delete the object.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.StandardAccessRights.ReadControl">
            <summary>
                The right to read the information in the object's security descriptor, not
                including the information in the system access control list (SACL).
            </summary>
        </member>
        <member name="F:SilDev.WinApi.StandardAccessRights.WriteDac">
            <summary>
                The right to modify the discretionary access control list (DACL) in the
                object's security descriptor.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.StandardAccessRights.WriteOwner">
            <summary>
                The right to change the owner in the object's security descriptor.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.StandardAccessRights.Synchronize">
            <summary>
                The right to use the object for synchronization. This enables a thread to
                wait until the object is in the signaled state. Some object types do not
                support this access right.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.StandardAccessRights.All">
            <summary>
                Combines <see cref="F:SilDev.WinApi.StandardAccessRights.Delete"/>, <see cref="F:SilDev.WinApi.StandardAccessRights.ReadControl"/>,
                <see cref="F:SilDev.WinApi.StandardAccessRights.WriteDac"/>, and <see cref="F:SilDev.WinApi.StandardAccessRights.WriteOwner"/> access.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.StandardAccessRights.Required">
            <summary>
                Combines <see cref="F:SilDev.WinApi.StandardAccessRights.Delete"/>, <see cref="F:SilDev.WinApi.StandardAccessRights.ReadControl"/>,
                <see cref="F:SilDev.WinApi.StandardAccessRights.WriteDac"/>, and <see cref="F:SilDev.WinApi.StandardAccessRights.WriteOwner"/> access.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.SystemMetric">
            <summary>
                Provides enumerated system metric constants.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.CxScreen">
            <summary>
                Width of the screen.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.CyScreen">
            <summary>
                Height of the screen.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.CxVScroll">
            <summary>
                Width of a vertical scroll bar.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.CyHScroll">
            <summary>
                Height of a horizontal scroll bar.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.CyCaption">
            <summary>
                Height of a caption area.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.CxBorder">
            <summary>
                Width of a window border.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.CyBorder">
            <summary>
                Height of a window border.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.CxDlgFrame">
            <summary>
                Width of a dialog box frame.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.CyDlgFrame">
            <summary>
                Height of a dialog box frame.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.CyVThumb">
            <summary>
                Height of the thumb box in a vertical scroll bar.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.CxHThumb">
            <summary>
                Width of the thumb box in a horizontal scroll bar.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.CxIcon">
            <summary>
                Width of an icon.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.CyIcon">
            <summary>
                Height of an icon.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.CxCursor">
            <summary>
                Width of a cursor.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.CyCursor">
            <summary>
                Height of a cursor.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.CyMenu">
            <summary>
                Height of a single-line menu.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.CxFullScreen">
            <summary>
                Width of the client area for a full-screen window.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.CyFullScreen">
            <summary>
                Height of the client area for a full-screen window.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.CyKanjiWindow">
            <summary>
                Height of the Kanji window at the bottom of the screen.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.MousePresent">
            <summary>
                Nonzero if a mouse is installed; otherwise, 0.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.CyVScroll">
            <summary>
                Height of a vertical scroll bar.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.CxHScroll">
            <summary>
                Width of the arrow bitmap on a horizontal scroll bar.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.Debug">
            <summary>
                Nonzero if the debugging version of User.exe is installed; otherwise, 0.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.SwapButton">
            <summary>
                Nonzero if the meanings of the left and right mouse buttons are swapped;
                otherwise, 0.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.Reserved1">
            <summary>
                Reserved for future use.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.Reserved2">
            <summary>
                Reserved for future use.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.Reserved3">
            <summary>
                Reserved for future use.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.Reserved4">
            <summary>
                Reserved for future use.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.CxMin">
            <summary>
                Minimum width of a window.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.CyMin">
            <summary>
                Minimum height of a window.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.CxSize">
            <summary>
                Width of a window caption area.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.CySize">
            <summary>
                Height of a window caption area.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.CxFrame">
            <summary>
                Width of the frame around the perimeter of a window that has a caption but
                is not sizable.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.CyFrame">
            <summary>
                Height of the frame around the perimeter of a window that has a caption but
                is not sizable.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.CxMinTrack">
            <summary>
                Minimum tracking width of a window.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.CyMinTrack">
            <summary>
                Minimum tracking height of a window.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.CxDoubleClk">
            <summary>
                Width of the rectangle around the location of a first click in a
                double-click sequence.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.CyDoubleClk">
            <summary>
                Height of the rectangle around the location of a first click in a
                double-click sequence.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.CxIconSpacing">
            <summary>
                Width of a grid cell for items in large icon view.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.CyIconSpacing">
            <summary>
                Height of a grid cell for items in large icon view.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.MenuDropAlignment">
            <summary>
                Nonzero if drop-down menus are right-aligned with the corresponding
                menu-bar item; 0 if the menus are left-aligned.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.PenWindows">
            <summary>
                Nonzero if the Microsoft Windows for Pen computing extensions are
                installed; otherwise, 0.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.DbcsEnabled">
            <summary>
                Nonzero if User32.dll supports DBCS; otherwise, 0.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.CxMouseButtons">
            <summary>
                Number of buttons on the mouse or zero if no mouse is installed.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.Secure">
            <summary>
                Nonzero if the system is installed in a network environment; otherwise, 0.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.CxEdge">
            <summary>
                Width of a three-dimensional border.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.CyEdge">
            <summary>
                Height of a three-dimensional border.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.CxMinSpacing">
            <summary>
                Minimum spacing between windows.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.CyMinSpacing">
            <summary>
                Minimum vertical spacing between windows.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.CxSmIcon">
            <summary>
                Width of a small icon.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.CySmIcon">
            <summary>
                Height of a small icon.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.CySmCaption">
            <summary>
                Height of a small caption.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.CxSmSize">
            <summary>
                Width of small caption buttons.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.CySmSize">
            <summary>
                Height of small caption buttons.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.CxMenuSize">
            <summary>
                Width of menu bar buttons.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.CyMenuSize">
            <summary>
                Height of menu bar buttons.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.Arrange">
            <summary>
                How the system arranges minimized windows.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.CxMinimized">
            <summary>
                Minimum width of a minimized window.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.CyMinimized">
            <summary>
                Height of a minimized window.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.CxMaxTrack">
            <summary>
                Maximum width of a window that has a caption and sizing borders.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.CyMaxTrack">
            <summary>
                Maximum height of a window that has a caption and sizing borders.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.CxMaximized">
            <summary>
                Width of the client area for a maximized window.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.CyMaximized">
            <summary>
                Height of the client area for a maximized window.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.Network">
            <summary>
                Nonzero if the system is installed on a network; otherwise, 0.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.CleanBoot">
            <summary>
                Value that specifies how the system is started: 0-normal, 1-fail-safe,
                2-fail-safe with network.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.CxDrag">
            <summary>
                Width of a rectangle centered on a drag point to allow for limited movement
                of the mouse pointer before a drag operation begins.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.CyDrag">
            <summary>
                Height of a rectangle centered on a drag point to allow for limited
                movement of the mouse pointer before a drag operation begins.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.ShowSounds">
            <summary>
                Nonzero if the user requires an application to present information visually
                in situations where it would otherwise present the information only in
                audible form; otherwise, 0.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.CxMenuCheck">
            <summary>
                Width of the default menu check-mark bitmap.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.CyMenuCheck">
            <summary>
                Height of the default menu check-mark bitmap.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.SlowMachine">
            <summary>
                Nonzero if the computer has a low-end (slow) processor; otherwise, 0.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.MideastEnabled">
            <summary>
                Nonzero if the system is enabled for Hebrew and Arabic languages;
                otherwise, 0.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.MouseWheelPresent">
            <summary>
                Nonzero if a mouse with a wheel is installed; otherwise, 0.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.XVirtualScreen">
            <summary>
                The width of the virtual screen.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.YVirtualScreen">
            <summary>
                The height of the virtual screen.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.CxVirtualScreen">
            <summary>
                The width of each virtual screen.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.CyVirtualScreen">
            <summary>
                The height of each virtual screen.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.CMonitors">
            <summary>
                The number of display monitors on a desktop.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.SameDisplayFormat">
            <summary>
                Nonzero if all the display monitors have the same color format; otherwise,
                0.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.ImmEnabled">
            <summary>
                Nonzero if Input Method Manager/Input Method Editor features are enabled;
                otherwise, 0.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.CxFocusBorder">
            <summary>
                Width of the left and right edges of the focus rectangle that the
                DrawFocusRect draws.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.CyFocusBorder">
            <summary>
                Height of the top and bottom edges of the focus rectangle that the
                DrawFocusRect draws.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.TabletPc">
            <summary>
                Nonzero if the current operating system is the Windows XP Tablet PC
                edition, 0 otherwise.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.MediaCenter">
            <summary>
                Nonzero if the current operating system is the Windows XP Media Center
                Edition, 0 otherwise.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.Starter">
            <summary>
                Nonzero if the current operating system is the Windows XP Starter Edition,
                0 otherwise.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.ServerR2">
            <summary>
                Nonzero if the system is a Server Edition, 0 otherwise.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.MouseHorizontalWheelPresent">
            <summary>
                Nonzero if a mouse with a horizontal wheel is installed; otherwise, 0.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.CxAddedBorder">
            <summary>
                Width of the border added to minimized windows.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.Digitizer">
            <summary>
                Nonzero if the current operating system supports digitizers, 0 otherwise.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.MaximumTouches">
            <summary>
                Maximum number of contacts supported by the input digitizer device.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.RemoteSession">
            <summary>
                Nonzero if the current session is remote (via Terminal Services), 0
                otherwise.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.ShuttingDown">
            <summary>
                Nonzero if the system is being shut down; otherwise, 0.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.RemoteControl">
            <summary>
                Nonzero if the current session is remote-controlled; otherwise, 0.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.ConvertibleSlateMode">
            <summary>
                Nonzero if the current device is a tablet or convertible slate mode, 0
                otherwise.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SystemMetric.SystemDocked">
            <summary>
                Nonzero if the system is docked, 0 otherwise.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.Win32HookFlags">
            <summary>
                Provides enumerated hook constants.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.Win32HookFlags.HCbtMoveSize">
            <summary>
                A window is about to be moved or sized.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.Win32HookFlags.HCbtMinMax">
            <summary>
                A window is about to be minimized or maximized.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.Win32HookFlags.HCbtQs">
            <summary>
                The system has retrieved a WM_QUEUESYNC message from the system message
                queue.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.Win32HookFlags.HCbtCreateWnd">
            <summary>
                A window is about to be created. The system calls the hook procedure before
                sending the WM_CREATE or WM_NCCREATE message to the window. If the hook
                procedure returns a nonzero value, the system destroys the window; the
                CreateWindow function returns <see langword="null"/>, but the WM_DESTROY
                message is not sent to the window. If the hook procedure returns zero, the
                window is created normally. At the time of the <see cref="F:SilDev.WinApi.Win32HookFlags.HCbtCreateWnd"/>
                notification, the window has been created, but its final size and position
                may not have been determined and its parent window may not have been
                established. It is possible to send messages to the newly created window,
                although it has not yet received WM_NCCREATE or WM_CREATE messages. It is
                also possible to change the position in the z-order of the newly created
                window by modifying the hwndInsertAfter member of the CBT_CREATEWND
                structure.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.Win32HookFlags.HCbtDestroyWnd">
            <summary>
                A window is about to be destroyed.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.Win32HookFlags.HCbtActivate">
            <summary>
                The system is about to activate a window.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.Win32HookFlags.HCbtClickSkipped">
            <summary>
                The system has removed a mouse message from the system message queue. Upon
                receiving this hook code, a CBT application must install a
                <see cref="F:SilDev.WinApi.Win32HookFlags.WhJournalPlayback"/> hook procedure in response to the mouse
                message.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.Win32HookFlags.HCbtKeySkipped">
            <summary>
                The system has removed a keyboard message from the system message queue.
                Upon receiving this hook code, a CBT application must install a
                <see cref="F:SilDev.WinApi.Win32HookFlags.WhJournalPlayback"/> hook procedure in response to the keyboard
                message.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.Win32HookFlags.HCbtSysCommand">
            <summary>
                A system command is about to be carried out. This allows a CBT application
                to prevent task switching by means of hot keys.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.Win32HookFlags.HCbtSetFocus">
            <summary>
                A window is about to receive the keyboard focus.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.Win32HookFlags.MsgFDialogBox">
            <summary>
                The input event occurred in a message box or dialog box.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.Win32HookFlags.MsgFMenu">
            <summary>
                The input event occurred in a menu.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.Win32HookFlags.WhMsgFilter">
            <summary>
                The <see cref="F:SilDev.WinApi.Win32HookFlags.WhMsgFilter"/> and <see cref="F:SilDev.WinApi.Win32HookFlags.WhSysMsgFilter"/> hooks enable
                you to monitor messages about to be processed by a menu, scroll bar,
                message box, or dialog box, and to detect when a different window is about
                to be activated as a result of the user's pressing the ALT+TAB or ALT+ESC
                key combination. The <see cref="F:SilDev.WinApi.Win32HookFlags.WhMsgFilter"/> hook can only monitor
                messages passed to a menu, scroll bar, message box, or dialog box created
                by the application that installed the hook procedure. The
                <see cref="F:SilDev.WinApi.Win32HookFlags.WhSysMsgFilter"/> hook monitors such messages for all
                applications.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.Win32HookFlags.WhJournalRecord">
            <summary>
                The <see cref="F:SilDev.WinApi.Win32HookFlags.WhJournalRecord"/> hook enables you to monitor and record
                input events. Typically, you use this hook to record a sequence of mouse
                and keyboard events to play back later by using
                <see cref="F:SilDev.WinApi.Win32HookFlags.WhJournalPlayback"/>. The <see cref="F:SilDev.WinApi.Win32HookFlags.WhJournalRecord"/> hook is
                a global hook-it cannot be used as a thread-specific hook.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.Win32HookFlags.WhJournalPlayback">
            <summary>
                The <see cref="F:SilDev.WinApi.Win32HookFlags.WhJournalPlayback"/> hook enables an application to insert
                messages into the system message queue. You can use this hook to play back
                a series of mouse and keyboard events recorded earlier by using
                <see cref="F:SilDev.WinApi.Win32HookFlags.WhJournalRecord"/>. Regular mouse and keyboard input is disabled
                as long as a <see cref="F:SilDev.WinApi.Win32HookFlags.WhJournalPlayback"/> hook is installed. A
                <see cref="F:SilDev.WinApi.Win32HookFlags.WhJournalPlayback"/> hook is a global hook-it cannot be used as
                a thread-specific hook. The <see cref="F:SilDev.WinApi.Win32HookFlags.WhJournalPlayback"/> hook returns a
                time-out value. This value tells the system how many milliseconds to wait
                before processing the current message from the playback hook. This enables
                the hook to control the timing of the events it plays back.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.Win32HookFlags.WhKeyboard">
            <summary>
                The <see cref="F:SilDev.WinApi.Win32HookFlags.WhKeyboard"/> hook enables an application to monitor message
                traffic for WM_KEYDOWN and WM_KEYUP messages about to be returned by the
                GetMessage or PeekMessage function. You can use the
                <see cref="F:SilDev.WinApi.Win32HookFlags.WhKeyboard"/> hook to monitor keyboard input posted to a message
                queue.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.Win32HookFlags.WhCallWndProc">
            <summary>
                The <see cref="F:SilDev.WinApi.Win32HookFlags.WhCallWndProc"/> and <see cref="F:SilDev.WinApi.Win32HookFlags.WhCallWndProcRet"/> hooks
                enable you to monitor messages sent to window procedures. The system calls
                a <see cref="F:SilDev.WinApi.Win32HookFlags.WhCallWndProc"/> hook procedure before passing the message to
                the receiving window procedure, and calls the
                <see cref="F:SilDev.WinApi.Win32HookFlags.WhCallWndProcRet"/> hook procedure after the window procedure
                has processed the message. The <see cref="F:SilDev.WinApi.Win32HookFlags.WhCallWndProcRet"/> hook passes a
                pointer to a CWPRETSTRUCT structure to the hook procedure. The structure
                contains the return value from the window procedure that processed the
                message, as well as the message parameters associated with the message.
                Subclassing the window does not work for messages set between processes.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.Win32HookFlags.MsgFScrollbar">
            <summary>
                The input event occurred in a scroll bar.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.Win32HookFlags.WhGetMessage">
            <summary>
                The <see cref="F:SilDev.WinApi.Win32HookFlags.WhGetMessage"/> hook enables an application to monitor
                messages about to be returned by the GetMessage or PeekMessage function.
                You can use the <see cref="F:SilDev.WinApi.Win32HookFlags.WhGetMessage"/> hook to monitor mouse and
                keyboard input and other messages posted to the message queue.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.Win32HookFlags.WhCbt">
            <summary>
                The system calls a <see cref="F:SilDev.WinApi.Win32HookFlags.WhCbt"/> hook procedure before activating,
                creating, destroying, minimizing, maximizing, moving, or sizing a window;
                before completing a system command; before removing a mouse or keyboard
                event from the system message queue; before setting the input focus; or
                before synchronizing with the system message queue. The value the hook
                procedure returns determines whether the system allows or prevents one of
                these operations. The <see cref="F:SilDev.WinApi.Win32HookFlags.WhCbt"/> hook is intended primarily for
                computer-based training (CBT) applications.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.Win32HookFlags.WhSysMsgFilter">
            <summary>
                The <see cref="F:SilDev.WinApi.Win32HookFlags.WhMsgFilter"/> and <see cref="F:SilDev.WinApi.Win32HookFlags.WhSysMsgFilter"/> hooks enable
                you to monitor messages about to be processed by a menu, scroll bar,
                message box, or dialog box, and to detect when a different window is about
                to be activated as a result of the user's pressing the ALT+TAB or ALT+ESC
                key combination. The <see cref="F:SilDev.WinApi.Win32HookFlags.WhMsgFilter"/> hook can only monitor
                messages passed to a menu, scroll bar, message box, or dialog box created
                by the application that installed the hook procedure. The
                <see cref="F:SilDev.WinApi.Win32HookFlags.WhSysMsgFilter"/> hook monitors such messages for all
                applications. The <see cref="F:SilDev.WinApi.Win32HookFlags.WhMsgFilter"/> and
                <see cref="F:SilDev.WinApi.Win32HookFlags.WhSysMsgFilter"/> hooks enable you to perform message filtering
                during modal loops that is equivalent to the filtering done in the main
                message loop. For example, an application often examines a new message in
                the main loop between the time it retrieves the message from the queue and
                the time it dispatches the message, performing special processing as
                appropriate. However, during a modal loop, the system retrieves and
                dispatches messages without allowing an application the chance to filter
                the messages in its main message loop. If an application installs a
                <see cref="F:SilDev.WinApi.Win32HookFlags.WhMsgFilter"/> or <see cref="F:SilDev.WinApi.Win32HookFlags.WhSysMsgFilter"/> hook procedure,
                the system calls the procedure during the modal loop.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.Win32HookFlags.WhMouse">
            <summary>
                The <see cref="F:SilDev.WinApi.Win32HookFlags.WhMouse"/> hook enables you to monitor mouse messages about
                to be returned by the GetMessage or PeekMessage function. You can use the
                <see cref="F:SilDev.WinApi.Win32HookFlags.WhMouse"/> hook to monitor mouse input posted to a message
                queue.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.Win32HookFlags.WhHardware">
            <summary>
                The <see cref="F:SilDev.WinApi.Win32HookFlags.WhHardware"/> hook enables you to monitor various hardware
                events.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.Win32HookFlags.WhDebug">
            <summary>
                The system calls a <see cref="F:SilDev.WinApi.Win32HookFlags.WhDebug"/> hook procedure before calling hook
                procedures associated with any other hook in the system. You can use this
                hook to determine whether to allow the system to call hook procedures
                associated with other types of hooks.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.Win32HookFlags.WhShell">
            <summary>
                A shell application can use the <see cref="F:SilDev.WinApi.Win32HookFlags.WhShell"/> hook to receive
                important notifications. The system calls a <see cref="F:SilDev.WinApi.Win32HookFlags.WhShell"/> hook
                procedure when the shell application is about to be activated and when a
                top-level window is created or destroyed. Note that custom shell
                applications do not receive <see cref="F:SilDev.WinApi.Win32HookFlags.WhShell"/> messages. Therefore, any
                application that registers itself as the default shell must call the
                SystemParametersInfo function before it (or any other application) can
                receive WH_SHELL messages. This function must be called with
                SPI_SETMINIMIZEDMETRICS and a MINIMIZEDMETRICS structure. Set the iArrange
                member of this structure to ARW_HIDE.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.Win32HookFlags.WhForegroundIdle">
            <summary>
                The <see cref="F:SilDev.WinApi.Win32HookFlags.WhForegroundIdle"/> hook enables you to perform low priority
                tasks during times when its foreground thread is idle. The system calls a
                <see cref="F:SilDev.WinApi.Win32HookFlags.WhForegroundIdle"/> hook procedure when the application's
                foreground thread is about to become idle.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.Win32HookFlags.WhCallWndProcRet">
            <summary>
                The <see cref="F:SilDev.WinApi.Win32HookFlags.WhCallWndProc"/> and <see cref="F:SilDev.WinApi.Win32HookFlags.WhCallWndProcRet"/> hooks
                enable you to monitor messages sent to window procedures. The system calls
                a <see cref="F:SilDev.WinApi.Win32HookFlags.WhCallWndProc"/> hook procedure before passing the message to
                the receiving window procedure, and calls the
                <see cref="F:SilDev.WinApi.Win32HookFlags.WhCallWndProcRet"/> hook procedure after the window procedure
                has processed the message. The <see cref="F:SilDev.WinApi.Win32HookFlags.WhCallWndProcRet"/> hook passes a
                pointer to a CWPRETSTRUCT structure to the hook procedure. The structure
                contains the return value from the window procedure that processed the
                message, as well as the message parameters associated with the message.
                Subclassing the window does not work for messages set between processes.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.Win32HookFlags.WhKeyboardLl">
            <summary>
                The <see cref="F:SilDev.WinApi.Win32HookFlags.WhKeyboardLl"/> hook enables you to monitor keyboard input
                events about to be posted in a thread input queue.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.Win32HookFlags.WhMouseLl">
            <summary>
                The <see cref="F:SilDev.WinApi.Win32HookFlags.WhMouseLl"/> hook enables you to monitor mouse input events
                about to be posted in a thread input queue.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.WindowLongFlags">
            <summary>
                Provides enumerated attribute values of windows statements.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowLongFlags.GwlUserData">
            <summary>
                Sets the user data associated with the window. This data is intended for
                use by the application that created the window. Its value is initially
                zero.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowLongFlags.GwlStyle">
            <summary>
                Sets a new window style.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowLongFlags.GwlId">
            <summary>
                Sets a new identifier of the child window. The window cannot be a top-level
                window.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowLongFlags.GwlHandleInstance">
            <summary>
                Sets a new application instance handle.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowLongFlags.GwlWndProc">
            <summary>
                Sets a new address for the window procedure. You cannot change this
                attribute if the window does not belong to the same process as the calling
                thread.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowLongFlags.GwlExStyle">
            <summary>
                Sets a new extended window style.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowLongFlags.DwlMsgResult">
            <summary>
                Retrieves the return value of a message processed in the dialog box
                procedure.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowLongFlags.DwlDlgProc">
            <summary>
                Retrieves the address of the dialog box procedure, or a handle representing
                the address of the dialog box procedure. You must use the CallWindowProc
                function to call the dialog box procedure.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowLongFlags.DwlUser">
            <summary>
                Retrieves extra information private to the application, such as handles or
                pointers.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.WindowMenuFlags">
            <summary>
                Provides enumerated values of system command requests.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowMenuFlags.ScfIsSecure">
            <summary>
                Indicates whether the screen saver is secure.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowMenuFlags.WmSettingChange">
            <summary>
                A message that is sent to all top-level windows when the
                SystemParametersInfo  function changes a system-wide setting or when policy
                settings have changed.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowMenuFlags.WmCopyData">
            <summary>
                If the receiving application processes this message, it should return
                <see langword="true"/>; otherwise, it should return <see langword="false"/>
                . The data being passed must not contain pointers or other references to
                objects not accessible to the application receiving the data. While this
                message is being sent, the referenced data must not be changed by another
                thread of the sending process. The receiving application should consider
                the data read-only. The lParam parameter is valid only during the
                processing of the message. The receiving application should not free the
                memory referenced by lParam. If the receiving application must access the
                data after SendMessage returns, it must copy the data into a local buffer.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowMenuFlags.WmInitDialog">
            <summary>
                The dialog box procedure should return <see langword="true"/> to direct the
                system to set the keyboard focus to the control specified by wParam.
                Otherwise, it should return <see langword="false"/> to prevent the system
                from setting the default keyboard focus.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowMenuFlags.WmSysCommand">
            <summary>
                A window receives this message when the user chooses a command from the
                Window menu (formerly known as the system or control menu) or when the user
                chooses the maximize button, minimize button, restore button, or close
                button.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowMenuFlags.WmMouseMove">
            <summary>
                Posted to a window when the cursor moves. If the mouse is not captured, the
                message is posted to the window that contains the cursor. Otherwise, the
                message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowMenuFlags.ScSize">
            <summary>
                Sizes the window.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowMenuFlags.ScMove">
            <summary>
                Moves the window.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowMenuFlags.ScMinimize">
            <summary>
                Minimizes the window.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowMenuFlags.ScMaximize">
            <summary>
                Maximizes the window.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowMenuFlags.ScNextWindow">
            <summary>
                Moves to the next window.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowMenuFlags.ScPrevWindow">
            <summary>
                Moves to the previous window.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowMenuFlags.ScClose">
            <summary>
                Closes the window.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowMenuFlags.ScVScroll">
            <summary>
                Scrolls vertically.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowMenuFlags.ScHScroll">
            <summary>
                Scrolls horizontally.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowMenuFlags.ScMouseMenu">
            <summary>
                Retrieves the window menu as a result of a mouse click.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowMenuFlags.ScKeyMenu">
            <summary>
                Retrieves the window menu as a result of a keystroke.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowMenuFlags.ScRestore">
            <summary>
                Restores the window to its normal position and size.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowMenuFlags.ScTaskList">
            <summary>
                Activates the Start menu.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowMenuFlags.ScScreenSave">
            <summary>
                Executes the screen saver application specified in the [boot] section of
                the System.ini file.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowMenuFlags.ScHotkey">
            <summary>
                Activates the window associated with the application-specified hot key. The
                lParam parameter identifies the window to activate.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowMenuFlags.ScDefault">
            <summary>
                Selects the default item; the user double-clicked the window menu.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowMenuFlags.ScMonitorPower">
            <summary>
                Sets the state of the display. This command supports devices that have
                power-saving features, such as a battery-powered personal computer. - The
                lParam parameter can have the following values: -1 (the display is powering
                on), 1 (the display is going to low power), 2 (the display is being shut
                off).
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowMenuFlags.ScContextHelp">
            <summary>
                Changes the cursor to a question mark with a pointer. If the user then
                clicks a control in the dialog box, the control receives a WM_HELP message.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.WindowPlacementFlags">
            <summary>
                Provides enumerated flags of window placements.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowPlacementFlags.AsyncWindowPlacement">
            <summary>
                If the calling thread and the thread that owns the window are attached to
                different input queues, the system posts the request to the thread that
                owns the window. This prevents the calling thread from blocking its
                execution while other threads process the request.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowPlacementFlags.RestoreToMaximized">
            <summary>
                The restored window will be maximized, regardless of whether it was
                maximized before it was minimized. This setting is only valid the next time
                the window is restored. It does not change the default restoration
                behavior.
                <para>
                    This flag is only valid when the
                    <see cref="F:SilDev.WinApi.ShowWindowFlags.ShowMinimized"/> value is specified for the
                    showCmd member.
                </para>
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowPlacementFlags.SetMinimizedPosition">
            <summary>
                The coordinates of the minimized window may be specified.
                <para>
                    This flag must be specified if the coordinates are set in the
                    ptMinPosition member.
                </para>
            </summary>
        </member>
        <member name="T:SilDev.WinApi.WindowStyleFlags">
            <summary>
                Provides enumerated values of window styles.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.Border">
            <summary>
                The window has a thin-line border.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.Caption">
            <summary>
                The window has a title bar (includes the <see cref="F:SilDev.WinApi.WindowStyleFlags.Border"/> style).
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.Child">
            <summary>
                The window is a child window. A window with this style cannot have a menu
                bar. This style cannot be used with the WS_POPUP style.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.ChildWindow">
            <summary>
                Same as the WS_CHILD style.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.ClipChildren">
            <summary>
                Excludes the area occupied by child windows when drawing occurs within the
                parent window. This style is used when creating the parent window.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.ClipSiblings">
            <summary>
                Clips child windows relative to each other; that is, when a particular
                child window receives a WM_PAINT message, the <see cref="F:SilDev.WinApi.WindowStyleFlags.ClipSiblings"/>
                style clips all other overlapping child windows out of the region of the
                child window to be updated. If <see cref="F:SilDev.WinApi.WindowStyleFlags.ClipSiblings"/> is not specified
                and child windows overlap, it is possible, when drawing within the client
                area of a child window, to draw within the client area of a neighboring
                child window.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.Disabled">
            <summary>
                The window is initially disabled. A disabled window cannot receive input
                from the user. To change this after a window has been created, use the
                EnableWindow function.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.DlgFrame">
            <summary>
                The window has a border of a style typically used with dialog boxes. A
                window with this style cannot have a title bar.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.Group">
            <summary>
                The window is the first control of a group of controls. The group consists
                of this first control and all controls defined after it, up to the next
                control with the WS_GROUP style. The first control in each group usually
                has the <see cref="F:SilDev.WinApi.WindowStyleFlags.TabStop"/> style so that the user can move from group to
                group. The user can subsequently change the keyboard focus from one control
                in the group to the next control in the group by using the direction keys.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.HorScroll">
            <summary>
                The window has a horizontal scroll bar.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.Iconic">
            <summary>
                The window is initially minimized. Same as the <see cref="F:SilDev.WinApi.WindowStyleFlags.Minimize"/>
                style.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.Maximize">
            <summary>
                The window is initially maximized.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.MaximizeBox">
            <summary>
                The window has a maximize button. Cannot be combined with the
                <see cref="F:SilDev.WinApi.WindowStyleFlags.ExContextHelp"/> style. The <see cref="F:SilDev.WinApi.WindowStyleFlags.SysMenu"/> style must
                also be specified.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.Minimize">
            <summary>
                The window is initially minimized. Same as the WS_ICONIC style.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.MinimizeBox">
            <summary>
                The window has a minimize button. Cannot be combined with the
                <see cref="F:SilDev.WinApi.WindowStyleFlags.ExContextHelp"/> style. The <see cref="F:SilDev.WinApi.WindowStyleFlags.SysMenu"/> style must
                also be specified.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.Overlapped">
            <summary>
                The window is an overlapped window. An overlapped window has a title bar
                and a border. Same as the <see cref="F:SilDev.WinApi.WindowStyleFlags.Tiled"/> style.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.OverlappedWindow">
            <summary>
                The window is an overlapped window. Same as the <see cref="F:SilDev.WinApi.WindowStyleFlags.TiledWindow"/>
                style.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.Popup">
            <summary>
                The windows is a pop-up window. This style cannot be used with the WS_CHILD
                style.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.PopupWindow">
            <summary>
                The window is a pop-up window. The <see cref="F:SilDev.WinApi.WindowStyleFlags.Caption"/> and
                <see cref="F:SilDev.WinApi.WindowStyleFlags.PopupWindow"/> styles must be combined to make the window menu
                visible.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.SizeBox">
            <summary>
                The window has a sizing border. Same as the <see cref="F:SilDev.WinApi.WindowStyleFlags.ThickFrame"/> style.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.SysMenu">
            <summary>
                The window has a window menu on its title bar. The <see cref="F:SilDev.WinApi.WindowStyleFlags.Caption"/>
                style must also be specified.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.TabStop">
            <summary>
                The window is a control that can receive the keyboard focus when the user
                presses the TAB key. Pressing the TAB key changes the keyboard focus to the
                next control with the <see cref="F:SilDev.WinApi.WindowStyleFlags.TabStop"/> style. You can turn this style
                on and off to change dialog box navigation. To change this style after a
                window has been created, use the SetWindowLong function. For user-created
                windows and modeless dialogs to work with tab stops, alter the message loop
                to call the IsDialogMessage function.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.ThickFrame">
            <summary>
                The window has a sizing border. Same as the <see cref="F:SilDev.WinApi.WindowStyleFlags.SizeBox"/> style.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.Tiled">
            <summary>
                The window is an overlapped window. An overlapped window has a title bar
                and a border. Same as the <see cref="F:SilDev.WinApi.WindowStyleFlags.Overlapped"/> style.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.TiledWindow">
            <summary>
                The window is an overlapped window. Same as the
                <see cref="F:SilDev.WinApi.WindowStyleFlags.OverlappedWindow"/> style.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.Visible">
            <summary>
                The window is initially visible. This style can be turned on and off by
                using the ShowWindow or SetWindowPos function.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.VerScroll">
            <summary>
                The window has a vertical scroll bar.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.ExAcceptFiles">
            <summary>
                The window accepts drag-drop files.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.ExAppWindow">
            <summary>
                Forces a top-level window onto the taskbar when the window is visible.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.ExClientEdge">
            <summary>
                The window has a border with a sunken edge.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.ExComposited">
            <summary>
                Paints all descendants of a window in bottom-to-top painting order using
                double-buffering.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.ExContextHelp">
            <summary>
                The title bar of the window includes a question mark. When the user clicks
                the question mark, the cursor changes to a question mark with a pointer. If
                the user then clicks a child window, the child receives a WM_HELP message.
                The child window should pass the message to the parent window procedure,
                which should call the WinHelp function using the HELP_WM_HELP command. The
                Help application displays a pop-up window that typically contains help for
                the child window. <see cref="F:SilDev.WinApi.WindowStyleFlags.ExContextHelp"/> cannot be used with the
                <see cref="F:SilDev.WinApi.WindowStyleFlags.MaximizeBox"/> or <see cref="F:SilDev.WinApi.WindowStyleFlags.MinimizeBox"/> styles.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.ExControlParent">
            <summary>
                The window itself contains child windows that should take part in dialog
                box navigation. If this style is specified, the dialog manager recurses
                into children of this window when performing navigation operations such as
                handling the TAB key, an arrow key, or a keyboard mnemonic.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.ExDlgModalFrame">
            <summary>
                The window has a double border; the window can, optionally, be created with
                a title bar by specifying the <see cref="F:SilDev.WinApi.WindowStyleFlags.Caption"/> style in the dwStyle
                parameter.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.ExLayered">
            <summary>
                The window is a layered window. This style cannot be used if the window has
                a class style of either CS_OWNDC or CS_CLASSDC.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.ExLayoutRightToLeft">
            <summary>
                If the shell language is Hebrew, Arabic, or another language that supports
                reading order alignment, the horizontal origin of the window is on the
                right edge. Increasing horizontal values advance to the left.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.ExLeft">
            <summary>
                The window has generic left-aligned properties. This is the default.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.ExLeftScrollbar">
            <summary>
                If the shell language is Hebrew, Arabic, or another language that supports
                reading order alignment, the vertical scroll bar (if present) is to the
                left of the client area. For other languages, the style is ignored.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.ExLeftToRightReading">
            <summary>
                The window text is displayed using left-to-right reading-order properties.
                This is the default.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.ExMdiChild">
            <summary>
                The window is a MDI child window.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.ExNoActivate">
            <summary>
                A top-level window created with this style does not become the foreground
                window when the user clicks it. The system does not bring this window to
                the foreground when the user minimizes or closes the foreground window. To
                activate the window, use the SetActiveWindow or SetForegroundWindow
                function. The window does not appear on the taskbar by default. To force
                the window to appear on the taskbar, use the WS_EX_APPWINDOW style.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.ExNoInheritLayout">
            <summary>
                The window does not pass its window layout to its child windows.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.ExNoParentNotify">
            <summary>
                The child window created with this style does not send the WM_PARENTNOTIFY
                message to its parent window when it is created or destroyed.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.ExNoRedirectionBitmap">
            <summary>
                The window does not render to a redirection surface. This is for windows
                that do not have visible content or that use mechanisms other than surfaces
                to provide their visual.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.ExOverlappedWindow">
            <summary>
                The window is an overlapped window.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.ExPaletteWindow">
            <summary>
                The window is palette window, which is a modeless dialog box that presents
                an array of commands.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.ExRight">
            <summary>
                The window has generic "right-aligned" properties. This depends on the
                window class. This style has an effect only if the shell language is
                Hebrew, Arabic, or another language that supports reading-order alignment;
                otherwise, the style is ignored. Using the WS_EX_RIGHT style for static or
                edit controls has the same effect as using the SS_RIGHT or ES_RIGHT style,
                respectively. Using this style with button controls has the same effect as
                using BS_RIGHT and BS_RIGHTBUTTON styles.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.ExRightScrollbar">
            <summary>
                The vertical scroll bar (if present) is to the right of the client area.
                This is the default.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.ExRightToLeftReading">
            <summary>
                If the shell language is Hebrew, Arabic, or another language that supports
                reading-order alignment, the window text is displayed using right-to-left
                reading-order properties. For other languages, the style is ignored.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.ExStaticEdge">
            <summary>
                The window has a three-dimensional border style intended to be used for
                items that do not accept user input.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.ExToolWindow">
            <summary>
                The window is intended to be used as a floating toolbar. A tool window has
                a title bar that is shorter than a normal title bar, and the window title
                is drawn using a smaller font. A tool window does not appear in the taskbar
                or in the dialog that appears when the user presses ALT+TAB. If a tool
                window has a system menu, its icon is not displayed on the title bar.
                However, you can display the system menu by right-clicking or by typing
                ALT+SPACE.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.ExTopMost">
            <summary>
                The window should be placed above all non-topmost windows and should stay
                above them, even when the window is deactivated. To add or remove this
                style, use the SetWindowPos function.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.ExTransparent">
            <summary>
                The window should not be painted until siblings beneath the window (that
                were created by the same thread) have been painted. The window appears
                transparent because the bits of underlying sibling windows have already
                been painted. To achieve transparency without these restrictions, use the
                SetWindowRgn function.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.ExWindowEdge">
            <summary>
                The window has a border with a raised edge.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.WindowThemeAttributeFlags">
            <summary>
                Provides enumerated values of window theme attributes.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowThemeAttributeFlags.NoDrawCaption">
            <summary>
                Prevents the window caption from being drawn.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowThemeAttributeFlags.NoDrawIcon">
            <summary>
                Prevents the system icon from being drawn.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowThemeAttributeFlags.NoSysMenu">
            <summary>
                Prevents the system icon menu from appearing.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowThemeAttributeFlags.NoMirrorHelp">
            <summary>
                Prevents mirroring of the question mark, even in right-to-left (RTL)
                layout.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowThemeAttributeFlags.ValidBits">
            <summary>
                A mask that contains all the valid bits.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.AccessTokenFlags">
            <summary>
                Provides enumerated values of token access rights.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AccessTokenFlags.StandardRightsRequired">
            <summary>
                The right to read the information in the object's security descriptor, not
                including the information in the system access control list (SACL), the
                right to delete the object, the right to modify the discretionary access
                control list (DACL) in the object's security descriptor, the right to
                change the owner in the object's security descriptor, and the right to use
                the object for synchronization.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AccessTokenFlags.StandardRightsRead">
            <summary>
                The right to read the information in the object's security descriptor, not
                including the information in the system access control list (SACL).
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AccessTokenFlags.TokenAssignPrimary">
            <summary>
                Required to attach a primary token to a process. The
                SE_ASSIGNPRIMARYTOKEN_NAME privilege is also required to accomplish this
                task.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AccessTokenFlags.TokenDuplicate">
            <summary>
                Required to duplicate an access token.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AccessTokenFlags.TokenImpersonate">
            <summary>
                Required to attach an impersonation access token to a process.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AccessTokenFlags.TokenQuery">
            <summary>
                Required to query an access token.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AccessTokenFlags.TokenQuerySource">
            <summary>
                Required to query the source of an access token.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AccessTokenFlags.TokenAdjustPrivileges">
            <summary>
                Required to enable or disable the privileges in an access token.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AccessTokenFlags.TokenAdjustGroups">
            <summary>
                Required to adjust the attributes of the groups in an access token.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AccessTokenFlags.TokenAdjustDefault">
            <summary>
                Required to change the default owner, primary group, or DACL of an access
                token.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AccessTokenFlags.TokenAdjustSessionid">
            <summary>
                Required to adjust the session ID of an access token. The SE_TCB_NAME
                privilege is required.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AccessTokenFlags.TokenRead">
            <summary>
                Combines <see cref="F:SilDev.WinApi.AccessTokenFlags.StandardRightsRead"/> and <see cref="F:SilDev.WinApi.AccessTokenFlags.TokenQuery"/>.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AccessTokenFlags.TokenAllAccess">
            <summary>
                Combines all possible access rights for a token.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.CreationFlags">
            <summary>
                Provides enumerated values that control how the process is created.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.CreationFlags.CreateDefaultErrorMode">
            <summary>
                The new process does not inherit the error mode of the calling process.
                Instead, the new process gets the current default error mode.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.CreationFlags.CreateNewConsole">
            <summary>
                The new process has a new console, instead of inheriting the parent's
                console.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.CreationFlags.CreateNewProcessGroup">
            <summary>
                The new process is the root process of a new process group. The process
                group includes all processes that are descendants of this root process. The
                process identifier of the new process group is the same as the process
                identifier, which is returned in the lpProcessInfo parameter.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.CreationFlags.CreateSeparateWowVdm">
            <summary>
                This flag is only valid starting a 16-bit Windows-based application. If
                set, the new process runs in a private Virtual DOS Machine (VDM). By
                default, all 16-bit Windows-based applications run in a single, shared VDM.
                The advantage of running separately is that a crash only terminates the
                single VDM; any other programs running in distinct VDMs continue to
                function normally. Also, 16-bit Windows-based applications that run in
                separate VDMs have separate input queues. That means that if one
                application stops responding momentarily, applications in separate VDMs
                continue to receive input.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.CreationFlags.CreateSuspended">
            <summary>
                The primary thread of the new process is created in a suspended state.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.CreationFlags.CreateUnicodeEnvironment">
            <summary>
                Indicates the format of the lpEnvironment parameter. If this flag is set,
                the environment block pointed to by lpEnvironment uses Unicode characters.
                Otherwise, the environment block uses ANSI characters.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.CreationFlags.ExtendedStartupInfoPresent">
            <summary>
                The process is created with extended startup information.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.FileInfoFlags">
            <summary>
                Provides enumerated values that specify file informations.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.FileInfoFlags.AddOverlays">
            <summary>
                Apply the appropriate overlays to the file's icon. The <see cref="F:SilDev.WinApi.FileInfoFlags.Icon"/>
                flag must also be set.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.FileInfoFlags.AttrSpecified">
            <summary>
                Modify <see cref="F:SilDev.WinApi.FileInfoFlags.Attributes"/> to indicate that the dwAttributes member of
                the SHFILEINFO structure at psfi contains the specific attributes that are
                desired. These attributes are passed to IShellFolder::GetAttributesOf. If
                this flag is not specified, 0xFFFFFFFF is passed to
                IShellFolder::GetAttributesOf, requesting all attributes. This flag cannot
                be specified with the <see cref="F:SilDev.WinApi.FileInfoFlags.Icon"/> flag.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.FileInfoFlags.Attributes">
            <summary>
                Retrieve the item attributes. The attributes are copied to the dwAttributes
                member of the structure specified in the psfi parameter. These are the same
                attributes that are obtained from IShellFolder::GetAttributesOf.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.FileInfoFlags.DisplayName">
            <summary>
                Retrieve the display name for the file, which is the name as it appears in
                Windows Explorer. The name is copied to the szDisplayName member of the
                structure specified in psfi. The returned display name uses the long file
                name, if there is one, rather than the 8.3 form of the file name. Note that
                the display name can be affected by settings such as whether extensions are
                shown.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.FileInfoFlags.ExeType">
            <summary>
                Retrieve the type of the executable file if pszPath identifies an
                executable file. The information is packed into the return value. This flag
                cannot be specified with any other flags.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.FileInfoFlags.Icon">
            <summary>
                Retrieve the handle to the icon that represents the file and the index of
                the icon within the system image list. The handle is copied to the hIcon
                member of the structure specified by psfi, and the index is copied to the
                iIcon member.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.FileInfoFlags.IconLocation">
            <summary>
                Retrieve the name of the file that contains the icon representing the file
                specified by pszPath, as returned by the IExtractIcon::GetIconLocation
                method of the file's icon handler. Also retrieve the icon index within that
                file. The name of the file containing the icon is copied to the
                szDisplayName member of the structure specified by psfi. The icon's index
                is copied to that structure's iIcon member.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.FileInfoFlags.LargeIcon">
            <summary>
                Modify <see cref="F:SilDev.WinApi.FileInfoFlags.Icon"/>, causing the function to retrieve the file's
                large icon. The <see cref="F:SilDev.WinApi.FileInfoFlags.Icon"/> flag must also be set.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.FileInfoFlags.LinkOverlay">
            <summary>
                Modify <see cref="F:SilDev.WinApi.FileInfoFlags.Icon"/>, causing the function to add the link overlay to
                the file's icon. The <see cref="F:SilDev.WinApi.FileInfoFlags.Icon"/> flag must also be set.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.FileInfoFlags.OpenIcon">
            <summary>
                Modify <see cref="F:SilDev.WinApi.FileInfoFlags.Icon"/>, causing the function to retrieve the file's open
                icon. Also used to modify <see cref="F:SilDev.WinApi.FileInfoFlags.SysIconIndex"/>, causing the function
                to return the handle to the system image list that contains the file's
                small open icon. A container object displays an open icon to indicate that
                the container is open. The <see cref="F:SilDev.WinApi.FileInfoFlags.Icon"/> and/or
                <see cref="F:SilDev.WinApi.FileInfoFlags.SysIconIndex"/> flag must also be set.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.FileInfoFlags.OverlayIndex">
            <summary>
                Return the index of the overlay icon. The value of the overlay index is
                returned in the upper eight bits of the iIcon member of the structure
                specified by psfi. This flag requires that the <see cref="F:SilDev.WinApi.FileInfoFlags.Icon"/> be set as
                well.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.FileInfoFlags.PidL">
            <summary>
                Indicate that pszPath is the address of an ITEMIDLIST structure rather than
                a path name.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.FileInfoFlags.Selected">
            <summary>
                Modify <see cref="F:SilDev.WinApi.FileInfoFlags.Icon"/>, causing the function to blend the file's icon
                with the system highlight color. The <see cref="F:SilDev.WinApi.FileInfoFlags.Icon"/> flag must also be
                set.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.FileInfoFlags.ShellIconSize">
            <summary>
                Modify <see cref="F:SilDev.WinApi.FileInfoFlags.Icon"/>, causing the function to retrieve a Shell-sized
                icon. If this flag is not specified the function sizes the icon according
                to the system metric values. The <see cref="F:SilDev.WinApi.FileInfoFlags.Icon"/> flag must also be set.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.FileInfoFlags.SmallIcon">
            <summary>
                Modify <see cref="F:SilDev.WinApi.FileInfoFlags.Icon"/>, causing the function to retrieve the file's
                small icon. Also used to modify <see cref="F:SilDev.WinApi.FileInfoFlags.SysIconIndex"/>, causing the
                function to return the handle to the system image list that contains small
                icon images. The <see cref="F:SilDev.WinApi.FileInfoFlags.Icon"/> and/or <see cref="F:SilDev.WinApi.FileInfoFlags.SysIconIndex"/> flag
                must also be set.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.FileInfoFlags.SysIconIndex">
            <summary>
                Retrieve the index of a system image list icon. If successful, the index is
                copied to the iIcon member of psfi. The return value is a handle to the
                system image list. Only those images whose indices are successfully copied
                to iIcon are valid. Attempting to access other images in the system image
                list will result in undefined behavior.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.FileInfoFlags.TypeName">
            <summary>
                Retrieve the string that describes the file's type. The string is copied to
                the szTypeName member of the structure specified in psfi.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.FileInfoFlags.UseFileAttributes">
            <summary>
                Indicates that the function should not attempt to access the file specified
                by pszPath. Rather, it should act as if the file specified by pszPath
                exists with the file attributes passed in dwFileAttributes. This flag
                cannot be combined with the <see cref="F:SilDev.WinApi.FileInfoFlags.Attributes"/>, <see cref="F:SilDev.WinApi.FileInfoFlags.ExeType"/>
                , or <see cref="F:SilDev.WinApi.FileInfoFlags.PidL"/> flags.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.LogonOptions">
            <summary>
                Provides enumerated logon options.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.LogonOptions.WithProfile">
            <summary>
                Log on, then load the user's profile in the HKEY_USERS registry key. The
                function returns after the profile has been loaded. Loading the profile can
                be time-consuming, so it is best to use this value only if you must access
                the information in the HKEY_CURRENT_USER registry key.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.LogonOptions.NetCredentialsOnly">
            <summary>
                Log on, but use the specified credentials on the network only. The new
                process uses the same token as the caller, but the system creates a new
                logon session within LSA, and the process uses the specified credentials as
                the default credentials.
                <para>
                    This value can be used to create a process that uses a different set of
                    credentials locally than it does remotely. This is useful in
                    inter-domain scenarios where there is no trust relationship.
                </para>
            </summary>
        </member>
        <member name="T:SilDev.WinApi.RmAppTypes">
            <summary>
                Specifies the type of application that is described by the
                <see cref="T:SilDev.WinApi.RmProcessInfo"/> structure.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.RmAppTypes.UnknownApp">
            <summary>
                The application cannot be classified as any other type. An application of
                this type can only be shut down by a forced shutdown.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.RmAppTypes.MainWindow">
            <summary>
                A Windows application run as a stand-alone process that displays a
                top-level window.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.RmAppTypes.OtherWindow">
            <summary>
                A Windows application that does not run as a stand-alone process and does
                not display a top-level window.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.RmAppTypes.Service">
            <summary>
                The application is a Windows service.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.RmAppTypes.Explorer">
            <summary>
                The application is Windows Explorer.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.RmAppTypes.Console">
            <summary>
                The application is a stand-alone console application.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.RmAppTypes.Critical">
            <summary>
                A system restart is required to complete the installation because a process
                cannot be shut down. The process cannot be shut down because of the
                following reasons. The process may be a critical process. The current user
                may not have permission to shut down the process. The process may belong to
                the primary installer that started the Restart Manager.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.ServiceAccessRights">
            <summary>
                Provides enumerated values of service access rights.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceAccessRights.AllAccess">
            <summary>
                Includes <see cref="F:SilDev.WinApi.ServiceAccessRights.StandardRequired"/> in addition to all access rights in
                this table.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceAccessRights.ChangeConfig">
            <summary>
                Required to call the ChangeServiceConfig or ChangeServiceConfig2 function
                to change the service configuration. Because this grants the caller the
                right to change the executable file that the system runs, it should be
                granted only to administrators.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceAccessRights.EnumerateDependents">
            <summary>
                Required to call the EnumDependentServices function to enumerate all the
                services dependent on the service.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceAccessRights.Interrogate">
            <summary>
                Required to call the ControlService function to ask the service to report
                its status immediately.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceAccessRights.PauseContinue">
            <summary>
                Required to call the ControlService function to pause or continue the
                service.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceAccessRights.QueryConfig">
            <summary>
                Required to call the QueryServiceConfig and QueryServiceConfig2 functions
                to query the service configuration.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceAccessRights.QueryStatus">
            <summary>
                Required to call the QueryServiceStatus or QueryServiceStatusEx function to
                ask the service control manager about the status of the service.
                <para>
                    Required to call the NotifyServiceStatusChange function to receive
                    notification when a service changes status.
                </para>
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceAccessRights.StandardRequired">
            <summary>
                The standard rights.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceAccessRights.Start">
            <summary>
                Required to call the StartService function to start the service.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceAccessRights.Stop">
            <summary>
                Required to call the ControlService function to stop the service.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceAccessRights.UserDefinedControl">
            <summary>
                Required to call the ControlService function to specify a user-defined
                control code.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.ServiceBootFlags">
            <summary>
                Provides enumerated values of the service start options.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceBootFlags.AutoStart">
            <summary>
                A service started automatically by the service control manager during
                system startup. For more information, see Automatically Starting Services.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceBootFlags.BootStart">
            <summary>
                A device driver started by the system loader. This value is valid only for
                driver services.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceBootFlags.DemandStart">
            <summary>
                A service started by the service control manager when a process calls the
                StartService function. For more information, see Starting Services on
                Demand.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceBootFlags.Disabled">
            <summary>
                A service that cannot be started. Attempts to start the service result in
                the error code.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceBootFlags.SystemStart">
            <summary>
                A device driver started by the IoInitSystem function. This value is valid
                only for driver services.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.ServiceControlOptions">
            <summary>
                Provides enumerated values of the service control options.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceControlOptions.Continue">
            <summary>
                Notifies a paused service that it should resume. The hService handle must
                have the <see cref="F:SilDev.WinApi.ServiceAccessRights.PauseContinue"/> access right.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceControlOptions.Interrogate">
            <summary>
                Notifies a service that it should report its current status information to
                the service control manager. The hService handle must have the
                <see cref="F:SilDev.WinApi.ServiceAccessRights.Interrogate"/> access right.
                <para>
                    Note that this control is not generally useful as the SCM is aware of
                    the current state of the service.
                </para>
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceControlOptions.NetBindAdd">
            <summary>
                Notifies a network service that there is a new component for binding. The
                hService handle must have the
                <see cref="F:SilDev.WinApi.ServiceAccessRights.PauseContinue"/> access right. However, this
                control code has been deprecated; use Plug and Play functionality instead.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceControlOptions.NetBindDisable">
            <summary>
                Notifies a network service that one of its bindings has been disabled. The
                hService handle must have the
                <see cref="F:SilDev.WinApi.ServiceAccessRights.PauseContinue"/> access right. However, this
                control code has been deprecated; use Plug and Play functionality instead.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceControlOptions.NetBindEnable">
            <summary>
                Notifies a network service that a disabled binding has been enabled. The
                hService handle must have the
                <see cref="F:SilDev.WinApi.ServiceAccessRights.PauseContinue"/> access right. However, this
                control code has been deprecated; use Plug and Play functionality instead.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceControlOptions.NetBindRemove">
            <summary>
                Notifies a network service that a component for binding has been removed.
                The hService handle must have the
                <see cref="F:SilDev.WinApi.ServiceAccessRights.PauseContinue"/> access right. However, this
                control code has been deprecated; use Plug and Play functionality instead.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceControlOptions.ParamChange">
            <summary>
                Notifies a service that its startup parameters have changed. The hService
                handle must have the <see cref="F:SilDev.WinApi.ServiceAccessRights.PauseContinue"/> access
                right.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceControlOptions.Pause">
            <summary>
                Notifies a service that it should pause. The hService handle must have the
                <see cref="F:SilDev.WinApi.ServiceAccessRights.PauseContinue"/> access right.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceControlOptions.Stop">
            <summary>
                Notifies a service that it should stop. The hService handle must have the
                <see cref="F:SilDev.WinApi.ServiceAccessRights.Stop"/> access right.
                <para>
                    After sending the stop request to a service, you should not send other
                    controls to the service.
                </para>
            </summary>
        </member>
        <member name="T:SilDev.WinApi.ServiceControlTypes">
            <summary>
                Provides enumerated values of the service control types.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceControlTypes.AcceptNetBindChange">
            <summary>
                The service is a network component that can accept changes in its binding
                without being stopped and restarted.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceControlTypes.AcceptParamChange">
            <summary>
                The service can reread its startup parameters without being stopped and
                restarted.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceControlTypes.AcceptPauseContinue">
            <summary>
                The service can be paused and continued.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceControlTypes.AcceptStop">
            <summary>
                The service can be stopped.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.ServiceManagerAccessRights">
            <summary>
                Provides enumerated values of service control manager access rights.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceManagerAccessRights.AllAccess">
            <summary>
                Includes <see cref="F:SilDev.WinApi.ServiceManagerAccessRights.StandardRequired"/>, in addition to all access rights
                in this table.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceManagerAccessRights.CreateService">
            <summary>
                Required to call the CreateService function to create a service object and
                add it to the database.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceManagerAccessRights.Connect">
            <summary>
                Required to connect to the service control manager.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceManagerAccessRights.EnumerateService">
            <summary>
                Required to call the EnumServicesStatus or EnumServicesStatusEx function to
                list the services that are in the database.
                <para>
                    Required to call the NotifyServiceStatusChange function to receive
                    notification when any service is created or deleted.
                </para>
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceManagerAccessRights.Lock">
            <summary>
                Required to call the LockServiceDatabase function to acquire a lock on the
                database.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceManagerAccessRights.ModifyBootConfig">
            <summary>
                Required to call the NotifyBootConfigStatus function.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceManagerAccessRights.QueryLockStatus">
            <summary>
                Required to call the QueryServiceLockStatus function to retrieve the lock
                status information for the database.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceManagerAccessRights.StandardRequired">
            <summary>
                The standard rights.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.ServiceStateTypes">
            <summary>
                Provides enumerated values of the current state of the service.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceStateTypes.ContinuePending">
            <summary>
                The service continue is pending.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceStateTypes.PausePending">
            <summary>
                The service pause is pending.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceStateTypes.Paused">
            <summary>
                The service is paused.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceStateTypes.Running">
            <summary>
                The service is running.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceStateTypes.StartPending">
            <summary>
                The service is starting.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceStateTypes.StopPending">
            <summary>
                The service is stopping.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceStateTypes.Stopped">
            <summary>
                The service is not running.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.SecurityImpersonationLevels">
            <summary>
                Provides enumerated values that specify security impersonation levels.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SecurityImpersonationLevels.SecurityAnonymous">
            <summary>
                The server process cannot obtain identification information about the
                client, and it cannot impersonate the client. It is defined with no value
                given, and thus, by ANSI C rules, defaults to a value of zero.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SecurityImpersonationLevels.SecurityIdentification">
            <summary>
                The server process can obtain information about the client, such as
                security identifiers and privileges, but it cannot impersonate the client.
                This is useful for servers that export their own objects, for example,
                database products that export tables and views. Using the retrieved
                client-security information, the server can make access-validation
                decisions without being able to use other services that are using the
                client's security context.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SecurityImpersonationLevels.SecurityImpersonation">
            <summary>
                The server process can impersonate the client's security context on its
                local system. The server cannot impersonate the client on remote systems.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SecurityImpersonationLevels.SecurityDelegation">
            <summary>
                The server process can impersonate the client's security context on remote
                systems.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.ServiceTypes">
            <summary>
                Provides enumerated values of service types.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceTypes.Adapter">
            <summary>
                Reserved.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceTypes.FileSystemDriver">
            <summary>
                File system driver service.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceTypes.InteractiveProcess">
            <summary>
                The service can interact with the desktop.
                <para>
                    If you specify either <see cref="F:SilDev.WinApi.ServiceTypes.Win32OwnProcess"/> or
                    <see cref="F:SilDev.WinApi.ServiceTypes.Win32ShareProcess"/>, and the service is running in the
                    context of the LocalSystem account, you can also specify this value.
                </para>
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceTypes.KernelDriver">
            <summary>
                Driver service.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceTypes.RecognizerDriver">
            <summary>
                Reserved.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceTypes.Win32OwnProcess">
            <summary>
                Service that runs in its own process.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceTypes.Win32ShareProcess">
            <summary>
                Service that shares a process with one or more other services.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.StartFlags">
            <summary>
                Provides enumerated values of process start flags.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.StartFlags.ForceOnFeedback">
            <summary>
                Indicates that the cursor is in feedback mode for two seconds after
                CreateProcess is called. The Working in Background cursor is displayed (see
                the Pointers tab in the Mouse control panel utility).
                <para>
                    If during those two seconds the process makes the first GUI call, the
                    system gives five more seconds to the process. If during those five
                    seconds the process shows a window, the system gives five more seconds
                    to the process to finish drawing the window.
                </para>
            </summary>
        </member>
        <member name="F:SilDev.WinApi.StartFlags.ForceOffFeedback">
            <summary>
                Indicates that the feedback cursor is forced off while the process is
                starting. The Normal Select cursor is displayed.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.StartFlags.PreventPinning">
            <summary>
                Indicates that any windows created by the process cannot be pinned on the
                taskbar.
                <para>
                    This flag must be combined with <see cref="F:SilDev.WinApi.StartFlags.TitleIsAppId"/>.
                </para>
            </summary>
        </member>
        <member name="F:SilDev.WinApi.StartFlags.RunFullscreen">
            <summary>
                Indicates that the process should be run in full-screen mode, rather than
                in windowed mode.
                <para>
                    This flag is only valid for console applications running on an x86
                    computer.
                </para>
            </summary>
        </member>
        <member name="F:SilDev.WinApi.StartFlags.TitleIsAppId">
            <summary>
                The lpTitle member contains an AppUserModelID. This identifier controls how
                the taskbar and Start menu present the application, and enables it to be
                associated with the correct shortcuts and Jump Lists.
                <para>
                    If <see cref="F:SilDev.WinApi.StartFlags.PreventPinning"/> is used, application windows cannot be
                    pinned on the taskbar. The use of any AppUserModelID-related window
                    properties by the application overrides this setting for that window
                    only.
                </para>
                <para>
                    This flag cannot be used with <see cref="F:SilDev.WinApi.StartFlags.TitleIsLinkName"/>.
                </para>
            </summary>
        </member>
        <member name="F:SilDev.WinApi.StartFlags.TitleIsLinkName">
            <summary>
                The lpTitle member contains the path of the shortcut file (.lnk) that the
                user invoked to start this process. This is typically set by the shell when
                a .lnk file pointing to the launched application is invoked. Most
                applications will not need to set this value.
                <para>
                    This flag cannot be used with <see cref="F:SilDev.WinApi.StartFlags.TitleIsAppId"/>.
                </para>
            </summary>
        </member>
        <member name="F:SilDev.WinApi.StartFlags.UntrustedSource">
            <summary>
                The command line came from an untrusted source.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.StartFlags.UseCountChars">
            <summary>
                The dwXCountChars and dwYCountChars members contain additional information.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.StartFlags.UseFillAttribute">
            <summary>
                The dwXCountChars and dwYCountChars members contain additional information.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.StartFlags.UseHotkey">
            <summary>
                The hStdInput member contains additional information.
                <para>
                    This flag cannot be used with <see cref="F:SilDev.WinApi.StartFlags.UseStdHandles"/>.
                </para>
            </summary>
        </member>
        <member name="F:SilDev.WinApi.StartFlags.UsePosition">
            <summary>
                The dwX and dwY members contain additional information.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.StartFlags.UseShowWindow">
            <summary>
                The wShowWindow member contains additional information.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.StartFlags.UseSize">
            <summary>
                The dwXSize and dwYSize members contain additional information.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.StartFlags.UseStdHandles">
            <summary>
                The hStdInput, hStdOutput, and hStdError members contain additional
                information.
                <para>
                    If this flag is specified when calling one of the process creation
                    functions, the handles must be inheritable and the function's
                    bInheritHandles parameter must be set to <see langword="true"/>.
                </para>
                <para>
                    Handles must be closed with <see cref="M:SilDev.WinApi.NativeMethods.CloseHandle(System.IntPtr)"/>
                    when they are no longer needed.
                </para>
                <para>
                    This flag cannot be used with <see cref="F:SilDev.WinApi.StartFlags.UseHotkey"/>.
                </para>
            </summary>
        </member>
        <member name="T:SilDev.WinApi.TokenTypes">
            <summary>
                Provides enumerated values that differentiate between a primary token and
                an impersonation token.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.TokenTypes.TokenPrimary">
            <summary>
                Indicates a primary token.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.TokenTypes.TokenImpersonation">
            <summary>
                Indicates an impersonation token.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.WindowThemeAttributeTypes">
            <summary>
                Provides enumerated values of window theme attribute types.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowThemeAttributeTypes.NonClient">
            <summary>
                Non-client area window attributes will be set.
            </summary>
        </member>
        <member name="M:SilDev.WinApi.ThrowError(System.Int32,System.Int32)">
            <summary>
                Throws the specified error code if it is not specified as a handled error.
            </summary>
            <param name="error">
                The Win32 error code associated with this exception.
            </param>
            <param name="handledError">
                A handled Win32 error code.
            </param>
            <exception cref="T:System.ComponentModel.Win32Exception">
            </exception>
        </member>
        <member name="M:SilDev.WinApi.ThrowError(System.Int32,System.Int32[])">
            <summary>
                Throws the specified error code if it is not specified as a handled error.
            </summary>
            <param name="error">
                The Win32 error code associated with this exception.
            </param>
            <param name="handledErrors">
                A sequence of handled Win32 error codes.
            </param>
            <exception cref="T:System.ComponentModel.Win32Exception">
            </exception>
        </member>
        <member name="M:SilDev.WinApi.ThrowLastError(System.String)">
            <summary>
                Throws the last error code returned by the last unmanaged function.
            </summary>
            <param name="forceMessage">
                A detailed description of the error that is thrown if no Win32 error code
                was found.
                <para>
                    If this parameter is <see langword="null"/>, no exception is thrown in
                    this case.
                </para>
            </param>
            <exception cref="T:System.ComponentModel.Win32Exception">
            </exception>
        </member>
        <member name="T:SilDev.WinApi.NativeHelper">
            <summary>
                Provides native based functions.
            </summary>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.AdjustTokenPrivileges(System.IntPtr,System.Boolean,SilDev.WinApi.TokenPrivileges@)">
            <summary>
                Enables or disables privileges in the specified access token. Enabling or
                disabling privileges in an access token requires
                <see cref="F:SilDev.WinApi.AccessTokenFlags.TokenAdjustPrivileges"/> access.
            </summary>
            <param name="tokenHandle">
                A handle to the access token that contains the privileges to be modified.
                The handle must have <see cref="F:SilDev.WinApi.AccessTokenFlags.TokenAdjustPrivileges"/>
                access to the token. If the PreviousState parameter is not
                <see langword="null"/>, the handle must also have
                <see cref="F:SilDev.WinApi.AccessTokenFlags.TokenQuery"/> access.
            </param>
            <param name="disableAllPrivileges">
                Specifies whether the function disables all of the token's privileges. If
                this value is <see langword="true"/>, the function disables all privileges
                and ignores the NewState parameter. If it is <see langword="false"/>, the
                function modifies privileges based on the information pointed to by the
                NewState parameter.
            </param>
            <param name="newState">
                A pointer to a <see cref="T:SilDev.WinApi.TokenPrivileges"/> structure that specifies an
                array of privileges and their attributes. If the disableAllPrivileges
                parameter is <see langword="false"/>, the AdjustTokenPrivileges function
                enables, disables, or removes these privileges for the token. The following
                table describes the action taken by the AdjustTokenPrivileges function,
                based on the privilege attribute. If disableAllPrivileges is
                <see langword="true"/>, the function ignores this parameter.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.AnimateWindow(System.IntPtr,System.Int32,SilDev.WinApi.AnimateWindowFlags)">
            <summary>
                Enables you to produce special effects when showing or hiding windows.
                There are four types of animation: roll, slide, collapse or expand, and
                alpha-blended fade.
            </summary>
            <param name="hWnd">
                A handle to the window to animate. The calling thread must own this window.
            </param>
            <param name="time">
                The time it takes to play the animation, in milliseconds. Typically, an
                animation takes 200 milliseconds to play.
            </param>
            <param name="flags">
                The type of animation.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.AnimateWindow(System.IntPtr,SilDev.WinApi.AnimateWindowFlags)">
            <summary>
                Enables you to produce special effects when showing or hiding windows.
                There are four types of animation: roll, slide, collapse or expand, and
                alpha-blended fade.
            </summary>
            <param name="hWnd">
                A handle to the window to animate. The calling thread must own this window.
            </param>
            <param name="flags">
                The type of animation.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.CallNextHookEx(System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
                Passes the hook information to the next hook procedure in the current hook
                chain. A hook procedure can call this function either before or after
                processing the hook information.
            </summary>
            <param name="nCode">
                The hook code passed to the current hook procedure. The next hook procedure
                uses this code to determine how to process the hook information.
            </param>
            <param name="wParam">
                The wParam value passed to the current hook procedure. The meaning of this
                parameter depends on the type of hook associated with the current hook
                chain.
            </param>
            <param name="lParam">
                The lParam value passed to the current hook procedure. The meaning of this
                parameter depends on the type of hook associated with the current hook
                chain.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.CenterWindow(System.IntPtr,System.IntPtr,System.Boolean)">
            <summary>
                Centers the position of the specified window.
            </summary>
            <param name="hWnd">
                A handle to the window to change.
            </param>
            <param name="hPar">
                A handle to the parent window.
            </param>
            <param name="alwaysVisible">
                <see langword="true"/> to force the window to remain in screen area;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.CenterWindow(System.IntPtr,System.Boolean)">
            <summary>
                Centers the position of the specified window.
            </summary>
            <param name="hWnd">
                A handle to the window to change.
            </param>
            <param name="alwaysVisible">
                <see langword="true"/> to force the window to remain in screen area;
                otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.ClientToScreen(System.IntPtr,System.Drawing.Point@)">
            <summary>
                The ClientToScreen function converts the client-area coordinates of a
                specified point to screen coordinates.
            </summary>
            <param name="hWnd">
                A handle to the window whose client area is used for the conversion.
            </param>
            <param name="lpPoint">
                A pointer to a <see cref="T:System.Drawing.Point"/> structure that contains the client
                coordinates to be converted. The new screen coordinates are copied into
                this structure if the function succeeds.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.CloseHandle(System.IntPtr)">
            <summary>
                Closes an open object handle.
            </summary>
            <param name="handle">
                A valid handle to an open object.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.DeleteMenu(System.IntPtr,System.UInt32,SilDev.WinApi.ModifyMenuFlags)">
            <summary>
                Deletes an item from the specified menu. If the menu item opens a menu or
                submenu, this function destroys the handle to the menu or submenu and frees
                the memory used by the menu or submenu.
            </summary>
            <param name="hMenu">
                A handle to the menu to be changed.
            </param>
            <param name="nPosition">
                The menu item to be deleted, as determined by the uFlags parameter.
            </param>
            <param name="wFlags">
                Indicates how the uPosition parameter is interpreted. This parameter must
                be <see cref="F:SilDev.WinApi.ModifyMenuFlags.ByCommand"/> or
                <see cref="F:SilDev.WinApi.ModifyMenuFlags.ByPosition"/>.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.DestroyIcon(System.IntPtr)">
            <summary>
                Destroys an icon and frees any memory the icon occupied.
            </summary>
            <param name="hIcon">
                A handle to the icon to be destroyed. The icon must not be in use.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.DisableWindowMaximizeButton(System.IntPtr)">
            <summary>
                Disables the maximize button of the specified window.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.DisableWindowMinimizeButton(System.IntPtr)">
            <summary>
                Disables the minimize button of the specified window.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.DrawMenuBar(System.IntPtr)">
            <summary>
                Redraws the menu bar of the specified window. If the menu bar changes after
                the system has created the window, this function must be called to draw the
                changed menu bar.
            </summary>
            <param name="hWnd">
                A handle to the window whose menu bar is to be redrawn.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.DuplicateHandle(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr@,System.UInt32,System.Boolean,System.UInt32)">
            <summary>
                Duplicates an object handle.
            </summary>
            <param name="hSourceProcessHandle">
                A handle to the process with the handle to be duplicated.
                <para>
                    The handle must have the <see cref="F:SilDev.WinApi.AccessRights.ProcessDupHandle"/>
                    access right.
                </para>
            </param>
            <param name="hSourceHandle">
                The handle to be duplicated. This is an open object handle that is valid in
                the context of the source process. For a list of objects whose handles can
                be duplicated, see the following Remarks section.
            </param>
            <param name="hTargetProcessHandle">
                A handle to the process that is to receive the duplicated handle.
                <para>
                    The handle must have the <see cref="F:SilDev.WinApi.AccessRights.ProcessDupHandle"/>
                    access right.
                </para>
            </param>
            <param name="lpTargetHandle">
                A pointer to a variable that receives the duplicate handle. This handle
                value is valid in the context of the target process.
                <para>
                    If hSourceHandle is a pseudo handle returned by GetCurrentProcess or
                    GetCurrentThread, DuplicateHandle converts it to a real handle to a
                    process or thread, respectively.
                </para>
                <para>
                    If lpTargetHandle is <see langword="null"/>, the function duplicates
                    the handle, but does not return the duplicate handle value to the
                    caller. This behavior exists only for backward compatibility with
                    previous versions of this function. You should not use this feature, as
                    you will lose system resources until the target process terminates.
                </para>
            </param>
            <param name="dwDesiredAccess">
                The access requested for the new handle. For the flags that can be
                specified for each object type, see the following Remarks section.
                <para>
                    This parameter is ignored if the dwOptions parameter specifies the
                    <see cref="F:SilDev.WinApi.DuplicateOption.SameAccess"/> flag. Otherwise, the flags
                    that can be specified depend on the type of object whose handle is to
                    be duplicated.
                </para>
            </param>
            <param name="bInheritHandle">
                A variable that indicates whether the handle is inheritable. If
                <see langword="true"/>, the duplicate handle can be inherited by new
                processes created by the target process. If <see langword="false"/>, the
                new handle cannot be inherited.
            </param>
            <param name="dwOptions">
                Optional actions. This parameter can be zero, or any combination of
                <see cref="T:SilDev.WinApi.DuplicateOption"/>.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.DwmExtendFrameIntoClientArea(System.IntPtr,SilDev.WinApi.ThemeMargins@)">
            <summary>
                Extends the window frame into the client area.
            </summary>
            <param name="hWnd">
                The handle to the window in which the frame will be extended into the
                client area.
            </param>
            <param name="pMarInset">
                A pointer to a MARGINS structure that describes the margins to use when
                extending the frame into the client area.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.DwmIsCompositionEnabled(System.Int32@)">
            <summary>
                Obtains a value that indicates whether Desktop Window Manager (DWM)
                composition is enabled.
            </summary>
            <param name="pfEnabled">
                A pointer to a value that, when this function returns successfully,
                receives <see langword="true"/> if DWM composition is enabled; otherwise,
                <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.DwmSetWindowAttribute(System.IntPtr,SilDev.WinApi.DwmWindowCornerPreference)">
            <summary>
                Sets the value of Desktop Window Manager (DWM) non-client rendering
                attributes for a window.
            </summary>
            <param name="hWnd">
                The handle to the window for which the attribute value is to be set.
            </param>
            <param name="pvAttribute">
                A pointer to an object containing the attribute value to set.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.DwmSetWindowAttribute(System.IntPtr,SilDev.WinApi.DwmWindowAttribute,System.Boolean)">
            <summary>
                Sets the value of Desktop Window Manager (DWM) non-client rendering
                attributes for a window.
            </summary>
            <param name="hWnd">
                The handle to the window for which the attribute value is to be set.
            </param>
            <param name="dwAttribute">
                A flag describing which value to set, specified as a value of the
                <see cref="T:SilDev.WinApi.DwmWindowAttribute"/> enumeration. This parameter specifies
                which attribute to set, and the pvAttribute parameter points to an object
                containing the attribute value.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.EndDialog(System.IntPtr,System.IntPtr)">
            <summary>
                Destroys a modal dialog box, causing the system to end any processing for
                the dialog box.
            </summary>
            <param name="hDlg">
                A handle to the dialog box to be destroyed.
            </param>
            <param name="nResult">
                The value to be returned to the application from the function that created
                the dialog box.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.EnumChildWindows(System.IntPtr,SilDev.WinApi.EnumChildProc,System.IntPtr)">
            <summary>
                Enumerates the child windows that belong to the specified parent window by
                passing the handle to each child window, in turn, to an application-defined
                callback function. EnumChildWindows continues until the last child window
                is enumerated or the callback function returns <see langword="false"/>.
            </summary>
            <param name="hWndParent">
                A handle to the parent window whose child windows are to be enumerated. If
                this parameter is <see langword="null"/>, this function is equivalent to
                EnumWindows.
            </param>
            <param name="lpEnumFunc">
                A pointer to an application-defined callback function.
            </param>
            <param name="lParam">
                An application-defined value to be passed to the callback function.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.EnumThreadWindows(System.UInt32,SilDev.WinApi.EnumThreadWndProc,System.IntPtr)">
            <summary>
                Enumerates all nonchild windows associated with a thread by passing the
                handle to each window, in turn, to an application-defined callback
                function.
            </summary>
            <param name="dwThreadId">
                The identifier of the thread whose windows are to be enumerated.
            </param>
            <param name="lpfn">
                A pointer to an application-defined callback function.
            </param>
            <param name="lParam">
                An application-defined value to be passed to the callback function.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.ExtractIconEx(System.String,System.Int32,System.IntPtr[],System.IntPtr[],System.Int32)">
            <summary>
                Creates an array of handles to large or small icons extracted from the
                specified executable file, DLL, or icon file.
            </summary>
            <param name="lpszFile">
                The name of an executable file, DLL, or icon file from which icons will be
                extracted.
            </param>
            <param name="nIconIndex">
                The zero-based index of the first icon to extract. For example, if this
                value is zero, the function extracts the first icon in the specified file.
                <para>
                    If this value is –1 and phiconLarge and phiconSmall are both
                    <see langword="null"/>, the function returns the total number of icons
                    in the specified file. If the file is an executable file or DLL, the
                    return value is the number of RT_GROUP_ICON resources. If the file is
                    an .ico file, the return value is 1.
                </para>
                <para>
                    If this value is a negative number and either phiconLarge or
                    phiconSmall is not <see langword="null"/>, the function begins by
                    extracting the icon whose resource identifier is equal to the absolute
                    value of nIconIndex. For example, use -3 to extract the icon whose
                    resource identifier is 3.
                </para>
            </param>
            <param name="phiconLarge">
                An array of icon handles that receives handles to the large icons extracted
                from the file. If this parameter is <see langword="null"/>, no large icons
                are extracted from the file.
            </param>
            <param name="phiconSmall">
                An array of icon handles that receives handles to the small icons extracted
                from the file. If this parameter is <see langword="null"/>, no small icons
                are extracted from the file.
            </param>
            <param name="nIcons">
                The number of icons to be extracted from the file.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.FindMimeFromData(System.IntPtr,System.String,System.Byte[],System.Int32,System.String,SilDev.WinApi.MimeFlags,System.IntPtr@,System.Int32)">
            <summary>
                Determines the MIME type from the data provided.
            </summary>
            <param name="pBc">
                A pointer to the IBindCtx interface. Can be set to <see langword="null"/>.
            </param>
            <param name="pwzUrl">
                A pointer to a string value that contains the URL of the data. Can be set
                to <see langword="null"/> if pBuffer contains the data to be sniffed.
            </param>
            <param name="pBuffer">
                A pointer to the buffer that contains the data to be sniffed. Can be set to
                <see langword="null"/> if pwzUrl contains a valid URL.
            </param>
            <param name="cbSize">
                An unsigned long integer value that contains the size of the buffer.
            </param>
            <param name="pwzMimeProposed">
                A pointer to a string value that contains the proposed MIME type. This
                value is authoritative if type cannot be determined from the data. If the
                proposed type contains a semi-colon (;) it is removed. This parameter can
                be set to <see langword="null"/>.
            </param>
            <param name="dwMimeFlags">
                The search and filter options.
            </param>
            <param name="ppwzMimeOut">
                The address of a string value that receives the suggested MIME type.
            </param>
            <param name="dwReserved">
                Reserved. Must be set to 0.
            </param>
            <returns>
                This function can return one of these values.
                <para>
                    S_OK: The operation completed successfully.
                </para>
                <para>
                    E_FAIL: The operation failed.
                </para>
                <para>
                    E_INVALIDARG: One or more arguments are invalid.
                </para>
                <para>
                    E_OUTOFMEMORY: There is insufficient memory to complete the operation.
                </para>
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.FindMimeFromFile(System.String,SilDev.WinApi.MimeFlags)">
            <summary>
                Determines the MIME type from the file.
            </summary>
            <param name="fPath">
                The file to check.
            </param>
            <param name="dwMimeFlags">
                The search and filter options.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.FindNestedWindow(System.IntPtr@,System.String)">
            <summary>
                Retrieves a handle to a window whose class name is matched.
            </summary>
            <param name="hWndParent">
                A handle to the parent window whose child windows are to be searched.
            </param>
            <param name="className">
                The class name or a class atom created by a previous call to the
                RegisterClass or RegisterClassEx function.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.FindWindow(System.String,System.String)">
            <summary>
                Retrieves a handle to the top-level window whose class name and window name
                match the specified strings. This function does not search child windows.
                This function does not perform a case-sensitive search.
            </summary>
            <param name="lpClassName">
                The class name or a class atom created by a previous call to the
                RegisterClass or RegisterClassEx function. The atom must be in the
                low-order word of lpClassName; the high-order word must be zero.
                <para>
                    If lpClassName points to a string, it specifies the window class name.
                    The class name can be any name registered with RegisterClass or
                    RegisterClassEx, or any of the predefined control-class names.
                </para>
                <para>
                    If lpClassName is <see langword="null"/>, it finds any window whose
                    title matches the lpWindowName parameter.
                </para>
            </param>
            <param name="lpWindowName">
                The window name (the window's title). If this parameter is
                <see langword="null"/>, all window names match.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.FindWindowByCaption(System.String)">
            <summary>
                Retrieves a handle to the top-level window whose window name match the
                specified strings. This function does not search child windows. This
                function does not perform a case-sensitive search.
            </summary>
            <param name="lpWindowName">
                The window name (the window's title). If this parameter is
                <see langword="null"/>, all window names match.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.FindWindowEx(System.IntPtr,System.IntPtr,System.String,System.String)">
            <summary>
                Retrieves a handle to a window whose class name and window name match the
                specified strings. The function searches child windows, beginning with the
                one following the specified child window. This function does not perform a
                case-sensitive search.
            </summary>
            <param name="hWndParent">
                A handle to the parent window whose child windows are to be searched.
                <para>
                    If hwndParent is <see langword="null"/>, the function uses the desktop
                    window as the parent window. The function searches among windows that
                    are child windows of the desktop.
                </para>
                <para>
                    If hwndParent is HWND_MESSAGE, the function searches all message-only
                    windows.
                </para>
            </param>
            <param name="hWndChildAfter">
                A handle to a child window. The search begins with the next child window in
                the Z order. The child window must be a direct child window of hwndParent,
                not just a descendant window.
                <para>
                    If hwndChildAfter is <see langword="null"/>, the search begins with the
                    first child window of hwndParent.
                </para>
                <para>
                    Note that if both hwndParent and hwndChildAfter are
                    <see langword="null"/>, the function searches all top-level and
                    message-only windows.
                </para>
            </param>
            <param name="lpszClass">
                The class name or a class atom created by a previous call to the
                RegisterClass or RegisterClassEx function. The atom must be placed in the
                low-order word of lpszClass; the high-order word must be zero.
                <para>
                    If lpszClass is a string, it specifies the window class name. The class
                    name can be any name registered with RegisterClass or RegisterClassEx,
                    or any of the predefined control-class names, or it can be MAKEINTATOM
                    (0x8000). In this latter case, 0x8000 is the atom for a menu class. For
                    more information, see the Remarks section of this topic.
                </para>
            </param>
            <param name="lpszWindow">
                The window name (the window's title). If this parameter is
                <see langword="null"/>, all window names match.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.GetActiveWindowTitle">
            <summary>
                Gets the window title from the foreground window (the window with which the
                user is currently working).
            </summary>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.GetClassName(System.IntPtr,System.Text.StringBuilder,System.Int32)">
            <summary>
                Retrieves the name of the class to which the specified window belongs.
            </summary>
            <param name="hWnd">
                A handle to the window and, indirectly, the class to which the window
                belongs.
            </param>
            <param name="lpClassName">
                The class name string.
            </param>
            <param name="nMaxCount">
                The length of the lpClassName buffer, in characters. The buffer must be
                large enough to include the terminating null character; otherwise, the
                class name string is truncated to nMaxCount-1 characters.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.GetClientRect(System.IntPtr,System.Drawing.Rectangle@)">
            <summary>
                Retrieves the coordinates of a window's client area. The client coordinates
                specify the upper-left and lower-right corners of the client area. Because
                client coordinates are relative to the upper-left corner of a window's
                client area, the coordinates of the upper-left corner are (0,0).
            </summary>
            <param name="hWnd">
                A handle to the window whose client coordinates are to be retrieved.
            </param>
            <param name="lpRect">
                A pointer to a <see cref="T:System.Drawing.Rectangle"/> structure that receives the client
                coordinates. The left and top members are zero. The right and bottom
                members contain the width and height of the window.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.GetCurrentThreadId">
            <summary>
                Retrieves the thread identifier of the calling thread.
            </summary>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.GetCursorPos">
            <summary>
                Retrieves the position of the mouse cursor, in screen coordinates.
            </summary>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.GetDesktopWindow">
            <summary>
                Retrieves a handle to the desktop window. The desktop window covers the
                entire screen. The desktop window is the area on top of which other windows
                are painted.
            </summary>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.GetDlgCtrlId(System.IntPtr)">
            <summary>
                Retrieves the identifier of the specified control.
            </summary>
            <param name="hWndCtl">
                A handle to the control.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.GetDlgItem(System.IntPtr,System.Int32)">
            <summary>
                Retrieves a handle to a control in the specified dialog box.
            </summary>
            <param name="hDlg">
                A handle to the dialog box that contains the control.
            </param>
            <param name="nIddlgItem">
                The identifier of the control to be retrieved.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.GetForegroundWindow">
            <summary>
                Retrieves a handle to the foreground window (the window with which the user
                is currently working). The system assigns a slightly higher priority to the
                thread that creates the foreground window than it does to other threads.
            </summary>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.GetLastError">
            <summary>
                Retrieves the calling thread's last-error code value. The last-error code
                is maintained on a per-thread basis. Multiple threads do not overwrite each
                other's last-error code.
            </summary>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.GetMenu(System.IntPtr)">
            <summary>
                Retrieves a handle to the menu assigned to the specified window.
            </summary>
            <param name="hWnd">
                A handle to the window whose menu handle is to be retrieved.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.GetMenuItemCount(System.IntPtr)">
            <summary>
                Determines the number of items in the specified menu.
            </summary>
            <param name="hMenu">
                A handle to the menu to be examined.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.GetParent(System.IntPtr)">
            <summary>
                Retrieves a handle to the specified window's parent or owner.
            </summary>
            <param name="hWnd">
                A handle to the window whose parent window handle is to be retrieved.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.GetProcessBasicInformation(System.IntPtr)">
            <summary>
                Gets basic process information about the specified window.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.GetProcessId(System.IntPtr)">
            <summary>
                Retrieves the process identifier of the specified process.
            </summary>
            <param name="handle">
                A handle to the process.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.GetProcessImageFileName(System.IntPtr,System.Text.StringBuilder,System.Int32)">
            <summary>
                Retrieves the name of the executable file for the specified process.
            </summary>
            <param name="hProcess">
                A handle to the process. The handle must have the
                <see cref="F:SilDev.WinApi.AccessRights.ProcessQueryInformation"/> or
                <see cref="F:SilDev.WinApi.AccessRights.ProcessQueryLimitedInformation"/> access right.
            </param>
            <param name="lpImageFileName">
                A pointer to a buffer that receives the full path to the executable file.
            </param>
            <param name="nSize">
                The size of the lpImageFileName buffer, in characters.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.GetStdHandle(System.Int32)">
            <summary>
                Retrieves a handle to the specified standard device (standard input,
                standard output, or standard error).
            </summary>
            <param name="nStdHandle">
                The standard device. This parameter can be one of the following values.
                <para>
                    STD_INPUT_HANDLE (DWORD)-10: The standard input device. Initially, this
                    is the console input buffer, CONIN$.
                </para>
                <para>
                    STD_OUTPUT_HANDLE (DWORD)-11: The standard output device. Initially,
                    this is the active console screen buffer, CONOUT$.
                </para>
                <para>
                    STD_ERROR_HANDLE (DWORD)-12: The standard error device. Initially, this
                    is the active console screen buffer, CONOUT$.
                </para>
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.GetSystemMenu(System.IntPtr,System.Boolean)">
            <summary>
                Enables the application to access the window menu (also known as the system
                menu or the control menu) for copying and modifying.
            </summary>
            <param name="hWnd">
                A handle to the window that will own a copy of the window menu.
            </param>
            <param name="bRevert">
                The action to be taken. If this parameter is <see langword="false"/>,
                GetSystemMenu returns a handle to the copy of the window menu currently in
                use. The copy is initially identical to the window menu, but it can be
                modified. If this parameter is <see langword="true"/>, GetSystemMenu resets
                the window menu back to the default state. The previous window menu, if
                any, is destroyed.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.GetSystemMetrics(SilDev.WinApi.SystemMetric)">
            <summary>
                Retrieves the specified system metric or system configuration setting in
                pixels.
            </summary>
            <param name="nIndex">
                The system metric or configuration setting to be retrieved.
            </param>
            <returns>
                If the function succeeds, the return value is the requested system metric
                or configuration setting. If the function fails, the return value is 0
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.GetSystemThemeColor(System.Boolean)">
            <summary>
                Gets the current theme color of the operating system.
            </summary>
            <param name="alpha">
                <see langword="true"/> to get also the alpha channel; otherwise,
                <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.GetUserDefaultUILanguage">
            <summary>
                Returns the language identifier for the user UI language for the current
                user. If the current user has not set a language,
                <see cref="M:SilDev.WinApi.NativeHelper.GetUserDefaultUILanguage"/> returns the preferred language set
                for the system. If there is no preferred language set for the system, then
                the system default UI language (also known as "install language") is
                returned.
            </summary>
            ReSharper disable once InconsistentNaming
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.GetWindowLong(System.IntPtr,SilDev.WinApi.WindowLongFlags)">
            <summary>
                Retrieves information about the specified window. The function also
                retrieves the 32-bit (DWORD) value at the specified offset into the extra
                window memory.
            </summary>
            <param name="hWnd">
                A handle to the window and, indirectly, the class to which the window
                belongs.
            </param>
            <param name="nIndex">
                The zero-based offset to the value to be retrieved. Valid values are in the
                range zero through the number of bytes of extra window memory, minus four;
                for example, if you specified 12 or more bytes of extra memory, a value of
                8 would be an index to the third 32-bit integer. To retrieve any other
                value, specify one of the <see cref="T:SilDev.WinApi.WindowLongFlags"/>.GWL_??? values.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.GetWindowPlacement(System.IntPtr,SilDev.WinApi.WindowPlacement@)">
            <summary>
                Gets the show state and the restored, minimized, and maximized positions of
                the specified window.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
            <param name="lpwndpl">
                A pointer to a <see cref="T:SilDev.WinApi.WindowPlacement"/> structure that specifies the
                new show state and window positions.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.GetWindowPlacement(System.IntPtr)">
            <summary>
                Gets information about the placement of the specified window.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.GetWindowRect(System.IntPtr,System.Drawing.Rectangle@)">
            <summary>
                Retrieves the dimensions of the bounding rectangle of the specified window.
                The dimensions are given in screen coordinates that are relative to the
                upper-left corner of the screen.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
            <param name="lpRect">
                A pointer to a <see cref="T:System.Drawing.Rectangle"/> structure that receives the screen
                coordinates of the upper-left and lower-right corners of the window.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.GetWindowText(System.IntPtr,System.Text.StringBuilder,System.Int32)">
            <summary>
                Copies the text of the specified window's title bar (if it has one) into a
                buffer. If the specified window is a control, the text of the control is
                copied. However, GetWindowText cannot retrieve the text of a control in
                another application.
            </summary>
            <param name="hWnd">
                A handle to the window or control containing the text.
            </param>
            <param name="text">
                The buffer that will receive the text. If the string is as long or longer
                than the buffer, the string is truncated and terminated with a null
                character.
            </param>
            <param name="maxLength">
                The maximum number of characters to copy to the buffer, including the null
                character. If the text exceeds this limit, it is truncated.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.GetWindowTextLength(System.IntPtr)">
            <summary>
                Retrieves the length, in characters, of the specified window's title bar
                text (if the window has a title bar). If the specified window is a control,
                the function retrieves the length of the text within the control. However,
                GetWindowTextLength cannot retrieve the length of the text of an edit
                control in another application.
            </summary>
            <param name="hWnd">
                A handle to the window or control.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.GetWindowThreadProcessId(System.IntPtr,System.UInt32@)">
            <summary>
                Retrieves the identifier of the thread that created the specified window
                and, optionally, the identifier of the process that created the window.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
            <param name="lpdwProcessId">
                A pointer to a variable that receives the process identifier. If this
                parameter is not <see langword="null"/>, GetWindowThreadProcessId copies
                the identifier of the process to the variable; otherwise, it does not.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.HideCaret(System.IntPtr)">
            <summary>
                Removes the caret from the screen. Hiding a caret does not destroy its
                current shape or invalidate the insertion point.
            </summary>
            <param name="hWnd">
                A handle to the window that owns the caret. If this parameter is
                <see langword="null"/>, HideCaret searches the current task for the window
                that owns the caret.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.HideWindow(System.IntPtr)">
            <summary>
                Minimizes and hides the specified window.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.InsertMenu(System.IntPtr,System.UInt32,SilDev.WinApi.ModifyMenuFlags,System.UIntPtr,System.String)">
            <summary>
                Note  The InsertMenu function has been superseded by the InsertMenuItem
                function. You can still use InsertMenu, however, if you do not need any of
                the extended features of InsertMenuItem.
            </summary>
            <param name="hMenu">
                A handle to the menu to be changed.
            </param>
            <param name="wPosition">
                The menu item before which the new menu item is to be inserted, as
                determined by the uFlags parameter.
            </param>
            <param name="wFlags">
                Controls the interpretation of the uPosition parameter and the content,
                appearance, and behavior of the new menu item.
            </param>
            <param name="wIdNewItem">
                The identifier of the new menu item or, if the uFlags parameter has the
                <see cref="F:SilDev.WinApi.ModifyMenuFlags.Popup"/> flag set, a handle to the drop-down
                menu or submenu.
            </param>
            <param name="lpNewItem">
                The content of the new menu item. The interpretation of lpNewItem depends
                on whether the uFlags parameter includes the
                <see cref="F:SilDev.WinApi.ModifyMenuFlags.Bitmap"/>,
                <see cref="F:SilDev.WinApi.ModifyMenuFlags.OwnerDraw"/>, or
                <see cref="F:SilDev.WinApi.ModifyMenuFlags.TextString"/> flag, as follows.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.InvalidateRect(System.IntPtr,System.IntPtr,System.Boolean)">
            <summary>
                Adds a rectangle to the specified window's update region. The update region
                represents the portion of the window's client area that must be redrawn.
            </summary>
            <param name="hWnd">
                A handle to the window whose update region has changed. If this parameter
                is <see langword="null"/>, the system invalidates and redraws all windows,
                not just the windows for this application, and sends the WM_ERASEBKGND and
                WM_NCPAINT messages before the function returns. Setting this parameter to
                <see langword="null"/> is not recommended.
            </param>
            <param name="lpRect">
                A pointer to a RECT structure that contains the client coordinates of the
                rectangle to be added to the update region. If this parameter is
                <see langword="null"/>, the entire client area is added to the update
                region.
            </param>
            <param name="bErase">
                Specifies whether the background within the update region is to be erased
                when the update region is processed. If this parameter is
                <see langword="true"/>, the background is erased when the BeginPaint
                function is called. If this parameter is <see langword="false"/>, the
                background remains unchanged.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.IsThemeActive">
            <summary>
                Tests if a visual style for the current application is active.
            </summary>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.LoadLibrary(System.String)">
            <summary>
                Loads the specified module into the address space of the calling process.
                The specified module may cause other modules to be loaded.
            </summary>
            <param name="lpFileName">
                The name of the module. This can be either a library module (a .dll file)
                or an executable module (an .exe file). The name specified is the file name
                of the module and is not related to the name stored in the library module
                itself, as specified by the LIBRARY keyword in the module-definition (.def)
                file.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.LoadString(System.IntPtr,System.UInt32,System.Text.StringBuilder,System.Int32)">
            <summary>
                Loads a string resource from the executable file associated with a
                specified module, copies the string into a buffer, and appends a
                terminating null character.
            </summary>
            <param name="hInstance">
                A handle to an instance of the module whose executable file contains the
                string resource. To get the handle to the application itself, call the
                GetModuleHandle function with <see langword="null"/>.
            </param>
            <param name="uId">
                The identifier of the string to be loaded.
            </param>
            <param name="lpBuffer">
                The buffer is to receive the string. Must be of sufficient length to hold a
                pointer (8 bytes).
            </param>
            <param name="nBufferMax">
                The size of the buffer, in characters. The string is truncated and
                null-terminated if it is longer than the number of characters specified. If
                this parameter is 0, then lpBuffer receives a read-only pointer to the
                resource itself.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.LocalAlloc(SilDev.WinApi.LocalAllocFlags,System.UIntPtr)">
            <summary>
                Allocates the specified number of bytes from the heap.
            </summary>
            <param name="flag">
                The memory allocation attributes. The default is the LMEM_FIXED value. This
                parameter can be one or more of the <see cref="T:SilDev.WinApi.LocalAllocFlags"/>.
            </param>
            <param name="size">
                The number of bytes to allocate. If this parameter is zero and the uFlags
                parameter specifies <see cref="F:SilDev.WinApi.LocalAllocFlags.LMemMoveable"/>, the
                function returns a handle to a memory object that is marked as discarded.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.LocalFree(System.IntPtr)">
            <summary>
                Frees the specified local memory object and invalidates its handle.
            </summary>
            <param name="hMem">
                A handle to the local memory object. This handle is returned by either the
                <see cref="M:SilDev.WinApi.NativeHelper.LocalAlloc(SilDev.WinApi.LocalAllocFlags,System.UIntPtr)"/> function.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.LockWindowUpdate(System.IntPtr)">
            <summary>
                Disables or enables drawing in the specified window. Only one window can be
                locked at a time.
            </summary>
            <param name="hWndLock">
                The window in which drawing will be disabled. If this parameter is
                <see langword="null"/>, drawing in the locked window is enabled.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.LookupPrivilegeName(System.String,SilDev.WinApi.LuId,System.Text.StringBuilder,System.Int32@)">
            <summary>
                Retrieves the name that corresponds to the privilege represented on a
                specific system by a specified locally unique identifier (LUID).
            </summary>
            <param name="lpSystemName">
                A pointer to a null-terminated string that specifies the name of the system
                on which the privilege name is retrieved. If a null string is specified,
                the function attempts to find the privilege name on the local system.
            </param>
            <param name="lpLuid">
                A pointer to the <see cref="T:SilDev.WinApi.LuId"/> by which the privilege is known on the
                target system.
            </param>
            <param name="lpName">
                A pointer to a buffer that receives a null-terminated string that
                represents the privilege name. For example, this string could be
                "SeSecurityPrivilege".
            </param>
            <param name="cchName">
                A pointer to a variable that specifies the size, in a TCHAR value, of the
                lpName buffer. When the function returns, this parameter contains the
                length of the privilege name, not including the terminating null character.
                If the buffer pointed to by the lpName parameter is too small, this
                variable contains the required size.
            </param>
            <exception cref="T:System.ArgumentNullException">
                lpSystemName or lpName is null.
            </exception>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.LookupPrivilegeValue(System.String,System.String,SilDev.WinApi.LuId@)">
            <summary>
                Retrieves the <see cref="T:SilDev.WinApi.LuId"/> used on a specified system to locally
                represent the specified privilege name.
            </summary>
            <param name="lpSystemName">
                A pointer to a null-terminated string that specifies the name of the system
                on which the privilege name is retrieved. If a null string is specified,
                the function attempts to find the privilege name on the local system.
            </param>
            <param name="lpName">
                A pointer to a null-terminated string that specifies the name of the
                privilege, as defined in the Winnt.h header file.
            </param>
            <param name="lpLuid">
                A pointer to a variable that receives the <see cref="T:SilDev.WinApi.LuId"/> by which the
                privilege is known on the system specified by the lpSystemName parameter.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.MapVirtualKey(System.UInt32,System.UInt32)">
            <summary>
                Translates (maps) a virtual-key code into a scan code or character value,
                or translates a scan code into a virtual-key code.
            </summary>
            <param name="uCode">
                The virtual key code or scan code for a key. How this value is interpreted
                depends on the value of the uMapType parameter.
            </param>
            <param name="uMapType">
                The translation to be performed. The value of this parameter depends on the
                value of the uCode parameter.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.MoveWindow(System.IntPtr,System.Drawing.Rectangle)">
            <summary>
                Changes the position and dimensions of the specified window.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
            <param name="nRect">
                The new position and size of the window.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.MoveWindow(System.IntPtr,System.Drawing.Point,System.Drawing.Size)">
            <summary>
                Changes the position and dimensions of the specified window.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
            <param name="point">
                The new position of the window.
            </param>
            <param name="size">
                The new size of the window.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.MoveWindow(System.IntPtr,System.Drawing.Point)">
            <summary>
                Changes the position of the specified window.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
            <param name="point">
                The new position of the window.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.MoveWindow(System.IntPtr,System.Int32,System.Int32)">
            <summary>
                Changes the position of the specified window.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
            <param name="x">
                The new position of the left side of the window.
            </param>
            <param name="y">
                The new position of the top of the window.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.MoveWindow(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
                Changes the position and dimensions of the specified window. For a
                top-level window, the position and dimensions are relative to the
                upper-left corner of the screen. For a child window, they are relative to
                the upper-left corner of the parent window's client area.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
            <param name="x">
                The new position of the left side of the window.
            </param>
            <param name="y">
                The new position of the top of the window.
            </param>
            <param name="nWidth">
                The new width of the window.
            </param>
            <param name="nHeight">
                The new height of the window.
            </param>
            <param name="bRepaint">
                Indicates whether the window is to be repainted. If this parameter is
                <see langword="true"/>, the window receives a message. If the parameter is
                <see langword="false"/>, no repainting of any kind occurs. This applies to
                the client area, the nonclient area (including the title bar and scroll
                bars), and any part of the parent window uncovered as a result of moving a
                child window.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.MoveWindowToVisibleScreenArea(System.IntPtr)">
            <summary>
                Changes the position of a specified window that is outside the virtual
                screen to move it back to the visible screen area.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.NtQueryInformationProcess(System.IntPtr,SilDev.WinApi.ProcessInfoFlags,SilDev.WinApi.ProcessBasicInformation@,System.UInt32,System.IntPtr@)">
            <summary>
                Retrieves information about the specified process.
            </summary>
            <param name="hndl">
                A handle to the process for which information is to be retrieved.
            </param>
            <param name="piCl">
                The type of process information to be retrieved.
            </param>
            <param name="processInformation">
                A pointer to a buffer supplied by the calling application into which the
                function writes the requested information. The size of the information
                written varies depending on the data type of the
                <see cref="T:SilDev.WinApi.ProcessBasicInformation"/> parameter.
            </param>
            <param name="piLen">
                The size of the buffer pointed to by the
                <see cref="T:SilDev.WinApi.ProcessBasicInformation"/> parameter, in bytes.
            </param>
            <param name="rLen">
                A pointer to a variable in which the function returns the size of the
                requested information. If the function was successful, this is the size of
                the information written to the buffer pointed to by the
                <see cref="T:SilDev.WinApi.ProcessBasicInformation"/> parameter, but if the buffer was too
                small, this is the minimum size of buffer needed to receive the information
                successfully.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.OpenProcess(SilDev.WinApi.AccessRights,System.Boolean,System.UInt32)">
            <summary>
                Opens an existing local process object.
            </summary>
            <param name="dwDesiredAccess">
                The access to the process object. This access right is checked against the
                security descriptor for the process. This parameter can be one or more of
                the process access rights.
            </param>
            <param name="bInheritHandle">
                If this value is <see langword="true"/>, processes created by this process
                will inherit the handle. Otherwise, the processes do not inherit this
                handle.
            </param>
            <param name="dwProcessId">
                The identifier of the local process to be opened.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.PostMessage(System.Runtime.InteropServices.HandleRef,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
                Places (posts) a message in the message queue associated with the thread
                that created the specified window and returns without waiting for the
                thread to process the message.
            </summary>
            <param name="hWnd">
                A handle to the window whose window procedure is to receive the message.
                The following values have special meanings.
                <para>
                    HWND_BROADCAST ((HWND)0xffff): The message is posted to all top-level
                    windows in the system, including disabled or invisible unowned windows,
                    overlapped windows, and pop-up windows. The message is not posted to
                    child windows.
                </para>
                <para>
                    <see langword="null"/>: The function behaves like a call to
                    PostThreadMessage with the dwThreadId parameter set to the identifier
                    of the current thread.
                </para>
            </param>
            <param name="msg">
                The message to be posted.
            </param>
            <param name="wParam">
                Additional message-specific information.
            </param>
            <param name="lParam">
                Additional message-specific information.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.PostMessage(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
                Places (posts) a message in the message queue associated with the thread
                that created the specified window and returns without waiting for the
                thread to process the message.
            </summary>
            <param name="hWnd">
                A handle to the window whose window procedure is to receive the message.
                The following values have special meanings.
                <para>
                    HWND_BROADCAST ((HWND)0xffff): The message is posted to all top-level
                    windows in the system, including disabled or invisible unowned windows,
                    overlapped windows, and pop-up windows. The message is not posted to
                    child windows.
                </para>
                <para>
                    <see langword="null"/>: The function behaves like a call to
                    PostThreadMessage with the dwThreadId parameter set to the identifier
                    of the current thread.
                </para>
            </param>
            <param name="msg">
                The message to be posted.
            </param>
            <param name="wParam">
                Additional message-specific information.
            </param>
            <param name="lParam">
                Additional message-specific information.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.ReadProcessMemory(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr@)">
            <summary>
                Reads data from an area of memory in a specified process. The entire area
                to be read must be accessible or the operation fails.
            </summary>
            <param name="hProcess">
                A handle to the process with memory that is being read. The handle must
                have <see cref="F:SilDev.WinApi.AccessRights.ProcessVmRead"/> access to the process.
            </param>
            <param name="lpBaseAddress">
                A pointer to the base address in the specified process from which to read.
                Before any data transfer occurs, the system verifies that all data in the
                base address and memory of the specified size is accessible for read
                access, and if it is not accessible the function fails.
            </param>
            <param name="lpBuffer">
                A pointer to a buffer that receives the contents from the address space of
                the specified process.
            </param>
            <param name="nSize">
                The number of bytes to be read from the specified process.
            </param>
            <param name="lpNumberOfBytesRead">
                A pointer to a variable that receives the number of bytes transferred into
                the specified buffer. If lpNumberOfBytesRead is <see langword="null"/>, the
                parameter is ignored.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.ReadProcessMemory(System.IntPtr,System.IntPtr,System.Text.StringBuilder,System.IntPtr,System.IntPtr@)">
            <summary>
                Reads data from an area of memory in a specified process. The entire area
                to be read must be accessible or the operation fails.
            </summary>
            <param name="hProcess">
                A handle to the process with memory that is being read. The handle must
                have <see cref="F:SilDev.WinApi.AccessRights.ProcessVmRead"/> access to the process.
            </param>
            <param name="lpBaseAddress">
                A pointer to the base address in the specified process from which to read.
                Before any data transfer occurs, the system verifies that all data in the
                base address and memory of the specified size is accessible for read
                access, and if it is not accessible the function fails.
            </param>
            <param name="lpBuffer">
                A pointer to a buffer that receives the contents from the address space of
                the specified process.
            </param>
            <param name="nSize">
                The number of bytes to be read from the specified process.
            </param>
            <param name="lpNumberOfBytesRead">
                A pointer to a variable that receives the number of bytes transferred into
                the specified buffer. If lpNumberOfBytesRead is <see langword="null"/>, the
                parameter is ignored.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.RedrawWindow(System.IntPtr,System.IntPtr,System.IntPtr,SilDev.WinApi.RedrawWindowFlags)">
            <summary>
                Updates the specified rectangle or region in a window's client area.
            </summary>
            <param name="hWnd">
                A handle to the window to be redrawn. If this parameter is
                <see langword="null"/>, the desktop window is updated.
            </param>
            <param name="lprcUpdate">
                A pointer to a RECT structure containing the coordinates, in device units,
                of the update rectangle. This parameter is ignored if the hrgnUpdate
                parameter identifies a region.
            </param>
            <param name="hrgnUpdate">
                A handle to the update region. If both the hrgnUpdate and lprcUpdate
                parameters are <see langword="null"/>, the entire client area is added to
                the update region.
            </param>
            <param name="flags">
                One or more redraw flags. This parameter can be used to invalidate or
                validate a window, control repainting, and control which windows are
                affected by <see cref="M:SilDev.WinApi.NativeHelper.RedrawWindow(System.IntPtr,System.IntPtr,System.IntPtr,SilDev.WinApi.RedrawWindowFlags)"/>.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.ReleaseCapture">
            <summary>
                Releases the mouse capture from a window in the current thread and restores
                normal mouse input processing. A window that has captured the mouse
                receives all mouse input, regardless of the position of the cursor, except
                when a mouse button is clicked while the cursor hot spot is in the window
                of another thread.
            </summary>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.RemoveMenu(System.IntPtr,System.UInt32,SilDev.WinApi.ModifyMenuFlags)">
            <summary>
                Deletes a menu item or detaches a submenu from the specified menu. If the
                menu item opens a drop-down menu or submenu, RemoveMenu does not destroy
                the menu or its handle, allowing the menu to be reused. Before this
                function is called, the GetSubMenu function should retrieve a handle to the
                drop-down menu or submenu.
            </summary>
            <param name="hMenu">
                A handle to the menu to be changed.
            </param>
            <param name="uPosition">
                The menu item to be deleted, as determined by the uFlags parameter.
            </param>
            <param name="uFlags">
                Indicates how the uPosition parameter is interpreted. This parameter must
                be <see cref="F:SilDev.WinApi.ModifyMenuFlags.ByCommand"/> or
                <see cref="F:SilDev.WinApi.ModifyMenuFlags.ByPosition"/>.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.RemoveWindowBorders(System.IntPtr,System.Boolean,System.Boolean)">
            <summary>
                Removes the borders and title bar of the specified window.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
            <param name="menuBar">
                <see langword="true"/> to remove an existing menu bar; otherwise,
                <see langword="false"/>.
            </param>
            <param name="extended">
                <see langword="true"/> to remove an existing double border; otherwise,
                <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.RemoveWindowFromTaskbar(System.IntPtr)">
            <summary>
                Removes specified window from taskbar.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.RemoveWindowMinMaxButtons(System.IntPtr)">
            <summary>
                Removes the maximize and minimize button of the specified window.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.SendArgs(System.IntPtr,System.String)">
            <summary>
                Sends the specified arguments to the specified window.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
            <param name="args">
                The arguments to send.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.SendInput(System.UInt32,SilDev.WinApi.DeviceInput[],System.Int32)">
            <summary>
                Synthesizes keystrokes, mouse motions, and button clicks.
            </summary>
            <param name="nInputs">
                The number of structures in the pInputs array.
            </param>
            <param name="pInputs">
                An array of <see cref="T:SilDev.WinApi.DeviceInput"/> structures. Each structure represents
                an event to be inserted into the keyboard or mouse input stream.
            </param>
            <param name="cbSize">
                The size, in bytes, of an <see cref="T:SilDev.WinApi.DeviceInput"/> structure. If cbSize is
                not the size of an <see cref="T:SilDev.WinApi.DeviceInput"/> structure, the function fails.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.SendMessage(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
                Sends the specified message to a window or windows. The SendMessage
                function calls the window procedure for the specified window and does not
                return until the window procedure has processed the message.
            </summary>
            <param name="hWnd">
                A handle to the window whose window procedure will receive the message. If
                this parameter is HWND_BROADCAST ((HWND)0xffff), the message is sent to all
                top-level windows in the system, including disabled or invisible unowned
                windows, overlapped windows, and pop-up windows; but the message is not
                sent to child windows.
            </param>
            <param name="uMsg">
                The message to be sent.
            </param>
            <param name="wParam">
                Additional message-specific information.
            </param>
            <param name="lParam">
                Additional message-specific information.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.SendMessage(System.IntPtr,System.UInt32,System.IntPtr,SilDev.WinApi.CopyData@)">
            <summary>
                Sends the specified message to a window or windows. The SendMessage
                function calls the window procedure for the specified window and does not
                return until the window procedure has processed the message.
            </summary>
            <param name="hWnd">
                A handle to the window whose window procedure will receive the message. If
                this parameter is HWND_BROADCAST ((HWND)0xffff), the message is sent to all
                top-level windows in the system, including disabled or invisible unowned
                windows, overlapped windows, and pop-up windows; but the message is not
                sent to child windows.
            </param>
            <param name="uMsg">
                The message to be sent.
            </param>
            <param name="wParam">
                Additional message-specific information.
            </param>
            <param name="lParam">
                Additional message-specific information.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.SendMessage(System.IntPtr,SilDev.WinApi.WindowMenuFlags,System.IntPtr,SilDev.WinApi.CopyData@)">
            <summary>
                Sends the specified message to a window or windows. The SendMessage
                function calls the window procedure for the specified window and does not
                return until the window procedure has processed the message.
            </summary>
            <param name="hWnd">
                A handle to the window whose window procedure will receive the message. If
                this parameter is HWND_BROADCAST ((HWND)0xffff), the message is sent to all
                top-level windows in the system, including disabled or invisible unowned
                windows, overlapped windows, and pop-up windows; but the message is not
                sent to child windows.
            </param>
            <param name="uMsg">
                The message to be sent.
            </param>
            <param name="wParam">
                Additional message-specific information.
            </param>
            <param name="lParam">
                Additional message-specific information.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.SendMessage(System.IntPtr,SilDev.WinApi.WindowMenuFlags,System.IntPtr,System.IntPtr)">
            <summary>
                Sends the specified message to a window or windows. The SendMessage
                function calls the window procedure for the specified window and does not
                return until the window procedure has processed the message.
            </summary>
            <param name="hWnd">
                A handle to the window whose window procedure will receive the message. If
                this parameter is HWND_BROADCAST ((HWND)0xffff), the message is sent to all
                top-level windows in the system, including disabled or invisible unowned
                windows, overlapped windows, and pop-up windows; but the message is not
                sent to child windows.
            </param>
            <param name="uMsg">
                The message to be sent.
            </param>
            <param name="wParam">
                Additional message-specific information.
            </param>
            <param name="lParam">
                Additional message-specific information.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.SendMessageTimeout(System.IntPtr,System.UInt32,System.UIntPtr,System.IntPtr,System.UInt32,System.UInt32,System.UIntPtr@)">
            <summary>
                Sends the specified message to one or more windows.
            </summary>
            <param name="hWnd">
                A handle to the window whose window procedure will receive the message.
                <para>
                    If this parameter is HWND_BROADCAST ((HWND)0xffff), the message is sent
                    to all top-level windows in the system, including disabled or invisible
                    unowned windows. The function does not return until each window has
                    timed out. Therefore, the total wait time can be up to the value of
                    uTimeout multiplied by the number of top-level windows.
                </para>
            </param>
            <param name="msg">
                The message to be sent.
            </param>
            <param name="wParam">
                Any additional message-specific information.
            </param>
            <param name="lParam">
                Any additional message-specific information.
            </param>
            <param name="fuFlags">
                The behavior of this function. This parameter can be one or more of the
                following values.
                <para>
                    SMTO_ABORTIFHUNG (0x2): The function returns without waiting for the
                    time-out period to elapse if the receiving thread appears to not
                    respond or hangs.
                </para>
                <para>
                    SMTO_BLOCK (0x1): Prevents the calling thread from processing any other
                    requests until the function returns.
                </para>
                <para>
                    SMTO_NORMAL (0x0): The calling thread is not prevented from processing
                    other requests while waiting for the function to return.
                </para>
                <para>
                    SMTO_NOTIMEOUTIFNOTHUNG (0x8): The function does not enforce the
                    time-out period as long as the receiving thread is processing messages.
                </para>
                <para>
                    SMTO_ERRORONEXIT (0x20): The function should return 0 if the receiving
                    window is destroyed or its owning thread dies while the message is
                    being processed.
                </para>
            </param>
            <param name="uTimeout">
                The duration of the time-out period, in milliseconds. If the message is a
                broadcast message, each window can use the full time-out period. For
                example, if you specify a five second time-out period and there are three
                top-level windows that fail to process the message, you could have up to a
                15 second delay.
            </param>
            <param name="lpdwResult">
                The result of the message processing. The value of this parameter depends
                on the message that is specified.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.SendMessageTimeoutText(System.IntPtr,System.UInt32,System.UIntPtr,System.Text.StringBuilder,System.UInt32,System.UInt32,System.IntPtr@)">
            <summary>
                Sends the specified message to one or more windows.
            </summary>
            <param name="hWnd">
                A handle to the window whose window procedure will receive the message.
                <para>
                    If this parameter is HWND_BROADCAST ((HWND)0xffff), the message is sent
                    to all top-level windows in the system, including disabled or invisible
                    unowned windows. The function does not return until each window has
                    timed out. Therefore, the total wait time can be up to the value of
                    uTimeout multiplied by the number of top-level windows.
                </para>
            </param>
            <param name="msg">
                The message to be sent.
            </param>
            <param name="wParam">
                Any additional message-specific information.
            </param>
            <param name="lParam">
                Any additional message-specific information.
            </param>
            <param name="fuFlags">
                The behavior of this function. This parameter can be one or more of the
                following values.
                <para>
                    SMTO_ABORTIFHUNG (0x2): The function returns without waiting for the
                    time-out period to elapse if the receiving thread appears to not
                    respond or hangs.
                </para>
                <para>
                    SMTO_BLOCK (0x1): Prevents the calling thread from processing any other
                    requests until the function returns.
                </para>
                <para>
                    SMTO_NORMAL (0x0): The calling thread is not prevented from processing
                    other requests while waiting for the function to return.
                </para>
                <para>
                    SMTO_NOTIMEOUTIFNOTHUNG (0x8): The function does not enforce the
                    time-out period as long as the receiving thread is processing messages.
                </para>
                <para>
                    SMTO_ERRORONEXIT (0x20): The function should return 0 if the receiving
                    window is destroyed or its owning thread dies while the message is
                    being processed.
                </para>
            </param>
            <param name="uTimeout">
                The duration of the time-out period, in milliseconds. If the message is a
                broadcast message, each window can use the full time-out period. For
                example, if you specify a five second time-out period and there are three
                top-level windows that fail to process the message, you could have up to a
                15 second delay.
            </param>
            <param name="lpdwResult">
                The result of the message processing. The value of this parameter depends
                on the message that is specified.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.SendNotifyMessage(System.IntPtr,System.UInt32,System.UIntPtr,System.String)">
            <summary>
                Sends the specified message to a window or windows. If the window was
                created by the calling thread, SendNotifyMessage calls the window procedure
                for the window and does not return until the window procedure has processed
                the message. If the window was created by a different thread,
                SendNotifyMessage passes the message to the window procedure and returns
                immediately; it does not wait for the window procedure to finish processing
                the message.
            </summary>
            <param name="hWnd">
                A handle to the window whose window procedure will receive the message. If
                this parameter is HWND_BROADCAST ((HWND)0xffff), the message is sent to all
                top-level windows in the system, including disabled or invisible unowned
                windows, overlapped windows, and pop-up windows; but the message is not
                sent to child windows.
            </param>
            <param name="msg">
                The message to be sent.
            </param>
            <param name="wParam">
                Additional message-specific information.
            </param>
            <param name="lParam">
                Additional message-specific information.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.SetCurrentDirectory(System.String)">
            <summary>
                Changes the current directory for the current process.
            </summary>
            <param name="lpPathName">
                The path to the new current directory.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.SetCursorPos(System.IntPtr,System.Drawing.Point)">
            <summary>
                Moves the cursor to the specified coordinates.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
            <param name="point">
                The new coordinates of the cursor.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.SetCursorPos(System.IntPtr,System.Int32,System.Int32)">
            <summary>
                Moves the cursor to the specified coordinates.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
            <param name="x">
                The new x-coordinate of the cursor.
            </param>
            <param name="y">
                The new y-coordinate of the cursor.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.SetCursorPos(System.UInt32,System.UInt32)">
            <summary>
                Moves the cursor to the specified screen coordinates. If the new
                coordinates are not within the screen rectangle set by the most recent
                ClipCursor function call, the system automatically adjusts the coordinates
                so that the cursor stays within the rectangle.
            </summary>
            <param name="x">
                The new x-coordinate of the cursor, in screen coordinates.
            </param>
            <param name="y">
                The new y-coordinate of the cursor, in screen coordinates.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.SetForegroundWindow(System.IntPtr)">
            <summary>
                Brings the thread that created the specified window into the foreground and
                activates the window. Keyboard input is directed to the window, and various
                visual cues are changed for the user. The system assigns a slightly higher
                priority to the thread that created the foreground window than it does to
                other threads.
            </summary>
            <param name="hWnd">
                A handle to the window that should be activated and brought to the
                foreground.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.SetParent(System.IntPtr,System.IntPtr)">
            <summary>
                Changes the parent window of the specified child window.
            </summary>
            <param name="hWndChild">
                A handle to the child window.
            </param>
            <param name="hWndNewParent">
                A handle to the new parent window. If this parameter is
                <see langword="null"/>, the desktop window becomes the new parent window.
                If this parameter is HWND_MESSAGE, the child window becomes a message-only
                window.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.SetProcessDPIAware">
            <summary>
                Sets the process-default DPI awareness to system-DPI awareness.
            </summary>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
            ReSharper disable once InconsistentNaming
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.SetProcessWorkingSetSize(System.IntPtr,System.UIntPtr,System.UIntPtr)">
            <summary>
                Sets the minimum and maximum working set sizes for the specified process.
            </summary>
            <param name="hProcess">
                A handle to the process whose working set sizes is to be set.
                <para>
                    The handle must have the <see cref="F:SilDev.WinApi.AccessRights.ProcessSetQuota"/>
                    access right.
                </para>
            </param>
            <param name="dwMinimumWorkingSetSize">
                The minimum working set size for the process, in bytes. The virtual memory
                manager attempts to keep at least this much memory resident in the process
                whenever the process is active.
                <para>
                    This parameter must be greater than zero but less than or equal to the
                    maximum working set size. The default size is 50 pages (for example,
                    this is 204,800 bytes on systems with a 4K page size). If the value is
                    greater than zero but less than 20 pages, the minimum value is set to
                    20 pages.
                </para>
                <para>
                    If both dwMinimumWorkingSetSize and dwMaximumWorkingSetSize have the
                    value (SIZE_T)–1, the function removes as many pages as possible from
                    the working set of the specified process.
                </para>
            </param>
            <param name="dwMaximumWorkingSetSize">
                The maximum working set size for the process, in bytes. The virtual memory
                manager attempts to keep no more than this much memory resident in the
                process whenever the process is active and available memory is low.
                <para>
                    This parameter must be greater than or equal to 13 pages (for example,
                    53,248 on systems with a 4K page size), and less than the system-wide
                    maximum (number of available pages minus 512 pages). The default size
                    is 345 pages (for example, this is 1,413,120 bytes on systems with a 4K
                    page size).
                </para>
                <para>
                    If both dwMinimumWorkingSetSize and dwMaximumWorkingSetSize have the
                    value (SIZE_T)–1, the function removes as many pages as possible from
                    the working set of the specified process.
                </para>
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.SetTimer(System.IntPtr,System.UIntPtr,System.UInt32,SilDev.WinApi.TimerProc)">
            <summary>
                Creates a timer with the specified time-out value.
            </summary>
            <param name="hWnd">
                A handle to the window to be associated with the timer. This window must be
                owned by the calling thread. If a <see langword="null"/> value for hWnd is
                passed in along with an nIDEvent of an existing timer, that timer will be
                replaced in the same way that an existing non-<see langword="null"/> hWnd
                timer will be.
            </param>
            <param name="nIdEvent">
                A nonzero timer identifier. If the hWnd parameter is <see langword="null"/>
                , and the nIDEvent does not match an existing timer then it is ignored and
                a new timer ID is generated. If the hWnd parameter is not
                <see langword="null"/> and the window specified by hWnd already has a timer
                with the value nIDEvent, then the existing timer is replaced by the new
                timer. When SetTimer replaces a timer, the timer is reset. Therefore, a
                message will be sent after the current time-out value elapses, but the
                previously set time-out value is ignored. If the call is not intended to
                replace an existing timer, nIDEvent should be 0 if the hWnd is
                <see langword="null"/>.
            </param>
            <param name="uElapse">
                The time-out value, in milliseconds.
            </param>
            <param name="lpTimerFunc">
                A pointer to the function to be notified when the time-out value elapses.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.SetWindowBorderlessFullscreen(System.IntPtr,System.Boolean,System.Boolean)">
            <summary>
                Changes the position and dimensions of the specified window to fill the
                entire screen.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
            <param name="menuBar">
                <see langword="true"/> to remove an existing menu bar; otherwise,
                <see langword="false"/>.
            </param>
            <param name="extended">
                <see langword="true"/> to remove an existing double border; otherwise,
                <see langword="false"/>.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.SetWindowFullscreen(System.IntPtr)">
            <summary>
                Changes the position and dimensions of the specified window to fill the
                entire screen.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.SetWindowLong(System.IntPtr,SilDev.WinApi.WindowLongFlags,System.IntPtr)">
            <summary>
                Changes an attribute of the specified window. The function also sets the
                32-bit (long) value at the specified offset into the extra window memory.
            </summary>
            <param name="hWnd">
                A handle to the window and, indirectly, the class to which the window
                belongs.
            </param>
            <param name="nIndex">
                The zero-based offset to the value to be set. Valid values are in the range
                zero through the number of bytes of extra window memory, minus the size of
                an integer.
            </param>
            <param name="dwNewLong">
                The replacement value.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.SetWindowPlacement(System.IntPtr,SilDev.WinApi.WindowPlacement@)">
            <summary>
                Sets the show state and the restored, minimized, and maximized positions of
                the specified window.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
            <param name="lpwndpl">
                A pointer to a <see cref="T:SilDev.WinApi.WindowPlacement"/> structure that specifies the
                new show state and window positions.
                <para>
                    Before calling SetWindowPlacement, set the length member of the
                    <see cref="T:SilDev.WinApi.WindowPlacement"/> structure to sizeof(
                    <see cref="T:SilDev.WinApi.WindowPlacement"/>). SetWindowPlacement fails if the length
                    member is not set correctly.
                </para>
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.SetWindowPos(System.IntPtr,System.Drawing.Point)">
            <summary>
                Changes the position of the specified window.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
            <param name="point">
                The new position of the window.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.SetWindowPos(System.IntPtr,System.Int32,System.Int32)">
            <summary>
                Changes the position of the specified window.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
            <param name="x">
                The new position of the left side of the window.
            </param>
            <param name="y">
                The new position of the top of the window.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.SetWindowPos(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,SilDev.WinApi.SetWindowPosFlags)">
            <summary>
                Changes the size, position, and Z order of a child, pop-up, or top-level
                window. These windows are ordered according to their appearance on the
                screen. The topmost window receives the highest rank and is the first
                window in the Z order.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
            <param name="hWndInsertAfter">
                A handle to the window to precede the positioned window in the Z order.
                This parameter must be a window handle or one of the following values.
                <para>
                    HWND_BOTTOM ((HWND)1): Places the window at the bottom of the Z order.
                    If the hWnd parameter identifies a topmost window, the window loses its
                    topmost status and is placed at the bottom of all other windows.
                </para>
                <para>
                    HWND_NOTOPMOST ((HWND)-2): Places the window above all non-topmost
                    windows (that is, behind all topmost windows). This flag has no effect
                    if the window is already a non-topmost window.
                </para>
                <para>
                    HWND_TOP ((HWND)0): Places the window at the top of the Z order.
                </para>
                <para>
                    HWND_TOPMOST ((HWND)-1): Places the window above all non-topmost
                    windows. The window maintains its topmost position even when it is
                    deactivated.
                </para>
            </param>
            <param name="x">
                The new position of the left side of the window, in client coordinates.
            </param>
            <param name="y">
                The new position of the top of the window, in client coordinates.
            </param>
            <param name="cx">
                The new width of the window, in pixels.
            </param>
            <param name="cy">
                The new height of the window, in pixels.
            </param>
            <param name="uFlags">
                The window sizing and positioning flags.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.SetWindowsHookEx(SilDev.WinApi.Win32HookFlags,SilDev.WinApi.HookProc,System.IntPtr,System.Int32)">
            <summary>
                Installs an application-defined hook procedure into a hook chain. You would
                install a hook procedure to monitor the system for certain types of events.
                These events are associated either with a specific thread or with all
                threads in the same desktop as the calling thread.
            </summary>
            <param name="idHook">
                The type of hook procedure to be installed.
            </param>
            <param name="lpfn">
                A pointer to the hook procedure. If the dwThreadId parameter is zero or
                specifies the identifier of a thread created by a different process, the
                lpfn parameter must point to a hook procedure in a DLL. Otherwise, lpfn can
                point to a hook procedure in the code associated with the current process.
            </param>
            <param name="hMod">
                A handle to the DLL containing the hook procedure pointed to by the lpfn
                parameter. The hMod parameter must be set to <see langword="null"/> if the
                dwThreadId parameter specifies a thread created by the current process and
                if the hook procedure is within the code associated with the current
                process.
            </param>
            <param name="dwThreadId">
                The identifier of the thread with which the hook procedure is to be
                associated. For desktop apps, if this parameter is zero, the hook procedure
                is associated with all existing threads running in the same desktop as the
                calling thread. For Windows Store apps, see the Remarks section.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.SetWindowSize(System.IntPtr,System.Drawing.Size)">
            <summary>
                Changes the dimensions of the specified window.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
            <param name="size">
                The new size of the window.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.SetWindowSize(System.IntPtr,System.Int32,System.Int32)">
            <summary>
                Changes the dimensions of the specified window.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
            <param name="width">
                The new width of the window.
            </param>
            <param name="height">
                The new height of the window.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.SetWindowText(System.IntPtr,System.String)">
            <summary>
                Changes the text of the specified window's title bar (if it has one). If
                the specified window is a control, the text of the control is changed.
                However, SetWindowText cannot change the text of a control in another
                application.
            </summary>
            <param name="hWnd">
                A handle to the window or control whose text is to be changed.
            </param>
            <param name="lpString">
                The new title or control text.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.SetWindowTheme(System.IntPtr,System.String,System.String)">
            <summary>
                Causes a window to use a different set of visual style information than its
                class normally uses.
            </summary>
            <param name="hWnd">
                A handle to the window whose visual style information is to be changed.
            </param>
            <param name="pszSubAppName">
                Pointer to a string that contains the application name to use in place of
                the calling application's name. If this parameter is <see langword="null"/>
                , the calling application's name is used.
            </param>
            <param name="pszSubIdList">
                Pointer to a string that contains a semicolon-separated list of CLSID names
                to use in place of the actual list passed by the window's class. If this
                parameter is <see langword="null"/>, the ID list from the calling class is
                used.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.SetWindowThemeAttribute(System.IntPtr,SilDev.WinApi.WindowThemeAttributeOptions@)">
            <summary>
                Sets attributes to control how visual styles are applied to a specified
                window.
            </summary>
            <param name="hWnd">
                A handle to a window to apply changes to.
            </param>
            <param name="pvAttribute">
                A pointer that specifies attributes to set.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.SHAppBarMessage(SilDev.WinApi.AppBarMessageOption,SilDev.WinApi.AppBarData@)">
            <summary>
                Sends an appbar message to the system.
            </summary>
            <param name="dwMessage">
                Appbar message value to send.
            </param>
            <param name="pData">
                A pointer to an <see cref="T:SilDev.WinApi.AppBarData"/> structure. The content of the
                structure on entry and on exit depends on the value set in the dwMessage
                parameter. See the individual message pages for specifics.
            </param>
            ReSharper disable once InconsistentNaming
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.ShellExecute(System.IntPtr,System.String,System.String,System.String,System.String,SilDev.WinApi.ShowWindowFlags)">
            <summary>
                Performs an operation on a specified file.
            </summary>
            <param name="hWnd">
                A handle to the parent window used for displaying a UI or error messages.
                This value can be <see langword="null"/> if the operation is not associated
                with a window.
            </param>
            <param name="lpOperation">
                A pointer to a null-terminated string, referred to in this case as a verb,
                that specifies the action to be performed. The set of available verbs
                depends on the particular file or folder. Generally, the actions available
                from an object's shortcut menu are available verbs.
            </param>
            <param name="lpFile">
                A pointer to a null-terminated string that specifies the file or object on
                which to execute the specified verb. To specify a Shell namespace object,
                pass the fully qualified parse name. Note that not all verbs are supported
                on all objects. For example, not all document types support the "print"
                verb. If a relative path is used for the lpDirectory parameter do not use a
                relative path for lpFile.
            </param>
            <param name="lpParameters">
                If lpFile specifies an executable file, this parameter is a pointer to a
                null-terminated string that specifies the parameters to be passed to the
                application. The format of this string is determined by the verb that is to
                be invoked. If lpFile specifies a document file, lpParameters should be
                <see langword="null"/>.
            </param>
            <param name="lpDirectory">
                A pointer to a null-terminated string that specifies the default (working)
                directory for the action. If this value is <see langword="null"/>, the
                current working directory is used. If a relative path is provided at
                lpFile, do not use a relative path for lpDirectory.
            </param>
            <param name="nShowCmd">
                The flags that specify how an application is to be displayed when it is
                opened. If lpFile specifies a document file, the flag is simply passed to
                the associated application. It is up to the application to decide how to
                handle it.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.ShowScrollBar(System.IntPtr,SilDev.WinApi.ShowScrollBarOption,System.Boolean)">
            <summary>
                The ShowScrollBar function shows or hides the specified scroll bar.
            </summary>
            <param name="hWnd">
                Handle to a scroll bar control or a window with a standard scroll bar,
                depending on the value of the wBar parameter.
            </param>
            <param name="wBar">
                Specifies the scroll bar(s) to be shown or hidden.
            </param>
            <param name="bShow">
                Specifies whether the scroll bar is shown or hidden. If this parameter is
                <see langword="true"/>, the scroll bar is shown; otherwise, it is hidden.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.ShowWindow(System.IntPtr)">
            <summary>
                Activates the window and displays it.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.ShowWindow(System.IntPtr,SilDev.WinApi.ShowWindowFlags)">
            <summary>
                Sets the specified window's show state.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
            <param name="nCmdShow">
                Controls how the window is to be shown. This parameter is ignored the first
                time an application calls ShowWindow, if the program that launched the
                application provides a STARTUPINFO structure. Otherwise, the first time
                ShowWindow is called, the value should be the value obtained by the WinMain
                function in its nCmdShow parameter.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.ShowWindowAsync(System.IntPtr,SilDev.WinApi.ShowWindowFlags)">
            <summary>
                Sets the show state of a window without waiting for the operation to
                complete.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
            <param name="nCmdShow">
                Controls how the window is to be shown. For a list of possible values, see
                the description of the ShowWindow function.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.TerminateProcess(System.IntPtr,System.UInt32)">
            <summary>
                Terminates the specified process and all of its threads.
            </summary>
            <param name="hProcess">
                A handle to the process to be terminated.
                <para>
                    The handle must have the <see cref="F:SilDev.WinApi.AccessRights.ProcessTerminate"/>
                    access right.
                </para>
            </param>
            <param name="uExitCode">
                The exit code to be used by the process and threads terminated as a result
                of this call. Use the GetExitCodeProcess function to retrieve a process's
                exit value. Use the GetExitCodeThread function to retrieve a thread's exit
                value.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.UnhookWindowsHookEx(System.IntPtr)">
            <summary>
                Removes a hook procedure installed in a hook chain by the SetWindowsHookEx
                function.
            </summary>
            <param name="hhk">
                A handle to the hook to be removed. This parameter is a hook handle
                obtained by a previous call SetWindowsHookEx.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.UpdateWindow(System.IntPtr)">
            <summary>
                The UpdateWindow function updates the client area of the specified window
                by sending a WM_PAINT message to the window if the window's update region
                is not empty. The function sends a WM_PAINT message directly to the window
                procedure of the specified window, bypassing the application queue. If the
                update region is empty, no message is sent.
            </summary>
            <param name="hWnd">
                Handle to the window to be updated.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.VirtualAllocEx(System.IntPtr,System.IntPtr,System.IntPtr,SilDev.WinApi.MemAllocTypes,SilDev.WinApi.MemProtectFlags)">
            <summary>
                Reserves, commits, or changes the state of a region of memory within the
                virtual address space of a specified process. The function initializes the
                memory it allocates to zero.
            </summary>
            <param name="hProcess">
                The handle to a process. The function allocates memory within the virtual
                address space of this process.
                <para>
                    The handle must have the <see cref="F:SilDev.WinApi.AccessRights.ProcessVmOperation"/>
                    access right.
                </para>
            </param>
            <param name="lpAddress">
                The pointer that specifies a desired starting address for the region of
                pages that you want to allocate.
            </param>
            <param name="dwSize">
                The size of the region of memory to allocate, in bytes.
            </param>
            <param name="flAllocationType">
                The type of memory allocation. This parameter must contain one of the
                following values.
            </param>
            <param name="flProtect">
                The memory protection for the region of pages to be allocated.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.VirtualFreeEx(System.IntPtr,System.IntPtr,System.IntPtr,SilDev.WinApi.MemFreeType)">
            <summary>
                Releases, decommits, or releases and decommits a region of memory within
                the virtual address space of a specified process.
            </summary>
            <param name="hProcess">
                The handle to a process. The function allocates memory within the virtual
                address space of this process.
                <para>
                    The handle must have the <see cref="F:SilDev.WinApi.AccessRights.ProcessVmOperation"/>
                    access right.
                </para>
            </param>
            <param name="lpAddress">
                A pointer to the starting address of the region of memory to be freed.
                <para>
                    If the dwFreeType parameter is <see cref="F:SilDev.WinApi.MemAllocTypes.Release"/>,
                    lpAddress must be the base address returned by the VirtualAllocEx
                    function when the region is reserved.
                </para>
            </param>
            <param name="dwSize">
                The size of the region of memory to free, in bytes.
                <para>
                    If the dwFreeType parameter is <see cref="F:SilDev.WinApi.MemAllocTypes.Release"/>,
                    dwSize must be 0 (zero). The function frees the entire region that is
                    reserved in the initial allocation call to VirtualAllocEx.
                </para>
                <para>
                    If dwFreeType is <see cref="F:SilDev.WinApi.MemAllocTypes.Decommit"/>, the function
                    decommits all memory pages that contain one or more bytes in the range
                    from the lpAddress parameter to (lpAddress+dwSize). This means, for
                    example, that a 2-byte region of memory that straddles a page boundary
                    causes both pages to be decommitted. If lpAddress is the base address
                    returned by VirtualAllocEx and dwSize is 0 (zero), the function
                    decommits the entire region that is allocated by VirtualAllocEx. After
                    that, the entire region is in the reserved state.
                </para>
            </param>
            <param name="dwFreeType">
                The type of free operation.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.WindowIsOutOfScreenArea(System.IntPtr,System.Drawing.Rectangle@)">
            <summary>
                Determines whether the specified window is outside the visible screen area.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
            <param name="vRect">
                A pointer to a <see cref="T:System.Drawing.Rectangle"/> structure that receives the best
                screen coordinates of the upper-left and lower-right corners of the window.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.WindowIsOutOfVisibleScreenArea(System.IntPtr)">
            <summary>
                Determines whether the specified window is outside the visible screen area.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.WriteProcessMemory(System.IntPtr,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr@)">
            <summary>
                Writes data to an area of memory in a specified process. The entire area to
                be written to must be accessible or the operation fails.
            </summary>
            <param name="hProcess">
                A handle to the process memory to be modified. The handle must have
                <see cref="F:SilDev.WinApi.AccessRights.ProcessVmWrite"/> and
                <see cref="F:SilDev.WinApi.AccessRights.ProcessVmOperation"/> access to the process.
            </param>
            <param name="lpBaseAddress">
                A pointer to the base address in the specified process to which data is
                written. Before data transfer occurs, the system verifies that all data in
                the base address and memory of the specified size is accessible for write
                access, and if it is not accessible, the function fails.
            </param>
            <param name="lpBuffer">
                A pointer to the buffer that contains data to be written in the address
                space of the specified process.
            </param>
            <param name="nSize">
                The number of bytes to be written to the specified process.
            </param>
            <param name="lpNumberOfBytesWritten">
                A pointer to a variable that receives the number of bytes transferred into
                the specified process. This parameter is optional. If
                lpNumberOfBytesWritten is <see langword="null"/>, the parameter is ignored.
            </param>
        </member>
        <member name="T:SilDev.WinApi.DllNames">
            <summary>
                Contains file name constants of the used Windows dynamic-link library (DLL)
                files.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.DllNames.Kernel32">
            <summary>
                The Windows NT BASE API Client DLL file name.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.DllNames.Ntdll">
            <summary>
                The NT Layer DLL file name.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.DllNames.Psapi">
            <summary>
                The Process Status Helper DLL file name.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.DllNames.Shell32">
            <summary>
                The Windows Shell Common DLL file name.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.DllNames.User32">
            <summary>
                The Multi-User Windows USER API Client DLL file name.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.AppBarData">
            <summary>
                Contains information about a system appbar message.
            </summary>
        </member>
        <member name="P:SilDev.WinApi.AppBarData.CbSize">
            <summary>
                The size of the structure, in bytes.
            </summary>
        </member>
        <member name="P:SilDev.WinApi.AppBarData.HWnd">
            <summary>
                The handle to the appbar window. Not all messages use this member. See the
                individual message page to see if you need to provide an hWind value.
            </summary>
        </member>
        <member name="P:SilDev.WinApi.AppBarData.UCallbackMessage">
            <summary>
                An application-defined message identifier. The application uses the
                specified identifier for notification messages that it sends to the appbar
                identified by the hWnd member.
            </summary>
        </member>
        <member name="P:SilDev.WinApi.AppBarData.UEdge">
            <summary>
                A value that specifies an edge of the screen.
                <para>
                    This member is used when sending one of these messages:
                    <see cref="F:SilDev.WinApi.AppBarMessageOption.GetAutoHideBar"/>
                    <see cref="F:SilDev.WinApi.AppBarMessageOption.SetAutoHideBar"/>
                    <see cref="F:SilDev.WinApi.AppBarMessageOption.GetAutoHideBarEx"/>
                    <see cref="F:SilDev.WinApi.AppBarMessageOption.SetAutoHideBarEx"/>
                    <see cref="F:SilDev.WinApi.AppBarMessageOption.QueryPos"/>
                    <see cref="F:SilDev.WinApi.AppBarMessageOption.SetPos"/>.
                </para>
            </summary>
        </member>
        <member name="P:SilDev.WinApi.AppBarData.Rect">
            <summary>
                A <see cref="T:System.Drawing.Rectangle"/> structure whose use varies depending on the
                message:
                <para>
                    <see cref="F:SilDev.WinApi.AppBarMessageOption.GetTaskBarPos"/>,
                    <see cref="F:SilDev.WinApi.AppBarMessageOption.QueryPos"/>,
                    <see cref="F:SilDev.WinApi.AppBarMessageOption.SetPos"/>: The bounding rectangle, in
                    screen coordinates, of an appbar or the Windows taskbar.
                </para>
                <para>
                    <see cref="F:SilDev.WinApi.AppBarMessageOption.GetAutoHideBarEx"/>,
                    <see cref="F:SilDev.WinApi.AppBarMessageOption.SetAutoHideBarEx"/>,
                    <see cref="F:SilDev.WinApi.AppBarMessageOption.SetPos"/>: The monitor on which the
                    operation is being performed.
                </para>
            </summary>
        </member>
        <member name="P:SilDev.WinApi.AppBarData.LParam">
            <summary>
                A message-dependent value. This member is used with these messages:
                <para>
                    <see cref="F:SilDev.WinApi.AppBarMessageOption.SetAutoHideBar"/>: Registers or
                    unregisters an autohide appbar for a given edge of the screen. If the
                    system has multiple monitors, the monitor that contains the primary
                    taskbar is used.
                </para>
                <para>
                    <see cref="F:SilDev.WinApi.AppBarMessageOption.SetAutoHideBarEx"/>: Registers or
                    unregisters an autohide appbar for a given edge of the screen. This
                    message extends <see cref="F:SilDev.WinApi.AppBarMessageOption.SetAutoHideBar"/> by
                    enabling you to specify a particular monitor, for use in multiple
                    monitor situations.
                </para>
                <para>
                    <see cref="F:SilDev.WinApi.AppBarMessageOption.SetState"/>: Sets the autohide and
                    always-on-top states of the Windows taskbar.
                </para>
            </summary>
        </member>
        <member name="M:SilDev.WinApi.AppBarData.Dispose">
            <summary>
                Releases all resources used by this <see cref="T:SilDev.WinApi.AppBarData"/>.
            </summary>
        </member>
        <member name="M:SilDev.WinApi.AppBarData.Equals(SilDev.WinApi.AppBarData)">
            <summary>
                Determines whether this instance have same values as the specified
                <see cref="T:SilDev.WinApi.AppBarData"/> instance.
            </summary>
            <param name="other">
                The <see cref="T:SilDev.WinApi.AppBarData"/> instance to compare.
            </param>
        </member>
        <member name="M:SilDev.WinApi.AppBarData.Equals(System.Object)">
            <summary>
                Determines whether this instance have same values as the specified
                <see cref="T:System.Object"/>.
            </summary>
            <param name="other">
                The  <see cref="T:System.Object"/> to compare.
            </param>
        </member>
        <member name="M:SilDev.WinApi.AppBarData.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:SilDev.WinApi.AppBarData.op_Equality(SilDev.WinApi.AppBarData,SilDev.WinApi.AppBarData)">
            <summary>
                Determines whether two specified <see cref="T:SilDev.WinApi.AppBarData"/> instances have
                same values.
            </summary>
            <param name="left">
                The first <see cref="T:SilDev.WinApi.AppBarData"/> instance to compare.
            </param>
            <param name="right">
                The second <see cref="T:SilDev.WinApi.AppBarData"/> instance to compare.
            </param>
        </member>
        <member name="M:SilDev.WinApi.AppBarData.op_Inequality(SilDev.WinApi.AppBarData,SilDev.WinApi.AppBarData)">
            <summary>
                Determines whether two specified <see cref="T:SilDev.WinApi.AppBarData"/> instances have
                different values.
            </summary>
            <param name="left">
                The first <see cref="T:SilDev.WinApi.AppBarData"/> instance to compare.
            </param>
            <param name="right">
                The second <see cref="T:SilDev.WinApi.AppBarData"/> instance to compare.
            </param>
        </member>
        <member name="T:SilDev.WinApi.CallWndProcRet">
            <summary>
                Defines the message parameters passed to a
                <see cref="F:SilDev.WinApi.Win32HookFlags.WhCallWndProcRet"/> hook procedure.
            </summary>
        </member>
        <member name="P:SilDev.WinApi.CallWndProcRet.LResult">
            <summary>
                The return value of the window procedure that processed the message
                specified by the message value.
            </summary>
        </member>
        <member name="P:SilDev.WinApi.CallWndProcRet.LParam">
            <summary>
                Additional information about the message. The exact meaning depends on the
                message value.
            </summary>
        </member>
        <member name="P:SilDev.WinApi.CallWndProcRet.WParam">
            <summary>
                Additional information about the message. The exact meaning depends on the
                message value.
            </summary>
        </member>
        <member name="P:SilDev.WinApi.CallWndProcRet.Message">
            <summary>
                The message value.
            </summary>
        </member>
        <member name="P:SilDev.WinApi.CallWndProcRet.HWnd">
            <summary>
                A handle to the window that processed the message specified by the message
                value.
            </summary>
        </member>
        <member name="M:SilDev.WinApi.CallWndProcRet.Equals(SilDev.WinApi.CallWndProcRet)">
            <summary>
                Determines whether this instance have same values as the specified
                <see cref="T:SilDev.WinApi.CallWndProcRet"/> instance.
            </summary>
            <param name="other">
                The <see cref="T:SilDev.WinApi.CallWndProcRet"/> instance to compare.
            </param>
        </member>
        <member name="M:SilDev.WinApi.CallWndProcRet.Equals(System.Object)">
            <summary>
                Determines whether this instance have same values as the specified
                <see cref="T:System.Object"/>.
            </summary>
            <param name="other">
                The  <see cref="T:System.Object"/> to compare.
            </param>
        </member>
        <member name="M:SilDev.WinApi.CallWndProcRet.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:SilDev.WinApi.CallWndProcRet.op_Equality(SilDev.WinApi.CallWndProcRet,SilDev.WinApi.CallWndProcRet)">
            <summary>
                Determines whether two specified <see cref="T:SilDev.WinApi.CallWndProcRet"/> instances
                have same values.
            </summary>
            <param name="left">
                The first <see cref="T:SilDev.WinApi.CallWndProcRet"/> instance to compare.
            </param>
            <param name="right">
                The second <see cref="T:SilDev.WinApi.CallWndProcRet"/> instance to compare.
            </param>
        </member>
        <member name="M:SilDev.WinApi.CallWndProcRet.op_Inequality(SilDev.WinApi.CallWndProcRet,SilDev.WinApi.CallWndProcRet)">
            <summary>
                Determines whether two specified <see cref="T:SilDev.WinApi.CallWndProcRet"/> instances
                have different values.
            </summary>
            <param name="left">
                The first <see cref="T:SilDev.WinApi.CallWndProcRet"/> instance to compare.
            </param>
            <param name="right">
                The second <see cref="T:SilDev.WinApi.CallWndProcRet"/> instance to compare.
            </param>
        </member>
        <member name="T:SilDev.WinApi.CopyData">
            <summary>
                Contains data to be passed to another application by the
                <see cref="F:SilDev.WinApi.WindowMenuFlags.WmCopyData"/> message.
            </summary>
        </member>
        <member name="P:SilDev.WinApi.CopyData.DwData">
            <summary>
                The data to be passed to the receiving application.
            </summary>
        </member>
        <member name="P:SilDev.WinApi.CopyData.CbData">
            <summary>
                The size, in bytes, of the data pointed to by the lpData member.
            </summary>
        </member>
        <member name="P:SilDev.WinApi.CopyData.LpData">
            <summary>
                The data to be passed to the receiving application. This member can be
                <see langword="null"/>.
            </summary>
        </member>
        <member name="M:SilDev.WinApi.CopyData.Dispose">
            <summary>
                Releases all resources used by this <see cref="T:SilDev.WinApi.CopyData"/>.
            </summary>
        </member>
        <member name="M:SilDev.WinApi.CopyData.Equals(SilDev.WinApi.CopyData)">
            <summary>
                Determines whether this instance have same values as the specified
                <see cref="T:SilDev.WinApi.CopyData"/> instance.
            </summary>
            <param name="other">
                The <see cref="T:SilDev.WinApi.CopyData"/> instance to compare.
            </param>
        </member>
        <member name="M:SilDev.WinApi.CopyData.Equals(System.Object)">
            <summary>
                Determines whether this instance have same values as the specified
                <see cref="T:System.Object"/>.
            </summary>
            <param name="other">
                The  <see cref="T:System.Object"/> to compare.
            </param>
        </member>
        <member name="M:SilDev.WinApi.CopyData.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:SilDev.WinApi.CopyData.op_Equality(SilDev.WinApi.CopyData,SilDev.WinApi.CopyData)">
            <summary>
                Determines whether two specified <see cref="T:SilDev.WinApi.CopyData"/> instances have same
                values.
            </summary>
            <param name="left">
                The first <see cref="T:SilDev.WinApi.CopyData"/> instance to compare.
            </param>
            <param name="right">
                The second <see cref="T:SilDev.WinApi.CopyData"/> instance to compare.
            </param>
        </member>
        <member name="M:SilDev.WinApi.CopyData.op_Inequality(SilDev.WinApi.CopyData,SilDev.WinApi.CopyData)">
            <summary>
                Determines whether two specified <see cref="T:SilDev.WinApi.CopyData"/> instances have
                different values.
            </summary>
            <param name="left">
                The first <see cref="T:SilDev.WinApi.CopyData"/> instance to compare.
            </param>
            <param name="right">
                The second <see cref="T:SilDev.WinApi.CopyData"/> instance to compare.
            </param>
        </member>
        <member name="T:SilDev.WinApi.DeviceInput">
            <summary>
                Used by <see cref="M:SilDev.WinApi.NativeMethods.SendInput(System.UInt32,SilDev.WinApi.DeviceInput[],System.Int32)"/> to
                store information for synthesizing input events such as keystrokes, mouse
                movement, and mouse clicks.
            </summary>
        </member>
        <member name="P:SilDev.WinApi.DeviceInput.Type">
            <summary>
                The type of the input event. This member can be one of the following
                values.
                <para>
                    0: The event is a mouse event. Use the mi structure of the union.
                </para>
                <para>
                    1: The event is a keyboard event. Use the ki structure of the union.
                </para>
                <para>
                    2: The event is a hardware event. Use the hi structure of the union.
                </para>
            </summary>
        </member>
        <member name="P:SilDev.WinApi.DeviceInput.Data">
            <summary>
                The information about a simulated mouse, keyboard or hardware event.
            </summary>
        </member>
        <member name="P:SilDev.WinApi.DeviceInput.Size">
            <summary>
                Gets the size of the <see cref="T:SilDev.WinApi.DeviceInput"/> structure in bytes.
            </summary>
        </member>
        <member name="M:SilDev.WinApi.DeviceInput.Equals(SilDev.WinApi.DeviceInput)">
            <summary>
                Determines whether this instance have same values as the specified
                <see cref="T:SilDev.WinApi.DeviceInput"/> instance.
            </summary>
            <param name="other">
                The <see cref="T:SilDev.WinApi.DeviceInput"/> instance to compare.
            </param>
        </member>
        <member name="M:SilDev.WinApi.DeviceInput.Equals(System.Object)">
            <summary>
                Determines whether this instance have same values as the specified
                <see cref="T:System.Object"/>.
            </summary>
            <param name="other">
                The  <see cref="T:System.Object"/> to compare.
            </param>
        </member>
        <member name="M:SilDev.WinApi.DeviceInput.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:SilDev.WinApi.DeviceInput.op_Equality(SilDev.WinApi.DeviceInput,SilDev.WinApi.DeviceInput)">
            <summary>
                Determines whether two specified <see cref="T:SilDev.WinApi.DeviceInput"/> instances have
                same values.
            </summary>
            <param name="left">
                The first <see cref="T:SilDev.WinApi.DeviceInput"/> instance to compare.
            </param>
            <param name="right">
                The second <see cref="T:SilDev.WinApi.DeviceInput"/> instance to compare.
            </param>
        </member>
        <member name="M:SilDev.WinApi.DeviceInput.op_Inequality(SilDev.WinApi.DeviceInput,SilDev.WinApi.DeviceInput)">
            <summary>
                Determines whether two specified <see cref="T:SilDev.WinApi.DeviceInput"/> instances have
                different values.
            </summary>
            <param name="left">
                The first <see cref="T:SilDev.WinApi.DeviceInput"/> instance to compare.
            </param>
            <param name="right">
                The second <see cref="T:SilDev.WinApi.DeviceInput"/> instance to compare.
            </param>
        </member>
        <member name="T:SilDev.WinApi.LuId">
            <summary>
                Contains the locally unique identifier (LUID).
            </summary>
        </member>
        <member name="P:SilDev.WinApi.LuId.LowPart">
            <summary>
                Low-order bits.
            </summary>
        </member>
        <member name="P:SilDev.WinApi.LuId.HighPart">
            <summary>
                High-order bits.
            </summary>
        </member>
        <member name="M:SilDev.WinApi.LuId.Equals(SilDev.WinApi.LuId)">
            <summary>
                Determines whether this instance have same values as the specified
                <see cref="T:SilDev.WinApi.LuId"/> instance.
            </summary>
            <param name="other">
                The <see cref="T:SilDev.WinApi.LuId"/> instance to compare.
            </param>
        </member>
        <member name="M:SilDev.WinApi.LuId.Equals(System.Object)">
            <summary>
                Determines whether this instance have same values as the specified
                <see cref="T:System.Object"/>.
            </summary>
            <param name="other">
                The  <see cref="T:System.Object"/> to compare.
            </param>
        </member>
        <member name="M:SilDev.WinApi.LuId.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:SilDev.WinApi.LuId.op_Equality(SilDev.WinApi.LuId,SilDev.WinApi.LuId)">
            <summary>
                Determines whether two specified <see cref="T:SilDev.WinApi.LuId"/> instances have same
                values.
            </summary>
            <param name="left">
                The first <see cref="T:SilDev.WinApi.LuId"/> instance to compare.
            </param>
            <param name="right">
                The second <see cref="T:SilDev.WinApi.LuId"/> instance to compare.
            </param>
        </member>
        <member name="M:SilDev.WinApi.LuId.op_Inequality(SilDev.WinApi.LuId,SilDev.WinApi.LuId)">
            <summary>
                Determines whether two specified <see cref="T:SilDev.WinApi.LuId"/> instances have
                different values.
            </summary>
            <param name="left">
                The first <see cref="T:SilDev.WinApi.LuId"/> instance to compare.
            </param>
            <param name="right">
                The second <see cref="T:SilDev.WinApi.LuId"/> instance to compare.
            </param>
        </member>
        <member name="T:SilDev.WinApi.LuIdAndAttributes">
            <summary>
                Represents a locally unique identifier (LUID) and its attributes.
            </summary>
        </member>
        <member name="P:SilDev.WinApi.LuIdAndAttributes.Luid">
            <summary>
                Specifies an <see cref="T:SilDev.WinApi.LuId"/> value.
            </summary>
        </member>
        <member name="P:SilDev.WinApi.LuIdAndAttributes.Attributes">
            <summary>
                Specifies attributes of the <see cref="T:SilDev.WinApi.LuId"/>. This value contains up to
                32 one-bit flags. Its meaning is dependent on the definition and use of the
                <see cref="T:SilDev.WinApi.LuId"/>.
            </summary>
        </member>
        <member name="M:SilDev.WinApi.LuIdAndAttributes.Equals(SilDev.WinApi.LuIdAndAttributes)">
            <summary>
                Determines whether this instance have same values as the specified
                <see cref="T:SilDev.WinApi.LuIdAndAttributes"/> instance.
            </summary>
            <param name="other">
                The <see cref="T:SilDev.WinApi.LuIdAndAttributes"/> instance to compare.
            </param>
        </member>
        <member name="M:SilDev.WinApi.LuIdAndAttributes.Equals(System.Object)">
            <summary>
                Determines whether this instance have same values as the specified
                <see cref="T:System.Object"/>.
            </summary>
            <param name="other">
                The  <see cref="T:System.Object"/> to compare.
            </param>
        </member>
        <member name="M:SilDev.WinApi.LuIdAndAttributes.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:SilDev.WinApi.LuIdAndAttributes.op_Equality(SilDev.WinApi.LuIdAndAttributes,SilDev.WinApi.LuIdAndAttributes)">
            <summary>
                Determines whether two specified <see cref="T:SilDev.WinApi.LuIdAndAttributes"/> instances
                have same values.
            </summary>
            <param name="left">
                The first <see cref="T:SilDev.WinApi.LuIdAndAttributes"/> instance to compare.
            </param>
            <param name="right">
                The second <see cref="T:SilDev.WinApi.LuIdAndAttributes"/> instance to compare.
            </param>
        </member>
        <member name="M:SilDev.WinApi.LuIdAndAttributes.op_Inequality(SilDev.WinApi.LuIdAndAttributes,SilDev.WinApi.LuIdAndAttributes)">
            <summary>
                Determines whether two specified <see cref="T:SilDev.WinApi.LuIdAndAttributes"/> instances
                have different values.
            </summary>
            <param name="left">
                The first <see cref="T:SilDev.WinApi.LuIdAndAttributes"/> instance to compare.
            </param>
            <param name="right">
                The second <see cref="T:SilDev.WinApi.LuIdAndAttributes"/> instance to compare.
            </param>
        </member>
        <member name="T:SilDev.WinApi.MouseInput">
            <summary>
                Stores information about a simulated mouse event.
            </summary>
        </member>
        <member name="P:SilDev.WinApi.MouseInput.X">
            <summary>
                The absolute position of the mouse, or the amount of motion since the last
                mouse event was generated, depending on the value of the dwFlags member.
                Absolute data is specified as the x coordinate of the mouse; relative data
                is specified as the number of pixels moved.
            </summary>
        </member>
        <member name="P:SilDev.WinApi.MouseInput.Y">
            <summary>
                The absolute position of the mouse, or the amount of motion since the last
                mouse event was generated, depending on the value of the dwFlags member.
                Absolute data is specified as the y coordinate of the mouse; relative data
                is specified as the number of pixels moved.
            </summary>
        </member>
        <member name="P:SilDev.WinApi.MouseInput.MouseData">
            <summary>
                If dwFlags contains MOUSEEVENTF_WHEEL, then mouseData specifies the amount
                of wheel movement. A positive value indicates that the wheel was rotated
                forward, away from the user; a negative value indicates that the wheel was
                rotated backward, toward the user. One wheel click is defined as
                WHEEL_DELTA, which is 120.
            </summary>
        </member>
        <member name="P:SilDev.WinApi.MouseInput.Flags">
            <summary>
                A set of bit flags that specify various aspects of mouse motion and button
                clicks. The bits in this member can be any reasonable combination of the
                following values.
            </summary>
        </member>
        <member name="P:SilDev.WinApi.MouseInput.Time">
            <summary>
                The time stamp for the event, in milliseconds. If this parameter is 0, the
                system will provide its own time stamp.
            </summary>
        </member>
        <member name="P:SilDev.WinApi.MouseInput.ExtraInfo">
            <summary>
                An additional value associated with the mouse event. An application calls
                GetMessageExtraInfo to obtain this extra information.
            </summary>
        </member>
        <member name="M:SilDev.WinApi.MouseInput.Equals(SilDev.WinApi.MouseInput)">
            <summary>
                Determines whether this instance have same values as the specified
                <see cref="T:SilDev.WinApi.MouseInput"/> instance.
            </summary>
            <param name="other">
                The <see cref="T:SilDev.WinApi.MouseInput"/> instance to compare.
            </param>
        </member>
        <member name="M:SilDev.WinApi.MouseInput.Equals(System.Object)">
            <summary>
                Determines whether this instance have same values as the specified
                <see cref="T:System.Object"/>.
            </summary>
            <param name="other">
                The  <see cref="T:System.Object"/> to compare.
            </param>
        </member>
        <member name="M:SilDev.WinApi.MouseInput.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:SilDev.WinApi.MouseInput.op_Equality(SilDev.WinApi.MouseInput,SilDev.WinApi.MouseInput)">
            <summary>
                Determines whether two specified <see cref="T:SilDev.WinApi.MouseInput"/> instances have
                same values.
            </summary>
            <param name="left">
                The first <see cref="T:SilDev.WinApi.MouseInput"/> instance to compare.
            </param>
            <param name="right">
                The second <see cref="T:SilDev.WinApi.MouseInput"/> instance to compare.
            </param>
        </member>
        <member name="M:SilDev.WinApi.MouseInput.op_Inequality(SilDev.WinApi.MouseInput,SilDev.WinApi.MouseInput)">
            <summary>
                Determines whether two specified <see cref="T:SilDev.WinApi.MouseInput"/> instances have
                different values.
            </summary>
            <param name="left">
                The first <see cref="T:SilDev.WinApi.MouseInput"/> instance to compare.
            </param>
            <param name="right">
                The second <see cref="T:SilDev.WinApi.MouseInput"/> instance to compare.
            </param>
        </member>
        <member name="T:SilDev.WinApi.MouseKeyboardHardwareInput">
            <summary>
                Stores information about a simulated mouse, keyboard or hardware event.
            </summary>
        </member>
        <member name="P:SilDev.WinApi.MouseKeyboardHardwareInput.Mouse">
            <summary>
                Gets or sets the mouse input events.
            </summary>
        </member>
        <member name="M:SilDev.WinApi.MouseKeyboardHardwareInput.Equals(SilDev.WinApi.MouseKeyboardHardwareInput)">
            <summary>
                Determines whether this instance have same values as the specified
                <see cref="T:SilDev.WinApi.MouseKeyboardHardwareInput"/> instance.
            </summary>
            <param name="other">
                The <see cref="T:SilDev.WinApi.MouseKeyboardHardwareInput"/> instance to compare.
            </param>
        </member>
        <member name="M:SilDev.WinApi.MouseKeyboardHardwareInput.Equals(System.Object)">
            <summary>
                Determines whether this instance have same values as the specified
                <see cref="T:System.Object"/>.
            </summary>
            <param name="other">
                The  <see cref="T:System.Object"/> to compare.
            </param>
        </member>
        <member name="M:SilDev.WinApi.MouseKeyboardHardwareInput.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:SilDev.WinApi.MouseKeyboardHardwareInput.op_Equality(SilDev.WinApi.MouseKeyboardHardwareInput,SilDev.WinApi.MouseKeyboardHardwareInput)">
            <summary>
                Determines whether two specified <see cref="T:SilDev.WinApi.MouseKeyboardHardwareInput"/>
                instances have same values.
            </summary>
            <param name="left">
                The first <see cref="T:SilDev.WinApi.MouseKeyboardHardwareInput"/> instance to compare.
            </param>
            <param name="right">
                The second <see cref="T:SilDev.WinApi.MouseKeyboardHardwareInput"/> instance to compare.
            </param>
        </member>
        <member name="M:SilDev.WinApi.MouseKeyboardHardwareInput.op_Inequality(SilDev.WinApi.MouseKeyboardHardwareInput,SilDev.WinApi.MouseKeyboardHardwareInput)">
            <summary>
                Determines whether two specified <see cref="T:SilDev.WinApi.MouseKeyboardHardwareInput"/>
                instances have different values.
            </summary>
            <param name="left">
                The first <see cref="T:SilDev.WinApi.MouseKeyboardHardwareInput"/> instance to compare.
            </param>
            <param name="right">
                The second <see cref="T:SilDev.WinApi.MouseKeyboardHardwareInput"/> instance to compare.
            </param>
        </member>
        <member name="T:SilDev.WinApi.ProcessBasicInformation">
            <summary>
                Contains basic information about a process.
            </summary>
        </member>
        <member name="P:SilDev.WinApi.ProcessBasicInformation.ExitStatus">
            <summary>
                Gets the exit status.
            </summary>
        </member>
        <member name="P:SilDev.WinApi.ProcessBasicInformation.PebBaseAddress">
            <summary>
                Gets the member points to a PEB structure.
            </summary>
        </member>
        <member name="P:SilDev.WinApi.ProcessBasicInformation.AffinityMask">
            <summary>
                Gets the affinity mask.
            </summary>
        </member>
        <member name="P:SilDev.WinApi.ProcessBasicInformation.BasePriority">
            <summary>
                Gets the base priority.
            </summary>
        </member>
        <member name="P:SilDev.WinApi.ProcessBasicInformation.UniqueProcessId">
            <summary>
                Gets the unique process identifier.
            </summary>
        </member>
        <member name="P:SilDev.WinApi.ProcessBasicInformation.InheritedFromUniqueProcessId">
            <summary>
                Gets the ID inherited from the process.
            </summary>
        </member>
        <member name="M:SilDev.WinApi.ProcessBasicInformation.Equals(SilDev.WinApi.ProcessBasicInformation)">
            <summary>
                Determines whether this instance have same values as the specified
                <see cref="T:SilDev.WinApi.ProcessBasicInformation"/> instance.
            </summary>
            <param name="other">
                The <see cref="T:SilDev.WinApi.ProcessBasicInformation"/> instance to compare.
            </param>
        </member>
        <member name="M:SilDev.WinApi.ProcessBasicInformation.Equals(System.Object)">
            <summary>
                Determines whether this instance have same values as the specified
                <see cref="T:System.Object"/>.
            </summary>
            <param name="other">
                The  <see cref="T:System.Object"/> to compare.
            </param>
        </member>
        <member name="M:SilDev.WinApi.ProcessBasicInformation.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:SilDev.WinApi.ProcessBasicInformation.op_Equality(SilDev.WinApi.ProcessBasicInformation,SilDev.WinApi.ProcessBasicInformation)">
            <summary>
                Determines whether two specified <see cref="T:SilDev.WinApi.ProcessBasicInformation"/>
                instances have same values.
            </summary>
            <param name="left">
                The first <see cref="T:SilDev.WinApi.ProcessBasicInformation"/> instance to compare.
            </param>
            <param name="right">
                The second <see cref="T:SilDev.WinApi.ProcessBasicInformation"/> instance to compare.
            </param>
        </member>
        <member name="M:SilDev.WinApi.ProcessBasicInformation.op_Inequality(SilDev.WinApi.ProcessBasicInformation,SilDev.WinApi.ProcessBasicInformation)">
            <summary>
                Determines whether two specified <see cref="T:SilDev.WinApi.ProcessBasicInformation"/>
                instances have different values.
            </summary>
            <param name="left">
                The first <see cref="T:SilDev.WinApi.ProcessBasicInformation"/> instance to compare.
            </param>
            <param name="right">
                The second <see cref="T:SilDev.WinApi.ProcessBasicInformation"/> instance to compare.
            </param>
        </member>
        <member name="T:SilDev.WinApi.ThemeMargins">
            <summary>
                Returned by the GetThemeMargins function to define the margins of windows
                that have visual styles applied.
            </summary>
        </member>
        <member name="P:SilDev.WinApi.ThemeMargins.CxLeftWidth">
            <summary>
                Width of the left border that retains its size.
            </summary>
        </member>
        <member name="P:SilDev.WinApi.ThemeMargins.CxRightWidth">
            <summary>
                Width of the right border that retains its size.
            </summary>
        </member>
        <member name="P:SilDev.WinApi.ThemeMargins.CyTopHeight">
            <summary>
                Height of the top border that retains its size.
            </summary>
        </member>
        <member name="P:SilDev.WinApi.ThemeMargins.CyBottomHeight">
            <summary>
                Height of the bottom border that retains its size.
            </summary>
        </member>
        <member name="M:SilDev.WinApi.ThemeMargins.Equals(SilDev.WinApi.ThemeMargins)">
            <summary>
                Determines whether this instance have same values as the specified
                <see cref="T:SilDev.WinApi.ThemeMargins"/> instance.
            </summary>
            <param name="other">
                The <see cref="T:SilDev.WinApi.ThemeMargins"/> instance to compare.
            </param>
        </member>
        <member name="M:SilDev.WinApi.ThemeMargins.Equals(System.Object)">
            <summary>
                Determines whether this instance have same values as the specified
                <see cref="T:System.Object"/>.
            </summary>
            <param name="other">
                The  <see cref="T:System.Object"/> to compare.
            </param>
        </member>
        <member name="M:SilDev.WinApi.ThemeMargins.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:SilDev.WinApi.ThemeMargins.op_Equality(SilDev.WinApi.ThemeMargins,SilDev.WinApi.ThemeMargins)">
            <summary>
                Determines whether two specified <see cref="T:SilDev.WinApi.ThemeMargins"/> instances have
                same values.
            </summary>
            <param name="left">
                The first <see cref="T:SilDev.WinApi.ThemeMargins"/> instance to compare.
            </param>
            <param name="right">
                The second <see cref="T:SilDev.WinApi.ThemeMargins"/> instance to compare.
            </param>
        </member>
        <member name="M:SilDev.WinApi.ThemeMargins.op_Inequality(SilDev.WinApi.ThemeMargins,SilDev.WinApi.ThemeMargins)">
            <summary>
                Determines whether two specified <see cref="T:SilDev.WinApi.ThemeMargins"/> instances have
                different values.
            </summary>
            <param name="left">
                The first <see cref="T:SilDev.WinApi.ThemeMargins"/> instance to compare.
            </param>
            <param name="right">
                The second <see cref="T:SilDev.WinApi.ThemeMargins"/> instance to compare.
            </param>
        </member>
        <member name="T:SilDev.WinApi.TokenPrivileges">
            <summary>
                Contains information about a set of privileges for an access token.
            </summary>
        </member>
        <member name="P:SilDev.WinApi.TokenPrivileges.PrivilegeCount">
            <summary>
                Gets the number of entries in the Privileges collection.
            </summary>
        </member>
        <member name="P:SilDev.WinApi.TokenPrivileges.Privileges">
            <summary>
                Specifies an array of <see cref="T:SilDev.WinApi.LuIdAndAttributes"/> structures. Each
                structure contains the <see cref="T:SilDev.WinApi.LuId"/> and attributes of a privilege. To
                get the name of the privilege associated with a <see cref="T:SilDev.WinApi.LuId"/>, call
                the <see cref="M:SilDev.WinApi.NativeHelper.LookupPrivilegeName(System.String,SilDev.WinApi.LuId,System.Text.StringBuilder,System.Int32@)"/> function, passing the
                address of the <see cref="T:SilDev.WinApi.LuId"/> as the value of the lpLuid parameter.
            </summary>
        </member>
        <member name="M:SilDev.WinApi.TokenPrivileges.Equals(SilDev.WinApi.TokenPrivileges)">
            <summary>
                Determines whether this instance have same values as the specified
                <see cref="T:SilDev.WinApi.TokenPrivileges"/> instance.
            </summary>
            <param name="other">
                The <see cref="T:SilDev.WinApi.TokenPrivileges"/> instance to compare.
            </param>
        </member>
        <member name="M:SilDev.WinApi.TokenPrivileges.Equals(System.Object)">
            <summary>
                Determines whether this instance have same values as the specified
                <see cref="T:System.Object"/>.
            </summary>
            <param name="other">
                The  <see cref="T:System.Object"/> to compare.
            </param>
        </member>
        <member name="M:SilDev.WinApi.TokenPrivileges.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:SilDev.WinApi.TokenPrivileges.op_Equality(SilDev.WinApi.TokenPrivileges,SilDev.WinApi.TokenPrivileges)">
            <summary>
                Determines whether two specified <see cref="T:SilDev.WinApi.TokenPrivileges"/> instances
                have same values.
            </summary>
            <param name="left">
                The first <see cref="T:SilDev.WinApi.TokenPrivileges"/> instance to compare.
            </param>
            <param name="right">
                The second <see cref="T:SilDev.WinApi.TokenPrivileges"/> instance to compare.
            </param>
        </member>
        <member name="M:SilDev.WinApi.TokenPrivileges.op_Inequality(SilDev.WinApi.TokenPrivileges,SilDev.WinApi.TokenPrivileges)">
            <summary>
                Determines whether two specified <see cref="T:SilDev.WinApi.TokenPrivileges"/> instances
                have different values.
            </summary>
            <param name="left">
                The first <see cref="T:SilDev.WinApi.TokenPrivileges"/> instance to compare.
            </param>
            <param name="right">
                The second <see cref="T:SilDev.WinApi.TokenPrivileges"/> instance to compare.
            </param>
        </member>
        <member name="T:SilDev.WinApi.WindowPlacement">
            <summary>
                Contains information about the placement of a window on the screen.
            </summary>
        </member>
        <member name="P:SilDev.WinApi.WindowPlacement.Length">
            <summary>
                The length of the structure, in bytes.
            </summary>
        </member>
        <member name="P:SilDev.WinApi.WindowPlacement.Flags">
            <summary>
                The flags that control the position of the minimized window and the method
                by which the window is restored.
                <para>
                    This member can be one or more of the
                    <see cref="T:SilDev.WinApi.WindowPlacementFlags"/> values.
                </para>
            </summary>
        </member>
        <member name="P:SilDev.WinApi.WindowPlacement.ShowCmd">
            <summary>
                The current show state of the window.
                <para>
                    This member can be one of the <see cref="T:SilDev.WinApi.ShowWindowFlags"/> values.
                </para>
            </summary>
        </member>
        <member name="P:SilDev.WinApi.WindowPlacement.PtMinPosition">
            <summary>
                The coordinates of the window's upper-left corner when the window is
                minimized.
            </summary>
        </member>
        <member name="P:SilDev.WinApi.WindowPlacement.PtMaxPosition">
            <summary>
                The coordinates of the window's upper-left corner when the window is
                maximized.
            </summary>
        </member>
        <member name="P:SilDev.WinApi.WindowPlacement.RcNormalPosition">
            <summary>
                The window's coordinates when the window is in the restored position.
            </summary>
        </member>
        <member name="M:SilDev.WinApi.WindowPlacement.Equals(SilDev.WinApi.WindowPlacement)">
            <summary>
                Determines whether this instance have same values as the specified
                <see cref="T:SilDev.WinApi.WindowPlacement"/> instance.
            </summary>
            <param name="other">
                The <see cref="T:SilDev.WinApi.WindowPlacement"/> instance to compare.
            </param>
        </member>
        <member name="M:SilDev.WinApi.WindowPlacement.Equals(System.Object)">
            <summary>
                Determines whether this instance have same values as the specified
                <see cref="T:System.Object"/>.
            </summary>
            <param name="other">
                The  <see cref="T:System.Object"/> to compare.
            </param>
        </member>
        <member name="M:SilDev.WinApi.WindowPlacement.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:SilDev.WinApi.WindowPlacement.op_Equality(SilDev.WinApi.WindowPlacement,SilDev.WinApi.WindowPlacement)">
            <summary>
                Determines whether two specified <see cref="T:SilDev.WinApi.WindowPlacement"/> instances
                have same values.
            </summary>
            <param name="left">
                The first <see cref="T:SilDev.WinApi.WindowPlacement"/> instance to compare.
            </param>
            <param name="right">
                The second <see cref="T:SilDev.WinApi.WindowPlacement"/> instance to compare.
            </param>
        </member>
        <member name="M:SilDev.WinApi.WindowPlacement.op_Inequality(SilDev.WinApi.WindowPlacement,SilDev.WinApi.WindowPlacement)">
            <summary>
                Determines whether two specified <see cref="T:SilDev.WinApi.WindowPlacement"/> instances
                have different values.
            </summary>
            <param name="left">
                The first <see cref="T:SilDev.WinApi.WindowPlacement"/> instance to compare.
            </param>
            <param name="right">
                The second <see cref="T:SilDev.WinApi.WindowPlacement"/> instance to compare.
            </param>
        </member>
        <member name="T:SilDev.WinApi.WindowThemeAttributeOptions">
            <summary>
                Contains information about the placement of a window on the screen.
            </summary>
        </member>
        <member name="P:SilDev.WinApi.WindowThemeAttributeOptions.Flags">
            <summary>
                A combination of flags that modify window visual style attributes.
            </summary>
        </member>
        <member name="P:SilDev.WinApi.WindowThemeAttributeOptions.Mask">
            <summary>
                A bitmask that describes how the values specified in dwFlags should be
                applied. If the bit corresponding to a value in <see cref="P:SilDev.WinApi.WindowThemeAttributeOptions.Flags"/> is 0,
                that flag will be removed. If the bit is 1, the flag will be added.
            </summary>
        </member>
        <member name="M:SilDev.WinApi.WindowThemeAttributeOptions.Equals(SilDev.WinApi.WindowThemeAttributeOptions)">
            <summary>
                Determines whether this instance have same values as the specified
                <see cref="T:SilDev.WinApi.WindowThemeAttributeOptions"/> instance.
            </summary>
            <param name="other">
                The <see cref="T:SilDev.WinApi.WindowThemeAttributeOptions"/> instance to compare.
            </param>
        </member>
        <member name="M:SilDev.WinApi.WindowThemeAttributeOptions.Equals(System.Object)">
            <summary>
                Determines whether this instance have same values as the specified
                <see cref="T:System.Object"/>.
            </summary>
            <param name="other">
                The  <see cref="T:System.Object"/> to compare.
            </param>
        </member>
        <member name="M:SilDev.WinApi.WindowThemeAttributeOptions.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:SilDev.WinApi.WindowThemeAttributeOptions.op_Equality(SilDev.WinApi.WindowThemeAttributeOptions,SilDev.WinApi.WindowThemeAttributeOptions)">
            <summary>
                Determines whether two specified <see cref="T:SilDev.WinApi.WindowThemeAttributeOptions"/>
                instances have same values.
            </summary>
            <param name="left">
                The first <see cref="T:SilDev.WinApi.WindowThemeAttributeOptions"/> instance to compare.
            </param>
            <param name="right">
                The second <see cref="T:SilDev.WinApi.WindowThemeAttributeOptions"/> instance to compare.
            </param>
        </member>
        <member name="M:SilDev.WinApi.WindowThemeAttributeOptions.op_Inequality(SilDev.WinApi.WindowThemeAttributeOptions,SilDev.WinApi.WindowThemeAttributeOptions)">
            <summary>
                Determines whether two specified <see cref="T:SilDev.WinApi.WindowThemeAttributeOptions"/>
                instances have different values.
            </summary>
            <param name="left">
                The first <see cref="T:SilDev.WinApi.WindowThemeAttributeOptions"/> instance to compare.
            </param>
            <param name="right">
                The second <see cref="T:SilDev.WinApi.WindowThemeAttributeOptions"/> instance to compare.
            </param>
        </member>
        <member name="T:SilDev.WinApi.NativeMethods">
            <summary>
                Represents native methods.
            </summary>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.AdjustTokenPrivileges(System.IntPtr,System.Boolean,SilDev.WinApi.TokenPrivileges@,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
                Enables or disables privileges in the specified access token. Enabling or
                disabling privileges in an access token requires
                <see cref="F:SilDev.WinApi.AccessTokenFlags.TokenAdjustPrivileges"/> access.
            </summary>
            <param name="tokenHandle">
                A handle to the access token that contains the privileges to be modified.
                The handle must have <see cref="F:SilDev.WinApi.AccessTokenFlags.TokenAdjustPrivileges"/>
                access to the token. If the PreviousState parameter is not
                <see langword="null"/>, the handle must also have
                <see cref="F:SilDev.WinApi.AccessTokenFlags.TokenQuery"/> access.
            </param>
            <param name="disableAllPrivileges">
                Specifies whether the function disables all of the token's privileges. If
                this value is <see langword="true"/>, the function disables all privileges
                and ignores the NewState parameter. If it is <see langword="false"/>, the
                function modifies privileges based on the information pointed to by the
                NewState parameter.
            </param>
            <param name="newState">
                A pointer to a <see cref="T:SilDev.WinApi.TokenPrivileges"/> structure that specifies an
                array of privileges and their attributes. If the disableAllPrivileges
                parameter is <see langword="false"/>, the AdjustTokenPrivileges function
                enables, disables, or removes these privileges for the token. The following
                table describes the action taken by the AdjustTokenPrivileges function,
                based on the privilege attribute. If disableAllPrivileges is
                <see langword="true"/>, the function ignores this parameter.
            </param>
            <param name="bufferLength">
                Specifies the size, in bytes, of the buffer pointed to by the PreviousState
                parameter. This parameter can be zero if the PreviousState parameter is
                <see langword="null"/>.
            </param>
            <param name="previousState">
                A pointer to a buffer that the function fills with a
                <see cref="T:SilDev.WinApi.TokenPrivileges"/> structure that contains the previous state of
                any privileges that the function modifies. That is, if a privilege has been
                modified by this function, the privilege and its previous state are
                contained in the <see cref="T:SilDev.WinApi.TokenPrivileges"/> structure referenced by
                PreviousState. If the PrivilegeCount member of
                <see cref="T:SilDev.WinApi.TokenPrivileges"/> is zero, then no privileges have been changed
                by this function. This parameter can be <see langword="null"/>. If you
                specify a buffer that is too small to receive the complete list of modified
                privileges, the function fails and does not adjust any privileges. In this
                case, the function sets the variable pointed to by the returnLength
                parameter to the number of bytes required to hold the complete list of
                modified privileges.
            </param>
            <param name="returnLength">
                A pointer to a variable that receives the required size, in bytes, of the
                buffer pointed to by the previousState parameter. This parameter can be
                <see langword="null"/> if previousState is <see langword="null"/>.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.AllocConsole">
            <summary>
                Allocates a new console for the calling process.
            </summary>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.AttachConsole(System.UInt32)">
            <summary>
                Attaches the calling process to the console of the specified process.
            </summary>
            <param name="dwProcessId">
                The identifier of the process whose console is to be used.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.AnimateWindow(System.IntPtr,System.Int32,SilDev.WinApi.AnimateWindowFlags)">
            <summary>
                Enables you to produce special effects when showing or hiding windows.
                There are four types of animation: roll, slide, collapse or expand, and
                alpha-blended fade.
            </summary>
            <param name="hWnd">
                A handle to the window to animate. The calling thread must own this window.
            </param>
            <param name="time">
                The time it takes to play the animation, in milliseconds. Typically, an
                animation takes 200 milliseconds to play.
            </param>
            <param name="flags">
                The type of animation.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.BitBlt(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <summary>
                The BitBlt function performs a bit-block transfer of the color data
                corresponding to a rectangle of pixels from the specified source device
                context into a destination device context.
            </summary>
            <param name="hDestDc">
                A handle to the destination device context.
            </param>
            <param name="x">
                The x-coordinate, in logical units, of the upper-left corner of the
                destination rectangle.
            </param>
            <param name="y">
                The y-coordinate, in logical units, of the upper-left corner of the
                destination rectangle.
            </param>
            <param name="nWidth">
                The width, in logical units, of the source and destination rectangles.
            </param>
            <param name="nHeight">
                The height, in logical units, of the source and the destination rectangles.
            </param>
            <param name="hSrcDc">
                A handle to the source device context.
            </param>
            <param name="xSrc">
                The x-coordinate, in logical units, of the upper-left corner of the source
                rectangle.
            </param>
            <param name="ySrc">
                The y-coordinate, in logical units, of the upper-left corner of the source
                rectangle.
            </param>
            <param name="dwRop">
                A raster-operation code. These codes define how the color data for the
                source rectangle is to be combined with the color data for the destination
                rectangle to achieve the final color.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.CallNextHookEx(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
                Passes the hook information to the next hook procedure in the current hook
                chain. A hook procedure can call this function either before or after
                processing the hook information.
            </summary>
            <param name="hhk">
                This parameter is ignored.
            </param>
            <param name="nCode">
                The hook code passed to the current hook procedure. The next hook procedure
                uses this code to determine how to process the hook information.
            </param>
            <param name="wParam">
                The wParam value passed to the current hook procedure. The meaning of this
                parameter depends on the type of hook associated with the current hook
                chain.
            </param>
            <param name="lParam">
                The lParam value passed to the current hook procedure. The meaning of this
                parameter depends on the type of hook associated with the current hook
                chain.
            </param>
            <returns>
                This value is returned by the next hook procedure in the chain. The current
                hook procedure must also return this value. The meaning of the return value
                depends on the hook type.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.ClientToScreen(System.IntPtr,System.Drawing.Point@)">
            <summary>
                The ClientToScreen function converts the client-area coordinates of a
                specified point to screen coordinates.
            </summary>
            <param name="hWnd">
                A handle to the window whose client area is used for the conversion.
            </param>
            <param name="lpPoint">
                A pointer to a <see cref="T:System.Drawing.Point"/> structure that contains the client
                coordinates to be converted. The new screen coordinates are copied into
                this structure if the function succeeds.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.CloseHandle(System.IntPtr)">
            <summary>
                Closes an open object handle.
            </summary>
            <param name="handle">
                A valid handle to an open object.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.CloseServiceHandle(System.IntPtr)">
            <summary>
                Closes a handle to a service control manager or service object.
            </summary>
            <param name="hScObject">
                A handle to the service control manager object or the service object to
                close. Handles to service control manager objects are returned by the
                OpenSCManager function, and handles to service objects are returned by
                either the OpenService or CreateService function.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.ControlService(System.IntPtr,SilDev.WinApi.ServiceControlOptions,SilDev.WinApi.ServiceStatus)">
            <summary>
                Sends a control code to a service.
            </summary>
            <param name="hService">
                A handle to the service. This handle is returned by the OpenService or
                CreateService function.
            </param>
            <param name="dwControl">
            </param>
            <param name="lpServiceStatus">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.CreateFileW(System.String,System.UInt32,System.UInt32,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
                Creates or opens a file or I/O device. The most commonly used I/O devices
                are as follows: file, file stream, directory, physical disk, volume,
                console buffer, tape drive, communications resource, mailslot, and pipe.
                The function returns a handle that can be used to access the file or device
                for various types of I/O depending on the file or device and the flags and
                attributes specified.
            </summary>
            <param name="lpFileName">
                The name of the file or device to be created or opened. You may use either
                forward slashes (/) or backslashes () in this name.
            </param>
            <param name="dwDesiredAccess">
                The requested access to the file or device, which can be summarized as
                read, write, both or neither zero). The most commonly used values are
                GENERIC_READ (0x80000000), GENERIC_WRITE (0x40000000), or both. If this
                parameter is zero, the application can query certain metadata such as file,
                directory, or device attributes without accessing that file or device, even
                if GENERIC_READ (0x80000000) access would have been denied.
            </param>
            <param name="dwShareMode">
                The requested sharing mode of the file or device, which can be read, write,
                both, delete, all of these, or none (refer to the following table). Access
                requests to attributes or extended attributes are not affected by this
                flag. If this parameter is zero and CreateFile succeeds, the file or device
                cannot be shared and cannot be opened again until the handle to the file or
                device is closed.
            </param>
            <param name="lpSecurityAttributes">
                A pointer to a <see cref="T:SilDev.WinApi.SecurityAttributes"/> structure that contains two
                separate but related data members: an optional security descriptor, and a
                Boolean value that determines whether the returned handle can be inherited
                by child processes.
            </param>
            <param name="dwCreationDisposition">
                An action to take on a file or device that exists or does not exist.
            </param>
            <param name="dwFlagsAndAttributes">
                The file or device attributes and flags, FILE_ATTRIBUTE_NORMAL (0x80) being
                the most common default value for files.
            </param>
            <param name="hTemplateFile">
                A valid handle to a template file with the GENERIC_READ (0x80000000) access
                right. The template file supplies file attributes and extended attributes
                for the file that is being created. This parameter can be
                <see langword="null"/>.
            </param>
            <returns>
                If the function succeeds, the return value is an open handle to the
                specified file, device, named pipe, or mail slot.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.CreateProcessWithTokenW(System.IntPtr,SilDev.WinApi.LogonOptions,System.String,System.String,SilDev.WinApi.CreationFlags,System.IntPtr,System.String,SilDev.WinApi.StartupInfo@,SilDev.WinApi.ProcessInformation@)">
            <summary>
                Creates a new process and its primary thread. The new process runs in the
                security context of the specified token. It can optionally load the user
                profile for the specified user.
            </summary>
            <param name="hToken">
                A handle to the primary token that represents a user. The handle must have
                the <see cref="F:SilDev.WinApi.AccessTokenFlags.TokenQuery"/>,
                <see cref="F:SilDev.WinApi.AccessTokenFlags.TokenDuplicate"/>, and
                <see cref="F:SilDev.WinApi.AccessTokenFlags.TokenAssignPrimary"/> access rights. The user
                represented by the token must have read and execute access to the
                application specified by the lpApplicationName or the lpCommandLine
                parameter.
            </param>
            <param name="dwLogonFlags">
                The logon option.
            </param>
            <param name="lpApplicationName">
                The name of the module to be executed. This module can be a Windows-based
                application. It can be some other type of module (for example, MS-DOS or
                OS/2) if the appropriate subsystem is available on the local computer.
                <para>
                    The string can specify the full path and file name of the module to
                    execute or it can specify a partial name. In the case of a partial
                    name, the function uses the current drive and current directory to
                    complete the specification. The function will not use the search path.
                    This parameter must include the file name extension; no default
                    extension is assumed.
                </para>
                <para>
                    The lpApplicationName parameter can be <see langword="null"/>. In that
                    case, the module name must be the first white space–delimited token in
                    the lpCommandLine string. If you are using a long file name that
                    contains a space, use quoted strings to indicate where the file name
                    ends and the arguments begin; otherwise, the file name is ambiguous.
                </para>
            </param>
            <param name="lpCommandLine">
                The command line to be executed. The maximum length of this string is 1024
                characters. If lpApplicationName is <see langword="null"/>, the module name
                portion of lpCommandLine is limited to 255 characters.
                <para>
                    The lpCommandLine parameter can be <see langword="null"/>. In that
                    case, the function uses the string pointed to by lpApplicationName as
                    the command line.
                </para>
            </param>
            <param name="dwCreationFlags">
                The flags that control how the process is created.
            </param>
            <param name="lpEnvironment">
                A pointer to an environment block for the new process. If this parameter is
                <see langword="null"/>, the new process uses an environment created from
                the profile of the user specified by lpUsername.
            </param>
            <param name="lpCurrentDirectory">
                The full path to the current directory for the process. The string can also
                specify a UNC path.
                <para>
                    If this parameter is <see langword="null"/>, the new process will have
                    the same current drive and directory as the calling process. (This
                    feature is provided primarily for shells that need to start an
                    application and specify its initial drive and working directory.)
                </para>
            </param>
            <param name="lpStartupInfo">
                A pointer to a <see cref="T:SilDev.WinApi.StartupInfo"/> structure.
                <para>
                    If the lpDesktop member is <see langword="null"/> or an empty string,
                    the new process inherits the desktop and window station of its parent
                    process. The function adds permission for the specified user account to
                    the inherited window station and desktop. Otherwise, if this member
                    specifies a desktop, it is the responsibility of the application to add
                    permission for the specified user account to the specified window
                    station and desktop, even for WinSta0\Default.
                </para>
            </param>
            <param name="lpProcessInformation">
                A pointer to a <see cref="T:SilDev.WinApi.ProcessInformation"/> structure that receives
                identification information for the new process, including a handle to the
                process.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.CreateService(System.IntPtr,System.String,System.String,SilDev.WinApi.ServiceAccessRights,SilDev.WinApi.ServiceTypes,SilDev.WinApi.ServiceBootFlags,SilDev.WinApi.ServiceError,System.String,System.String,System.IntPtr,System.String,System.String,System.String)">
            <summary>
                Creates a service object and adds it to the specified service control
                manager database.
            </summary>
            <param name="hScManager">
                A handle to the service control manager database. This handle is returned
                by the OpenSCManager function and must have the
                <see cref="F:SilDev.WinApi.ServiceManagerAccessRights.CreateService"/> access right.
            </param>
            <param name="lpServiceName">
                The name of the service to install. The maximum string length is 256
                characters. The service control manager database preserves the case of the
                characters, but service name comparisons are always case insensitive.
                Forward-slash (/) and backslash (\) are not valid service name characters.
            </param>
            <param name="lpDisplayName">
                The display name to be used by user interface programs to identify the
                service. This string has a maximum length of 256 characters. The name is
                case-preserved in the service control manager. Display name comparisons are
                always case-insensitive.
            </param>
            <param name="dwDesiredAccess">
                The access to the service. Before granting the requested access, the system
                checks the access token of the calling process.
            </param>
            <param name="dwServiceType">
                The service type.
            </param>
            <param name="dwStartType">
                The service start options. This parameter can be one of the following
                values.
            </param>
            <param name="dwErrorControl">
                The severity of the error, and action taken, if this service fails to
                start. This parameter can be one of the following values.
            </param>
            <param name="lpBinaryPathName">
                The fully qualified path to the service binary file. If the path contains a
                space, it must be quoted so that it is correctly interpreted. For example,
                "d:\\my share\\myservice.exe" should be specified as "\"d:\\my
                share\\myservice.exe\"".
                <para>
                    The path can also include arguments for an auto-start service. For
                    example, "d:\\myshare\\myservice.exe arg1 arg2". These arguments are
                    passed to the service entry point (typically the main function).
                </para>
                <para>
                    If you specify a path on another computer, the share must be accessible
                    by the computer account of the local computer because this is the
                    security context used in the remote call. However, this requirement
                    allows any potential vulnerabilities in the remote computer to affect
                    the local computer. Therefore, it is best to use a local file.
                </para>
            </param>
            <param name="lpLoadOrderGroup">
                The names of the load ordering group of which this service is a member.
                Specify <see langword="null"/> or an empty string if the service does not
                belong to a group.
                <para>
                    The startup program uses load ordering groups to load groups of
                    services in a specified order with respect to the other groups. The
                    list of load ordering groups is contained in the following registry
                    value:
                    "HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\ServiceGroupOrder"
                </para>
            </param>
            <param name="lpdwTagId">
                A pointer to a variable that receives a tag value that is unique in the
                group specified in the lpLoadOrderGroup parameter. Specify
                <see langword="null"/> if you are not changing the existing tag.
                <para>
                    You can use a tag for ordering service startup within a load ordering
                    group by specifying a tag order vector in the following registry value:
                    "HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\GroupOrderList"
                </para>
                <para>
                    Tags are only evaluated for driver services that have
                    <see cref="F:SilDev.WinApi.ServiceBootFlags.BootStart"/> or
                    <see cref="F:SilDev.WinApi.ServiceBootFlags.SystemStart"/> start types.
                </para>
            </param>
            <param name="lpDependencies">
                A pointer to a double null-terminated array of null-separated names of
                services or load ordering groups that the system must start before this
                service. Specify <see langword="null"/> or an empty string if the service
                has no dependencies. Dependency on a group means that this service can run
                if at least one member of the group is running after an attempt to start
                all members of the group.
                <para>
                    You must prefix group names with SC_GROUP_IDENTIFIER so that they can
                    be distinguished from a service name, because services and service
                    groups share the same name space.
                </para>
            </param>
            <param name="lpServiceStartName">
                The name of the account under which the service should run. If the service
                type is <see cref="F:SilDev.WinApi.ServiceTypes.Win32OwnProcess"/>, use an account name in
                the form DomainName\UserName. The service process will be logged on as this
                user. If the account belongs to the built-in domain, you can specify
                .\UserName.
                <para>
                    If this parameter is <see langword="null"/>, CreateService uses the
                    LocalSystem account. If the service type specifies
                    <see cref="F:SilDev.WinApi.ServiceTypes.InteractiveProcess"/>, the service must run in
                    the LocalSystem account.
                </para>
                <para>
                    If this parameter is NT AUTHORITY\LocalService, CreateService uses the
                    LocalService account. If the parameter is NT AUTHORITY\NetworkService,
                    CreateService uses the NetworkService account.
                </para>
                <para>
                    A shared process can run as any user.
                </para>
                <para>
                    If the service type is <see cref="F:SilDev.WinApi.ServiceTypes.KernelDriver"/> or
                    <see cref="F:SilDev.WinApi.ServiceTypes.FileSystemDriver"/>, the name is the driver
                    object name that the system uses to load the device driver. Specify
                    <see langword="null"/> if the driver is to use a default object name
                    created by the I/O system.
                </para>
                <para>
                    A service can be configured to use a managed account or a virtual
                    account. If the service is configured to use a managed service account,
                    the name is the managed service account name. If the service is
                    configured to use a virtual account, specify the name as NT
                    SERVICE\ServiceName. For more information about managed service
                    accounts and virtual accounts, see the Service Accounts Step-by-Step
                    Guide.
                </para>
            </param>
            <param name="lpPassword">
                The password to the account name specified by the lpServiceStartName
                parameter. Specify an empty string if the account has no password or if the
                service runs in the LocalService, NetworkService, or LocalSystem account.
                <para>
                    If the account name specified by the lpServiceStartName parameter is
                    the name of a managed service account or virtual account name, the
                    lpPassword parameter must be <see langword="null"/>.
                </para>
                <para>
                    Passwords are ignored for driver services.
                </para>
            </param>
            <returns>
                If the function succeeds, the return value is a handle to the service.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.DeleteMenu(System.IntPtr,System.UInt32,SilDev.WinApi.ModifyMenuFlags)">
            <summary>
                Deletes an item from the specified menu. If the menu item opens a menu or
                submenu, this function destroys the handle to the menu or submenu and frees
                the memory used by the menu or submenu.
            </summary>
            <param name="hMenu">
                A handle to the menu to be changed.
            </param>
            <param name="nPosition">
                The menu item to be deleted, as determined by the uFlags parameter.
            </param>
            <param name="wFlags">
                Indicates how the uPosition parameter is interpreted. This parameter must
                be <see cref="F:SilDev.WinApi.ModifyMenuFlags.ByCommand"/> or
                <see cref="F:SilDev.WinApi.ModifyMenuFlags.ByPosition"/>.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.DeleteService(System.IntPtr)">
            <summary>
                Marks the specified service for deletion from the service control manager
                database.
            </summary>
            <param name="hService">
                A handle to the service. This handle is returned by the OpenService or
                CreateService function, and it must have the
                <see cref="F:SilDev.WinApi.AccessRights.Delete"/> access right.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.DestroyIcon(System.IntPtr)">
            <summary>
                Destroys an icon and frees any memory the icon occupied.
            </summary>
            <param name="hIcon">
                A handle to the icon to be destroyed. The icon must not be in use.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.DrawMenuBar(System.IntPtr)">
            <summary>
                Redraws the menu bar of the specified window. If the menu bar changes after
                the system has created the window, this function must be called to draw the
                changed menu bar.
            </summary>
            <param name="hWnd">
                A handle to the window whose menu bar is to be redrawn.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.DuplicateHandle(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr@,System.UInt32,System.Boolean,System.UInt32)">
            <summary>
                Duplicates an object handle.
            </summary>
            <param name="hSourceProcessHandle">
                A handle to the process with the handle to be duplicated.
                <para>
                    The handle must have the <see cref="F:SilDev.WinApi.AccessRights.ProcessDupHandle"/>
                    access right.
                </para>
            </param>
            <param name="hSourceHandle">
                The handle to be duplicated. This is an open object handle that is valid in
                the context of the source process. For a list of objects whose handles can
                be duplicated, see the following Remarks section.
            </param>
            <param name="hTargetProcessHandle">
                A handle to the process that is to receive the duplicated handle.
                <para>
                    The handle must have the <see cref="F:SilDev.WinApi.AccessRights.ProcessDupHandle"/>
                    access right.
                </para>
            </param>
            <param name="lpTargetHandle">
                A pointer to a variable that receives the duplicate handle. This handle
                value is valid in the context of the target process.
                <para>
                    If hSourceHandle is a pseudo handle returned by GetCurrentProcess or
                    GetCurrentThread, DuplicateHandle converts it to a real handle to a
                    process or thread, respectively.
                </para>
                <para>
                    If lpTargetHandle is <see langword="null"/>, the function duplicates
                    the handle, but does not return the duplicate handle value to the
                    caller. This behavior exists only for backward compatibility with
                    previous versions of this function. You should not use this feature, as
                    you will lose system resources until the target process terminates.
                </para>
            </param>
            <param name="dwDesiredAccess">
                The access requested for the new handle. For the flags that can be
                specified for each object type, see the following Remarks section.
                <para>
                    This parameter is ignored if the dwOptions parameter specifies the
                    <see cref="F:SilDev.WinApi.DuplicateOption.SameAccess"/> flag. Otherwise, the flags
                    that can be specified depend on the type of object whose handle is to
                    be duplicated.
                </para>
            </param>
            <param name="bInheritHandle">
                A variable that indicates whether the handle is inheritable. If
                <see langword="true"/>, the duplicate handle can be inherited by new
                processes created by the target process. If <see langword="false"/>, the
                new handle cannot be inherited.
            </param>
            <param name="dwOptions">
                Optional actions. This parameter can be zero, or any combination of
                <see cref="T:SilDev.WinApi.DuplicateOption"/>.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.DuplicateTokenEx(System.IntPtr,SilDev.WinApi.AccessTokenFlags,SilDev.WinApi.SecurityAttributes@,SilDev.WinApi.SecurityImpersonationLevels,SilDev.WinApi.TokenTypes,System.IntPtr@)">
            <summary>
                Creates a new access token that duplicates one already in existence.
            </summary>
            <param name="hExistingToken">
                A handle to an access token opened with
                <see cref="F:SilDev.WinApi.AccessTokenFlags.TokenDuplicate"/> access.
            </param>
            <param name="dwDesiredAccess">
                Specifies the requested access rights for the new token.
            </param>
            <param name="lpTokenAttributes">
                A pointer to a <see cref="T:SilDev.WinApi.SecurityAttributes"/> structure that specifies a
                security descriptor for the new token and determines whether child
                processes can inherit the token. If lpTokenAttributes is
                <see langword="null"/>, the token gets a default security descriptor and
                the handle cannot be inherited. If the security descriptor contains a
                system access control list (SACL), the token gets system security access
                rights, even if it was not requested in dwDesiredAccess.
            </param>
            <param name="impersonationLevel">
                Specifies a value from the <see cref="T:SilDev.WinApi.SecurityImpersonationLevels"/>
                enumeration that indicates the impersonation level of the new token.
            </param>
            <param name="tokenType">
                Specifies one of the following values from the <see cref="T:System.TokenType"/>
                enumeration.
            </param>
            <param name="phNewToken">
                A pointer to a HANDLE variable that receives the new token.
                <para>
                    When you have finished using the new token, call the
                    <see cref="M:SilDev.WinApi.NativeMethods.CloseHandle(System.IntPtr)"/> function to close the token handle.
                </para>
            </param>
            <returns>
                If the function succeeds, the function returns a nonzero value.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.DuplicateTokenEx(System.IntPtr,System.UInt32,System.IntPtr,SilDev.WinApi.SecurityImpersonationLevels,SilDev.WinApi.TokenTypes,System.IntPtr@)">
            <summary>
                Creates a new access token that duplicates one already in existence.
            </summary>
            <param name="hExistingToken">
                A handle to an access token opened with
                <see cref="F:SilDev.WinApi.AccessTokenFlags.TokenDuplicate"/> access.
            </param>
            <param name="dwDesiredAccess">
                Specifies the requested access rights for the new token.
            </param>
            <param name="lpTokenAttributes">
                A pointer to a <see cref="T:SilDev.WinApi.SecurityAttributes"/> structure that specifies a
                security descriptor for the new token and determines whether child
                processes can inherit the token. If lpTokenAttributes is
                <see langword="null"/>, the token gets a default security descriptor and
                the handle cannot be inherited. If the security descriptor contains a
                system access control list (SACL), the token gets system security access
                rights, even if it was not requested in dwDesiredAccess.
            </param>
            <param name="impersonationLevel">
                Specifies a value from the <see cref="T:SilDev.WinApi.SecurityImpersonationLevels"/>
                enumeration that indicates the impersonation level of the new token.
            </param>
            <param name="tokenType">
                Specifies one of the following values from the <see cref="T:System.TokenType"/>
                enumeration.
            </param>
            <param name="phNewToken">
                A pointer to a HANDLE variable that receives the new token.
                <para>
                    When you have finished using the new token, call the
                    <see cref="M:SilDev.WinApi.NativeMethods.CloseHandle(System.IntPtr)"/> function to close the token handle.
                </para>
            </param>
            <returns>
                If the function succeeds, the function returns a nonzero value.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.DwmExtendFrameIntoClientArea(System.IntPtr,SilDev.WinApi.ThemeMargins@)">
            <summary>
                Extends the window frame into the client area.
            </summary>
            <param name="hWnd">
                The handle to the window in which the frame will be extended into the
                client area.
            </param>
            <param name="pMarInset">
                A pointer to a MARGINS structure that describes the margins to use when
                extending the frame into the client area.
            </param>
            <returns>
                If this function succeeds, it returns S_OK. Otherwise, it returns an
                HRESULT error code.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.DwmGetColorizationParameters(SilDev.WinApi.DwmColorizationParams@)">
            <summary>
                ***This is an undocumented API and as such is not supported by Microsoft
                and can be changed or removed in the future without futher notice.
            </summary>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.DwmIsCompositionEnabled(System.Int32@)">
            <summary>
                Obtains a value that indicates whether Desktop Window Manager (DWM)
                composition is enabled.
            </summary>
            <param name="pfEnabled">
                A pointer to a value that, when this function returns successfully,
                receives <see langword="true"/> if DWM composition is enabled; otherwise,
                <see langword="false"/>.
            </param>
            <returns>
                If this function succeeds, it returns S_OK. Otherwise, it returns an
                HRESULT error code.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.DwmSetWindowAttribute(System.IntPtr,SilDev.WinApi.DwmWindowAttribute,SilDev.WinApi.DwmWindowCornerPreference@,System.UInt32)">
            <summary>
                Sets the value of Desktop Window Manager (DWM) non-client rendering
                attributes for a window.
            </summary>
            <param name="hWnd">
                The handle to the window for which the attribute value is to be set.
            </param>
            <param name="dwAttribute">
                A flag describing which value to set, specified as a value of the
                <see cref="T:SilDev.WinApi.DwmWindowAttribute"/> enumeration. This parameter specifies
                which attribute to set, and the pvAttribute parameter points to an object
                containing the attribute value.
            </param>
            <param name="pvAttribute">
                A pointer to an object containing the attribute value to set. The type of
                the value set depends on the value of the <paramref name="dwAttribute"/>
                parameter. The <see cref="T:SilDev.WinApi.DwmWindowAttribute"/> enumeration topic
                indicates, in the row for each flag, what type of value you should pass a
                pointer to in the <paramref name="pvAttribute"/> parameter.
            </param>
            <param name="cbAttribute">
                The size, in bytes, of the attribute value being set via the
                <paramref name="pvAttribute"/> parameter. The type of the value set, and
                therefore its size in bytes, depends on the value of the
                <paramref name="dwAttribute"/> parameter.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.DwmSetWindowAttribute(System.IntPtr,SilDev.WinApi.DwmWindowAttribute,System.Boolean@,System.Int32)">
            <summary>
                Sets the value of Desktop Window Manager (DWM) non-client rendering
                attributes for a window.
            </summary>
            <param name="hWnd">
                The handle to the window for which the attribute value is to be set.
            </param>
            <param name="dwAttribute">
                A flag describing which value to set, specified as a value of the
                <see cref="T:SilDev.WinApi.DwmWindowAttribute"/> enumeration. This parameter specifies
                which attribute to set, and the pvAttribute parameter points to an object
                containing the attribute value.
            </param>
            <param name="pvAttribute">
                A pointer to an object containing the attribute value to set. The type of
                the value set depends on the value of the <paramref name="dwAttribute"/>
                parameter. The <see cref="T:SilDev.WinApi.DwmWindowAttribute"/> enumeration topic
                indicates, in the row for each flag, what type of value you should pass a
                pointer to in the <paramref name="pvAttribute"/> parameter.
            </param>
            <param name="cbAttribute">
                The size, in bytes, of the attribute value being set via the
                <paramref name="pvAttribute"/> parameter. The type of the value set, and
                therefore its size in bytes, depends on the value of the
                <paramref name="dwAttribute"/> parameter.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.EndDialog(System.IntPtr,System.IntPtr)">
            <summary>
                Destroys a modal dialog box, causing the system to end any processing for
                the dialog box.
            </summary>
            <param name="hDlg">
                A handle to the dialog box to be destroyed.
            </param>
            <param name="nResult">
                The value to be returned to the application from the function that created
                the dialog box.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.EnumChildWindows(System.IntPtr,SilDev.WinApi.EnumChildProc,System.IntPtr)">
            <summary>
                Enumerates the child windows that belong to the specified parent window by
                passing the handle to each child window, in turn, to an application-defined
                callback function. EnumChildWindows continues until the last child window
                is enumerated or the callback function returns <see langword="false"/>.
            </summary>
            <param name="hWndParent">
                A handle to the parent window whose child windows are to be enumerated. If
                this parameter is <see langword="null"/>, this function is equivalent to
                EnumWindows.
            </param>
            <param name="lpEnumFunc">
                A pointer to an application-defined callback function.
            </param>
            <param name="lParam">
                An application-defined value to be passed to the callback function.
            </param>
            <returns>
                The return value is not used.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.EnumThreadWindows(System.UInt32,SilDev.WinApi.EnumThreadWndProc,System.IntPtr)">
            <summary>
                Enumerates all nonchild windows associated with a thread by passing the
                handle to each window, in turn, to an application-defined callback
                function.
            </summary>
            <param name="dwThreadId">
                The identifier of the thread whose windows are to be enumerated.
            </param>
            <param name="lpfn">
                A pointer to an application-defined callback function.
            </param>
            <param name="lParam">
                An application-defined value to be passed to the callback function.
            </param>
            <returns>
                If the callback function returns <see langword="true"/> for all windows in
                the thread specified by dwThreadId, the return value is
                <see langword="true"/>. If the callback function returns
                <see langword="false"/> on any enumerated window, or if there are no
                windows found in the thread specified by dwThreadId, the return value is
                <see langword="false"/>.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.ExtractIconEx(System.String,System.Int32,System.IntPtr[],System.IntPtr[],System.Int32)">
            <summary>
                Creates an array of handles to large or small icons extracted from the
                specified executable file, DLL, or icon file.
            </summary>
            <param name="lpszFile">
                The name of an executable file, DLL, or icon file from which icons will be
                extracted.
            </param>
            <param name="nIconIndex">
                The zero-based index of the first icon to extract. For example, if this
                value is zero, the function extracts the first icon in the specified file.
                <para>
                    If this value is –1 and phiconLarge and phiconSmall are both
                    <see langword="null"/>, the function returns the total number of icons
                    in the specified file. If the file is an executable file or DLL, the
                    return value is the number of RT_GROUP_ICON resources. If the file is
                    an .ico file, the return value is 1.
                </para>
                <para>
                    If this value is a negative number and either phiconLarge or
                    phiconSmall is not <see langword="null"/>, the function begins by
                    extracting the icon whose resource identifier is equal to the absolute
                    value of nIconIndex. For example, use -3 to extract the icon whose
                    resource identifier is 3.
                </para>
            </param>
            <param name="phiconLarge">
                An array of icon handles that receives handles to the large icons extracted
                from the file. If this parameter is <see langword="null"/>, no large icons
                are extracted from the file.
            </param>
            <param name="phiconSmall">
                An array of icon handles that receives handles to the small icons extracted
                from the file. If this parameter is <see langword="null"/>, no small icons
                are extracted from the file.
            </param>
            <param name="nIcons">
                The number of icons to be extracted from the file.
            </param>
            <returns>
                If the nIconIndex parameter is -1, the phiconLarge parameter is
                <see langword="null"/>, and the phiconSmall parameter is
                <see langword="null"/>, then the return value is the number of icons
                contained in the specified file. Otherwise, the return value is the number
                of icons successfully extracted from the file.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.FindMimeFromData(System.IntPtr,System.String,System.Byte[],System.Int32,System.String,SilDev.WinApi.MimeFlags,System.IntPtr@,System.Int32)">
            <summary>
                Determines the MIME type from the data provided.
            </summary>
            <param name="pBc">
                A pointer to the IBindCtx interface. Can be set to <see langword="null"/>.
            </param>
            <param name="pwzUrl">
                A pointer to a string value that contains the URL of the data. Can be set
                to <see langword="null"/> if pBuffer contains the data to be sniffed.
            </param>
            <param name="pBuffer">
                A pointer to the buffer that contains the data to be sniffed. Can be set to
                <see langword="null"/> if pwzUrl contains a valid URL.
            </param>
            <param name="cbSize">
                An unsigned long integer value that contains the size of the buffer.
            </param>
            <param name="pwzMimeProposed">
                A pointer to a string value that contains the proposed MIME type. This
                value is authoritative if type cannot be determined from the data. If the
                proposed type contains a semi-colon (;) it is removed. This parameter can
                be set to <see langword="null"/>.
            </param>
            <param name="dwMimeFlags">
                The search and filter options.
            </param>
            <param name="ppwzMimeOut">
                The address of a string value that receives the suggested MIME type.
            </param>
            <param name="dwReserved">
                Reserved. Must be set to 0.
            </param>
            <returns>
                This function can return one of these values.
                <para>
                    S_OK: The operation completed successfully.
                </para>
                <para>
                    E_FAIL: The operation failed.
                </para>
                <para>
                    E_INVALIDARG: One or more arguments are invalid.
                </para>
                <para>
                    E_OUTOFMEMORY: There is insufficient memory to complete the operation.
                </para>
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.FindWindow(System.String,System.String)">
            <summary>
                Retrieves a handle to the top-level window whose class name and window name
                match the specified strings. This function does not search child windows.
                This function does not perform a case-sensitive search.
            </summary>
            <param name="lpClassName">
                The class name or a class atom created by a previous call to the
                RegisterClass or RegisterClassEx function. The atom must be in the
                low-order word of lpClassName; the high-order word must be zero.
                <para>
                    If lpClassName points to a string, it specifies the window class name.
                    The class name can be any name registered with RegisterClass or
                    RegisterClassEx, or any of the predefined control-class names.
                </para>
                <para>
                    If lpClassName is <see langword="null"/>, it finds any window whose
                    title matches the lpWindowName parameter.
                </para>
            </param>
            <param name="lpWindowName">
                The window name (the window's title). If this parameter is
                <see langword="null"/>, all window names match.
            </param>
            <returns>
                If the function succeeds, the return value is a handle to the window that
                has the specified class name and window name.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.FindWindowByCaption(System.IntPtr,System.String)">
            <summary>
                Retrieves a handle to the top-level window whose window name match the
                specified strings. This function does not search child windows. This
                function does not perform a case-sensitive search.
            </summary>
            <param name="zeroOnly">
                Must be <see cref="F:System.IntPtr.Zero"/>.
            </param>
            <param name="lpWindowName">
                The window name (the window's title). If this parameter is
                <see langword="null"/>, all window names match.
            </param>
            <returns>
                If the function succeeds, the return value is a handle to the window that
                has the specified window name.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.FindWindowEx(System.IntPtr,System.IntPtr,System.String,System.String)">
            <summary>
                Retrieves a handle to a window whose class name and window name match the
                specified strings. The function searches child windows, beginning with the
                one following the specified child window. This function does not perform a
                case-sensitive search.
            </summary>
            <param name="hWndParent">
                A handle to the parent window whose child windows are to be searched.
                <para>
                    If hWndParent is <see langword="null"/>, the function uses the desktop
                    window as the parent window. The function searches among windows that
                    are child windows of the desktop.
                </para>
                <para>
                    If hWndParent is HWND_MESSAGE, the function searches all message-only
                    windows.
                </para>
            </param>
            <param name="hWndChildAfter">
                A handle to a child window. The search begins with the next child window in
                the Z order. The child window must be a direct child window of hWndParent,
                not just a descendant window.
                <para>
                    If hWndChildAfter is <see langword="null"/>, the search begins with the
                    first child window of hWndParent.
                </para>
                <para>
                    Note that if both hWndParent and hWndChildAfter are
                    <see langword="null"/>, the function searches all top-level and
                    message-only windows.
                </para>
            </param>
            <param name="lpszClass">
                The class name or a class atom created by a previous call to the
                RegisterClass or RegisterClassEx function. The atom must be placed in the
                low-order word of lpszClass; the high-order word must be zero.
                <para>
                    If lpszClass is a string, it specifies the window class name. The class
                    name can be any name registered with RegisterClass or RegisterClassEx,
                    or any of the predefined control-class names, or it can be MAKEINTATOM
                    (0x8000). In this latter case, 0x8000 is the atom for a menu class. For
                    more information, see the Remarks section of this topic.
                </para>
            </param>
            <param name="lpszWindow">
                The window name (the window's title). If this parameter is
                <see langword="null"/>, all window names match.
            </param>
            <returns>
                If the function succeeds, the return value is a handle to the window that
                has the specified class and window names.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.GetAsyncKeyState(System.Int32)">
            <summary>
                Determines whether a key is up or down at the time the function is called,
                and whether the key was pressed after a previous call to
                <see cref="M:SilDev.WinApi.NativeMethods.GetAsyncKeyState(System.Int32)"/>.
            </summary>
            <param name="vKey">
                The virtual-key code.
            </param>
            <returns>
                If the function succeeds, the return value specifies whether the key was
                pressed since the last call to <see cref="M:SilDev.WinApi.NativeMethods.GetAsyncKeyState(System.Int32)"/>, and whether
                the key is currently up or down. If the most significant bit is set, the
                key is down, and if the least significant bit is set, the key was pressed
                after the previous call to <see cref="M:SilDev.WinApi.NativeMethods.GetAsyncKeyState(System.Int32)"/>.
                <para>
                    The return value is zero if the current desktop is not the active
                    desktop, or if the foreground thread belongs to another process and the
                    desktop does not allow the hook or the journal record.
                </para>
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.GetClassName(System.IntPtr,System.Text.StringBuilder,System.Int32)">
            <summary>
                Retrieves the name of the class to which the specified window belongs.
            </summary>
            <param name="hWnd">
                A handle to the window and, indirectly, the class to which the window
                belongs.
            </param>
            <param name="lpClassName">
                The class name string.
            </param>
            <param name="nMaxCount">
                The length of the lpClassName buffer, in characters. The buffer must be
                large enough to include the terminating null character; otherwise, the
                class name string is truncated to nMaxCount-1 characters.
            </param>
            <returns>
                If the function succeeds, the return value is the number of characters
                copied to the buffer, not including the terminating null character.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.GetClientRect(System.IntPtr,System.Drawing.Rectangle@)">
            <summary>
                Retrieves the coordinates of a window's client area. The client coordinates
                specify the upper-left and lower-right corners of the client area. Because
                client coordinates are relative to the upper-left corner of a window's
                client area, the coordinates of the upper-left corner are (0,0).
            </summary>
            <param name="hWnd">
                A handle to the window whose client coordinates are to be retrieved.
            </param>
            <param name="lpRect">
                A pointer to a <see cref="T:System.Drawing.Rectangle"/> structure that receives the client
                coordinates. The left and top members are zero. The right and bottom
                members contain the width and height of the window.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.GetConsoleWindow">
            <summary>
                Retrieves the window handle used by the console associated with the calling
                process.
            </summary>
            <returns>
                The return value is a handle to the window used by the console associated
                with the calling process or <see langword="null"/> if there is no such
                associated console.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.GetCurrentProcess">
            <summary>
                Retrieves a pseudo handle for the current process.
            </summary>
            <returns>
                The return value is a pseudo handle to the current process.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.GetCurrentThreadId">
            <summary>
                Retrieves the thread identifier of the calling thread.
            </summary>
            <returns>
                The return value is the thread identifier of the calling thread.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.GetCursorPos(System.Drawing.Point@)">
            <summary>
                Retrieves the position of the mouse cursor, in screen coordinates.
            </summary>
            <returns>
                Returns nonzero if successful or zero otherwise.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.GetDC(System.IntPtr)">
            <summary>
                The GetDC function retrieves a handle to a device context (DC) for the
                client area of a specified window or for the entire screen. You can use the
                returned handle in subsequent GDI functions to draw in the DC. The device
                context is an opaque data structure, whose values are used internally by
                GDI.
            </summary>
            <param name="hWnd">
                A handle to the window whose DC is to be retrieved. If this value is
                <see langword="null"/>, it retrieves the DC for the entire screen.
            </param>
            <returns>
                If the function succeeds, the return value is a handle to the DC for the
                specified window's client area.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.GetDesktopWindow">
            <summary>
                Retrieves a handle to the desktop window. The desktop window covers the
                entire screen. The desktop window is the area on top of which other windows
                are painted.
            </summary>
            <returns>
                The return value is a handle to the desktop window.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.GetDlgCtrlID(System.IntPtr)">
            <summary>
                Retrieves the identifier of the specified control.
            </summary>
            <param name="hWndCtl">
                A handle to the control.
            </param>
            <returns>
                If the function succeeds, the return value is the identifier of the
                control.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.GetDlgItem(System.IntPtr,System.Int32)">
            <summary>
                Retrieves a handle to a control in the specified dialog box.
            </summary>
            <param name="hDlg">
                A handle to the dialog box that contains the control.
            </param>
            <param name="nIddlgItem">
                The identifier of the control to be retrieved.
            </param>
            <returns>
                If the function succeeds, the return value is the window handle of the
                specified control.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.GetForegroundWindow">
            <summary>
                Retrieves a handle to the foreground window (the window with which the user
                is currently working). The system assigns a slightly higher priority to the
                thread that creates the foreground window than it does to other threads.
            </summary>
            <returns>
                The return value is a handle to the foreground window. The foreground
                window can be <see langword="null"/> in certain circumstances, such as when
                a window is losing activation.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.GetLastError">
            <summary>
                Retrieves the calling thread's last-error code value. The last-error code
                is maintained on a per-thread basis. Multiple threads do not overwrite each
                other's last-error code.
            </summary>
            <returns>
                The return value is the calling thread's last-error code.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.GetMenu(System.IntPtr)">
            <summary>
                Retrieves a handle to the menu assigned to the specified window.
            </summary>
            <param name="hWnd">
                A handle to the window whose menu handle is to be retrieved.
            </param>
            <returns>
                The return value is a handle to the menu. If the specified window has no
                menu, the return value is <see langword="null"/>. If the window is a child
                window, the return value is undefined.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.GetMenuItemCount(System.IntPtr)">
            <summary>
                Determines the number of items in the specified menu.
            </summary>
            <param name="hMenu">
                A handle to the menu to be examined.
            </param>
            <returns>
                If the function succeeds, the return value specifies the number of items in
                the menu.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.GetParent(System.IntPtr)">
            <summary>
                Retrieves a handle to the specified window's parent or owner.
            </summary>
            <param name="hWnd">
                A handle to the window whose parent window handle is to be retrieved.
            </param>
            <returns>
                If the window is a child window, the return value is a handle to the parent
                window. If the window is a top-level window with the WS_POPUP style, the
                return value is a handle to the owner window.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.GetPrivateProfileString(System.String,System.String,System.String,System.Text.StringBuilder,System.Int32,System.String)">
            <summary>
                Retrieves a string from the specified section in an initialization file.
            </summary>
            <param name="lpApplicationName">
                The name of the section containing the key name. If this parameter is
                <see langword="null"/>, the GetPrivateProfileString function copies all
                section names in the file to the supplied buffer.
            </param>
            <param name="lpKeyName">
                The name of the key whose associated string is to be retrieved. If this
                parameter is <see langword="null"/>, all key names in the section specified
                by the lpAppName parameter are copied to the buffer specified by the
                lpReturnedString parameter.
            </param>
            <param name="nDefault">
                A default string. If the lpKeyName key cannot be found in the
                initialization file, GetPrivateProfileString copies the default string to
                the lpReturnedString buffer. If this parameter is <see langword="null"/>,
                the default is an empty string.
                <para>
                    Avoid specifying a default string with trailing blank characters. The
                    function inserts a null character in the lpReturnedString buffer to
                    strip any trailing blanks.
                </para>
            </param>
            <param name="retVal">
                A pointer to the buffer that receives the retrieved string.
            </param>
            <param name="nSize">
                The size of the buffer pointed to by the retVal parameter, in characters.
            </param>
            <param name="lpFileName">
                The name of the initialization file. If this parameter does not contain a
                full path to the file, the system searches for the file in the Windows
                directory.
            </param>
            <returns>
                The return value is the number of characters copied to the buffer, not
                including the terminating null character.
                <para>
                    If neither lpAppName nor lpKeyName is <see langword="null"/> and the
                    supplied destination buffer is too small to hold the requested string,
                    the string is truncated and followed by a null character, and the
                    return value is equal to nSize minus one.
                </para>
                <para>
                    If either lpAppName or lpKeyName is <see langword="null"/> and the
                    supplied destination buffer is too small to hold all the strings, the
                    last string is truncated and followed by two null characters. In this
                    case, the return value is equal to nSize minus two.
                </para>
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.GetProcessId(System.IntPtr)">
            <summary>
                Retrieves the process identifier of the specified process.
            </summary>
            <param name="handle">
                A handle to the process.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.GetProcessImageFileName(System.IntPtr,System.Text.StringBuilder,System.Int32)">
            <summary>
                Retrieves the name of the executable file for the specified process.
            </summary>
            <param name="hProcess">
                A handle to the process. The handle must have the
                <see cref="F:SilDev.WinApi.AccessRights.ProcessQueryInformation"/> or
                <see cref="F:SilDev.WinApi.AccessRights.ProcessQueryLimitedInformation"/> access right.
            </param>
            <param name="lpImageFileName">
                A pointer to a buffer that receives the full path to the executable file.
            </param>
            <param name="nSize">
                The size of the lpImageFileName buffer, in characters.
            </param>
            <returns>
                If the function succeeds, the return value specifies the length of the
                string copied to the buffer.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.GetShellWindow">
            <summary>
                Retrieves a handle to the Shell's desktop window.
            </summary>
            <returns>
                The return value is the handle of the Shell's desktop window. If no Shell
                process is present, the return value is <see langword="null"/>.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.GetStdHandle(System.Int32)">
            <summary>
                Retrieves a handle to the specified standard device (standard input,
                standard output, or standard error).
            </summary>
            <param name="nStdHandle">
                The standard device. This parameter can be one of the following values.
                <para>
                    STD_INPUT_HANDLE (DWORD)-10: The standard input device. Initially, this
                    is the console input buffer, CONIN$.
                </para>
                <para>
                    STD_OUTPUT_HANDLE (DWORD)-11: The standard output device. Initially,
                    this is the active console screen buffer, CONOUT$.
                </para>
                <para>
                    STD_ERROR_HANDLE (DWORD)-12: The standard error device. Initially, this
                    is the active console screen buffer, CONOUT$.
                </para>
            </param>
            <returns>
                If the function succeeds, the return value is a handle to the specified
                device, or a redirected handle set by a previous call to SetStdHandle. The
                handle has GENERIC_READ and GENERIC_WRITE access rights, unless the
                application has used SetStdHandle to set a standard handle with lesser
                access.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.GetSystemMenu(System.IntPtr,System.Boolean)">
            <summary>
                Enables the application to access the window menu (also known as the system
                menu or the control menu) for copying and modifying.
            </summary>
            <param name="hWnd">
                A handle to the window that will own a copy of the window menu.
            </param>
            <param name="bRevert">
                The action to be taken. If this parameter is <see langword="false"/>,
                GetSystemMenu returns a handle to the copy of the window menu currently in
                use. The copy is initially identical to the window menu, but it can be
                modified. If this parameter is <see langword="true"/>, GetSystemMenu resets
                the window menu back to the default state. The previous window menu, if
                any, is destroyed.
            </param>
            <returns>
                If the bRevert parameter is <see langword="false"/>, the return value is a
                handle to a copy of the window menu. If the bRevert parameter is
                <see langword="true"/>, the return value is <see langword="null"/>.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.GetSystemMetrics(SilDev.WinApi.SystemMetric)">
            <summary>
                Retrieves the specified system metric or system configuration setting in
                pixels.
            </summary>
            <param name="nIndex">
                The system metric or configuration setting to be retrieved.
            </param>
            <returns>
                If the function succeeds, the return value is the requested system metric
                or configuration setting. If the function fails, the return value is 0
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.GetUserDefaultUILanguage">
            <summary>
                Returns the language identifier for the user UI language for the current
                user. If the current user has not set a language,
                <see cref="M:SilDev.WinApi.NativeMethods.GetUserDefaultUILanguage"/> returns the preferred language set
                for the system. If there is no preferred language set for the system, then
                the system default UI language (also known as "install language") is
                returned.
            </summary>
            <returns>
                Returns the language identifier for the user UI language for the current
                user.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.GetWindowLong(System.IntPtr,SilDev.WinApi.WindowLongFlags)">
            <summary>
                Retrieves information about the specified window. The function also
                retrieves the 32-bit (DWORD) value at the specified offset into the extra
                window memory.
            </summary>
            <param name="hWnd">
                A handle to the window and, indirectly, the class to which the window
                belongs.
            </param>
            <param name="nIndex">
                The zero-based offset to the value to be retrieved. Valid values are in the
                range zero through the number of bytes of extra window memory, minus four;
                for example, if you specified 12 or more bytes of extra memory, a value of
                8 would be an index to the third 32-bit integer. To retrieve any other
                value, specify one of the <see cref="T:SilDev.WinApi.WindowLongFlags"/>.GWL_??? values.
            </param>
            <returns>
                If the function succeeds, the return value is the requested value.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.GetWindowPlacement(System.IntPtr,SilDev.WinApi.WindowPlacement@)">
            <summary>
                Gets the show state and the restored, minimized, and maximized positions of
                the specified window.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
            <param name="lpwndpl">
                A pointer to a <see cref="T:SilDev.WinApi.WindowPlacement"/> structure that specifies the
                new show state and window positions.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.GetWindowRect(System.IntPtr,System.Drawing.Rectangle@)">
            <summary>
                Retrieves the dimensions of the bounding rectangle of the specified window.
                The dimensions are given in screen coordinates that are relative to the
                upper-left corner of the screen.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
            <param name="lpRect">
                A pointer to a <see cref="T:System.Drawing.Rectangle"/> structure that receives the screen
                coordinates of the upper-left and lower-right corners of the window.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.GetWindowText(System.IntPtr,System.Text.StringBuilder,System.Int32)">
            <summary>
                Copies the text of the specified window's title bar (if it has one) into a
                buffer. If the specified window is a control, the text of the control is
                copied. However, GetWindowText cannot retrieve the text of a control in
                another application.
            </summary>
            <param name="hWnd">
                A handle to the window or control containing the text.
            </param>
            <param name="text">
                The buffer that will receive the text. If the string is as long or longer
                than the buffer, the string is truncated and terminated with a null
                character.
            </param>
            <param name="maxLength">
                The maximum number of characters to copy to the buffer, including the null
                character. If the text exceeds this limit, it is truncated.
            </param>
            <returns>
                If the function succeeds, the return value is the length, in characters, of
                the copied string, not including the terminating null character. If the
                window has no title bar or text, if the title bar is empty, or if the
                window or control handle is invalid, the return value is zero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.GetWindowTextLength(System.IntPtr)">
            <summary>
                Retrieves the length, in characters, of the specified window's title bar
                text (if the window has a title bar). If the specified window is a control,
                the function retrieves the length of the text within the control. However,
                GetWindowTextLength cannot retrieve the length of the text of an edit
                control in another application.
            </summary>
            <param name="hWnd">
                A handle to the window or control.
            </param>
            <returns>
                If the function succeeds, the return value is the length, in characters, of
                the text. Under certain conditions, this value may actually be greater than
                the length of the text.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.GetWindowThreadProcessId(System.IntPtr,System.UInt32@)">
            <summary>
                Retrieves the identifier of the thread that created the specified window
                and, optionally, the identifier of the process that created the window.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
            <param name="lpdwProcessId">
                A pointer to a variable that receives the process identifier. If this
                parameter is not <see langword="null"/>, GetWindowThreadProcessId copies
                the identifier of the process to the variable; otherwise, it does not.
            </param>
            <returns>
                The return value is the identifier of the thread that created the window.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.HideCaret(System.IntPtr)">
            <summary>
                Removes the caret from the screen. Hiding a caret does not destroy its
                current shape or invalidate the insertion point.
            </summary>
            <param name="hWnd">
                A handle to the window that owns the caret. If this parameter is
                <see langword="null"/>, HideCaret searches the current task for the window
                that owns the caret.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.InsertMenu(System.IntPtr,System.UInt32,SilDev.WinApi.ModifyMenuFlags,System.UIntPtr,System.String)">
            <summary>
                Note  The InsertMenu function has been superseded by the InsertMenuItem
                function. You can still use InsertMenu, however, if you do not need any of
                the extended features of InsertMenuItem.
            </summary>
            <param name="hMenu">
                A handle to the menu to be changed.
            </param>
            <param name="wPosition">
                The menu item before which the new menu item is to be inserted, as
                determined by the uFlags parameter.
            </param>
            <param name="wFlags">
                Controls the interpretation of the uPosition parameter and the content,
                appearance, and behavior of the new menu item.
            </param>
            <param name="wIdNewItem">
                The identifier of the new menu item or, if the uFlags parameter has the
                <see cref="F:SilDev.WinApi.ModifyMenuFlags.Popup"/> flag set, a handle to the drop-down
                menu or submenu.
            </param>
            <param name="lpNewItem">
                The content of the new menu item. The interpretation of lpNewItem depends
                on whether the uFlags parameter includes the
                <see cref="F:SilDev.WinApi.ModifyMenuFlags.Bitmap"/>,
                <see cref="F:SilDev.WinApi.ModifyMenuFlags.OwnerDraw"/>, or
                <see cref="F:SilDev.WinApi.ModifyMenuFlags.TextString"/> flag, as follows.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.InvalidateRect(System.IntPtr,System.IntPtr,System.Boolean)">
            <summary>
                Adds a rectangle to the specified window's update region. The update region
                represents the portion of the window's client area that must be redrawn.
            </summary>
            <param name="hWnd">
                A handle to the window whose update region has changed. If this parameter
                is <see langword="null"/>, the system invalidates and redraws all windows,
                not just the windows for this application, and sends the WM_ERASEBKGND and
                WM_NCPAINT messages before the function returns. Setting this parameter to
                <see langword="null"/> is not recommended.
            </param>
            <param name="lpRect">
                A pointer to a RECT structure that contains the client coordinates of the
                rectangle to be added to the update region. If this parameter is
                <see langword="null"/>, the entire client area is added to the update
                region.
            </param>
            <param name="bErase">
                Specifies whether the background within the update region is to be erased
                when the update region is processed. If this parameter is
                <see langword="true"/>, the background is erased when the BeginPaint
                function is called. If this parameter is <see langword="false"/>, the
                background remains unchanged.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.IsThemeActive">
            <summary>
                Tests if a visual style for the current application is active.
            </summary>
            <returns>
                Returns one of the following values.
                <para>
                    <see langword="true"/>: A visual style is enabled, and windows with
                    visual styles applied should call OpenThemeData to start using theme
                    drawing services.
                </para>
                <para>
                    <see langword="false"/>: A visual style is not enabled, and the window
                    message handler does not need to make another call to
                    <see cref="M:SilDev.WinApi.NativeMethods.IsThemeActive"/> until it receives a WM_THEMECHANGED
                    message.
                </para>
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.LoadLibrary(System.String)">
            <summary>
                Loads the specified module into the address space of the calling process.
                The specified module may cause other modules to be loaded.
            </summary>
            <param name="lpFileName">
                The name of the module. This can be either a library module (a .dll file)
                or an executable module (an .exe file). The name specified is the file name
                of the module and is not related to the name stored in the library module
                itself, as specified by the LIBRARY keyword in the module-definition (.def)
                file.
            </param>
            <returns>
                If the function succeeds, the return value is a handle to the module.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.LoadString(System.IntPtr,System.UInt32,System.Text.StringBuilder,System.Int32)">
            <summary>
                Loads a string resource from the executable file associated with a
                specified module, copies the string into a buffer, and appends a
                terminating null character.
            </summary>
            <param name="hInstance">
                A handle to an instance of the module whose executable file contains the
                string resource. To get the handle to the application itself, call the
                GetModuleHandle function with <see langword="null"/>.
            </param>
            <param name="uId">
                The identifier of the string to be loaded.
            </param>
            <param name="lpBuffer">
                The buffer is to receive the string. Must be of sufficient length to hold a
                pointer (8 bytes).
            </param>
            <param name="nBufferMax">
                The size of the buffer, in characters. The string is truncated and
                null-terminated if it is longer than the number of characters specified. If
                this parameter is 0, then lpBuffer receives a read-only pointer to the
                resource itself.
            </param>
            <returns>
                If the function succeeds, the return value is the number of characters
                copied into the buffer, not including the terminating null character, or
                zero if the string resource does not exist.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.LocalAlloc(SilDev.WinApi.LocalAllocFlags,System.UIntPtr)">
            <summary>
                Allocates the specified number of bytes from the heap.
            </summary>
            <param name="flag">
                The memory allocation attributes. The default is the LMEM_FIXED value. This
                parameter can be one or more of the <see cref="T:SilDev.WinApi.LocalAllocFlags"/>.
            </param>
            <param name="size">
                The number of bytes to allocate. If this parameter is zero and the uFlags
                parameter specifies <see cref="F:SilDev.WinApi.LocalAllocFlags.LMemMoveable"/>, the
                function returns a handle to a memory object that is marked as discarded.
            </param>
            <returns>
                If the function succeeds, the return value is a handle to the newly
                allocated memory object.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.LocalFree(System.IntPtr)">
            <summary>
                Frees the specified local memory object and invalidates its handle.
            </summary>
            <param name="hMem">
                A handle to the local memory object. This handle is returned by either the
                <see cref="M:SilDev.WinApi.NativeMethods.LocalAlloc(SilDev.WinApi.LocalAllocFlags,System.UIntPtr)"/> function.
            </param>
            <returns>
                If the function succeeds, the return value is <see langword="null"/>.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.LockWindowUpdate(System.IntPtr)">
            <summary>
                Disables or enables drawing in the specified window. Only one window can be
                locked at a time.
            </summary>
            <param name="hWndLock">
                The window in which drawing will be disabled. If this parameter is
                <see langword="null"/>, drawing in the locked window is enabled.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.LookupPrivilegeName(System.String,System.IntPtr,System.Text.StringBuilder,System.Int32@)">
            <summary>
                Retrieves the name that corresponds to the privilege represented on a
                specific system by a specified locally unique identifier (LUID).
            </summary>
            <param name="lpSystemName">
                A pointer to a null-terminated string that specifies the name of the system
                on which the privilege name is retrieved. If a null string is specified,
                the function attempts to find the privilege name on the local system.
            </param>
            <param name="lpLuid">
                A pointer to the <see cref="T:SilDev.WinApi.LuId"/> by which the privilege is known on the
                target system.
            </param>
            <param name="lpName">
                A pointer to a buffer that receives a null-terminated string that
                represents the privilege name. For example, this string could be
                "SeSecurityPrivilege".
            </param>
            <param name="cchName">
                A pointer to a variable that specifies the size, in a TCHAR value, of the
                lpName buffer. When the function returns, this parameter contains the
                length of the privilege name, not including the terminating null character.
                If the buffer pointed to by the lpName parameter is too small, this
                variable contains the required size.
            </param>
            <returns>
                If the function succeeds, the function returns nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.LookupPrivilegeValue(System.String,System.String,SilDev.WinApi.LuId@)">
            <summary>
                Retrieves the <see cref="T:SilDev.WinApi.LuId"/> used on a specified system to locally
                represent the specified privilege name.
            </summary>
            <param name="lpSystemName">
                A pointer to a null-terminated string that specifies the name of the system
                on which the privilege name is retrieved. If a null string is specified,
                the function attempts to find the privilege name on the local system.
            </param>
            <param name="lpName">
                A pointer to a null-terminated string that specifies the name of the
                privilege, as defined in the Winnt.h header file.
            </param>
            <param name="lpLuid">
                A pointer to a variable that receives the <see cref="T:SilDev.WinApi.LuId"/> by which the
                privilege is known on the system specified by the lpSystemName parameter.
            </param>
            <returns>
                If the function succeeds, the function returns nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.MapVirtualKey(System.UInt32,System.UInt32)">
            <summary>
                Translates (maps) a virtual-key code into a scan code or character value,
                or translates a scan code into a virtual-key code.
            </summary>
            <param name="uCode">
                The virtual key code or scan code for a key. How this value is interpreted
                depends on the value of the uMapType parameter.
            </param>
            <param name="uMapType">
                The translation to be performed. The value of this parameter depends on the
                value of the uCode parameter.
            </param>
            <returns>
                The return value is either a scan code, a virtual-key code, or a character
                value, depending on the value of uCode and uMapType. If there is no
                translation, the return value is zero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.MciSendString(System.String,System.Text.StringBuilder,System.UInt32,System.IntPtr)">
            <summary>
                The mciSendString function sends a command string to an MCI device. The
                device that the command is sent to is specified in the command string.
            </summary>
            <param name="lpszCommand">
                Pointer to a null-terminated string that specifies an MCI command string.
            </param>
            <param name="lpszReturnString">
                Pointer to a buffer that receives return information. If no return
                information is needed, this parameter can be <see langword="null"/>.
            </param>
            <param name="cchReturn">
                Size, in characters, of the return buffer specified by the lpszReturnString
                parameter.
            </param>
            <param name="hWndCallback">
                Handle to a callback window if the "notify" flag was specified in the
                command string.
            </param>
            <returns>
                Returns zero if successful or an error otherwise. The low-order word of the
                returned DWORD value contains the error return value. If the error is
                device-specific, the high-order word of the return value is the driver
                identifier; otherwise, the high-order word is zero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.MoveWindow(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
                Changes the position and dimensions of the specified window. For a
                top-level window, the position and dimensions are relative to the
                upper-left corner of the screen. For a child window, they are relative to
                the upper-left corner of the parent window's client area.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
            <param name="x">
                The new position of the left side of the window.
            </param>
            <param name="y">
                The new position of the top of the window.
            </param>
            <param name="nWidth">
                The new width of the window.
            </param>
            <param name="nHeight">
                The new height of the window.
            </param>
            <param name="bRepaint">
                Indicates whether the window is to be repainted. If this parameter is
                <see langword="true"/>, the window receives a message. If the parameter is
                <see langword="false"/>, no repainting of any kind occurs. This applies to
                the client area, the nonclient area (including the title bar and scroll
                bars), and any part of the parent window uncovered as a result of moving a
                child window.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.NtQueryInformationProcess(System.IntPtr,SilDev.WinApi.ProcessInfoFlags,SilDev.WinApi.ProcessBasicInformation@,System.UInt32,System.IntPtr@)">
            <summary>
                Retrieves information about the specified process.
            </summary>
            <param name="hndl">
                A handle to the process for which information is to be retrieved.
            </param>
            <param name="piCl">
                The type of process information to be retrieved.
            </param>
            <param name="processInformation">
                A pointer to a buffer supplied by the calling application into which the
                function writes the requested information. The size of the information
                written varies depending on the data type of the
                <see cref="T:SilDev.WinApi.ProcessBasicInformation"/> parameter.
            </param>
            <param name="piLen">
                The size of the buffer pointed to by the
                <see cref="T:SilDev.WinApi.ProcessBasicInformation"/> parameter, in bytes.
            </param>
            <param name="rLen">
                A pointer to a variable in which the function returns the size of the
                requested information. If the function was successful, this is the size of
                the information written to the buffer pointed to by the
                <see cref="T:SilDev.WinApi.ProcessBasicInformation"/> parameter, but if the buffer was too
                small, this is the minimum size of buffer needed to receive the information
                successfully.
            </param>
            <returns>
                The function returns an NTSTATUS success or error code.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.OpenProcess(SilDev.WinApi.AccessRights,System.Boolean,System.UInt32)">
            <summary>
                Opens an existing local process object.
            </summary>
            <param name="dwDesiredAccess">
                The access to the process object. This access right is checked against the
                security descriptor for the process. This parameter can be one or more of
                the process access rights.
            </param>
            <param name="bInheritHandle">
                If this value is <see langword="true"/>, processes created by this process
                will inherit the handle. Otherwise, the processes do not inherit this
                handle.
            </param>
            <param name="dwProcessId">
                The identifier of the local process to be opened.
            </param>
            <returns>
                If the function succeeds, the return value is an open handle to the
                specified process.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.OpenProcessToken(System.IntPtr,System.UInt32,System.IntPtr@)">
            <summary>
                Opens the access token associated with a process.
            </summary>
            <param name="processHandle">
                A handle to the process whose access token is opened. The process must have
                the <see cref="F:SilDev.WinApi.AccessRights.ProcessQueryInformation"/> access permission.
            </param>
            <param name="desiredAccess">
                Specifies an access mask that specifies the requested types of access to
                the access token. These requested access types are compared with the
                discretionary access control list (DACL) of the token to determine which
                accesses are granted or denied.
            </param>
            <param name="tokenHandle">
                A pointer to a handle that identifies the newly opened access token when
                the function returns.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.OpenSCManager(System.String,System.String,SilDev.WinApi.ServiceManagerAccessRights)">
            <summary>
                Establishes a connection to the service control manager on the specified
                computer and opens the specified service control manager database.
            </summary>
            <param name="lpMachineName">
                The name of the target computer. If the pointer is <see langword="null"/>
                or points to an empty string, the function connects to the service control
                manager on the local computer.
            </param>
            <param name="lpDatabaseName">
                The name of the service control manager database. This parameter should be
                set to SERVICES_ACTIVE_DATABASE. If it is <see langword="null"/>, the
                SERVICES_ACTIVE_DATABASE database is opened by default.
            </param>
            <param name="dwDesiredAccess">
                The access to the service control manager. For a list of access rights, see
                <see cref="T:SilDev.WinApi.AccessRights"/>.
            </param>
            <returns>
                If the function succeeds, the return value is a handle to the specified
                service control manager database.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.OpenService(System.IntPtr,System.String,SilDev.WinApi.ServiceAccessRights)">
            <summary>
                Opens an existing service.
            </summary>
            <param name="hScManager">
                A handle to the service control manager database. The OpenSCManager
                function returns this handle.
            </param>
            <param name="lpServiceName">
                The name of the service to be opened. This is the name specified by the
                lpServiceName parameter of the CreateService function when the service
                object was created, not the service display name that is shown by user
                interface applications to identify the service.
                <para>
                    The maximum string length is 256 characters. The service control
                    manager database preserves the case of the characters, but service name
                    comparisons are always case insensitive. Forward-slash (/) and
                    backslash (\) are invalid service name characters.
                </para>
            </param>
            <param name="dwDesiredAccess">
                The access to the service.
                <para>
                    Before granting the requested access, the system checks the access
                    token of the calling process against the discretionary access-control
                    list of the security descriptor associated with the service object.
                </para>
            </param>
            <returns>
                If the function succeeds, the return value is a handle to the service.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.PostMessage(System.Runtime.InteropServices.HandleRef,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
                Places (posts) a message in the message queue associated with the thread
                that created the specified window and returns without waiting for the
                thread to process the message.
            </summary>
            <param name="hWnd">
                A handle to the window whose window procedure is to receive the message.
                The following values have special meanings.
                <para>
                    HWND_BROADCAST ((HWND)0xffff): The message is posted to all top-level
                    windows in the system, including disabled or invisible unowned windows,
                    overlapped windows, and pop-up windows. The message is not posted to
                    child windows.
                </para>
                <para>
                    <see langword="null"/>: The function behaves like a call to
                    PostThreadMessage with the dwThreadId parameter set to the identifier
                    of the current thread.
                </para>
            </param>
            <param name="msg">
                The message to be posted.
            </param>
            <param name="wParam">
                Additional message-specific information.
            </param>
            <param name="lParam">
                Additional message-specific information.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.QueryServiceStatus(System.IntPtr,SilDev.WinApi.ServiceStatus)">
            <summary>
                Retrieves the current status of the specified service.
            </summary>
            <param name="hService">
                A handle to the service. This handle is returned by the OpenService or the
                CreateService function, and it must have the
                <see cref="F:SilDev.WinApi.ServiceAccessRights.QueryStatus"/> access right.
            </param>
            <param name="lpServiceStatus">
                A pointer to a <see cref="T:SilDev.WinApi.ServiceStatus"/> structure that receives the
                status information.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.ReadProcessMemory(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr@)">
            <summary>
                Reads data from an area of memory in a specified process. The entire area
                to be read must be accessible or the operation fails.
            </summary>
            <param name="hProcess">
                A handle to the process with memory that is being read. The handle must
                have <see cref="F:SilDev.WinApi.AccessRights.ProcessVmRead"/> access to the process.
            </param>
            <param name="lpBaseAddress">
                A pointer to the base address in the specified process from which to read.
                Before any data transfer occurs, the system verifies that all data in the
                base address and memory of the specified size is accessible for read
                access, and if it is not accessible the function fails.
            </param>
            <param name="lpBuffer">
                A pointer to a buffer that receives the contents from the address space of
                the specified process.
            </param>
            <param name="nSize">
                The number of bytes to be read from the specified process.
            </param>
            <param name="lpNumberOfBytesRead">
                A pointer to a variable that receives the number of bytes transferred into
                the specified buffer. If lpNumberOfBytesRead is <see langword="null"/>, the
                parameter is ignored.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.ReadProcessMemory(System.IntPtr,System.IntPtr,System.Text.StringBuilder,System.IntPtr,System.IntPtr@)">
            <summary>
                Reads data from an area of memory in a specified process. The entire area
                to be read must be accessible or the operation fails.
            </summary>
            <param name="hProcess">
                A handle to the process with memory that is being read. The handle must
                have <see cref="F:SilDev.WinApi.AccessRights.ProcessVmRead"/> access to the process.
            </param>
            <param name="lpBaseAddress">
                A pointer to the base address in the specified process from which to read.
                Before any data transfer occurs, the system verifies that all data in the
                base address and memory of the specified size is accessible for read
                access, and if it is not accessible the function fails.
            </param>
            <param name="lpBuffer">
                A pointer to a buffer that receives the contents from the address space of
                the specified process.
            </param>
            <param name="nSize">
                The number of bytes to be read from the specified process.
            </param>
            <param name="lpNumberOfBytesRead">
                A pointer to a variable that receives the number of bytes transferred into
                the specified buffer. If lpNumberOfBytesRead is <see langword="null"/>, the
                parameter is ignored.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.RedrawWindow(System.IntPtr,System.IntPtr,System.IntPtr,SilDev.WinApi.RedrawWindowFlags)">
            <summary>
                Updates the specified rectangle or region in a window's client area.
            </summary>
            <param name="hWnd">
                A handle to the window to be redrawn. If this parameter is
                <see langword="null"/>, the desktop window is updated.
            </param>
            <param name="lprcUpdate">
                A pointer to a RECT structure containing the coordinates, in device units,
                of the update rectangle. This parameter is ignored if the hrgnUpdate
                parameter identifies a region.
            </param>
            <param name="hrgnUpdate">
                A handle to the update region. If both the hrgnUpdate and lprcUpdate
                parameters are <see langword="null"/>, the entire client area is added to
                the update region.
            </param>
            <param name="flags">
                One or more redraw flags. This parameter can be used to invalidate or
                validate a window, control repainting, and control which windows are
                affected by <see cref="M:SilDev.WinApi.NativeMethods.RedrawWindow(System.IntPtr,System.IntPtr,System.IntPtr,SilDev.WinApi.RedrawWindowFlags)"/>.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.ReleaseCapture">
            <summary>
                Releases the mouse capture from a window in the current thread and restores
                normal mouse input processing. A window that has captured the mouse
                receives all mouse input, regardless of the position of the cursor, except
                when a mouse button is clicked while the cursor hot spot is in the window
                of another thread.
            </summary>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.ReleaseDC(System.IntPtr,System.IntPtr)">
            <summary>
                The ReleaseDC function releases a device context (DC), freeing it for use
                by other applications. The effect of the ReleaseDC function depends on the
                type of DC. It frees only common and window DCs. It has no effect on class
                or private DCs.
            </summary>
            <param name="hWnd">
                A handle to the window whose DC is to be released.
            </param>
            <param name="hDc">
                A handle to the DC to be released.
            </param>
            <returns>
                The return value indicates whether the DC was released. If the DC was
                released, the return value is 1.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.RemoveMenu(System.IntPtr,System.UInt32,SilDev.WinApi.ModifyMenuFlags)">
            <summary>
                Deletes a menu item or detaches a submenu from the specified menu. If the
                menu item opens a drop-down menu or submenu, RemoveMenu does not destroy
                the menu or its handle, allowing the menu to be reused. Before this
                function is called, the GetSubMenu function should retrieve a handle to the
                drop-down menu or submenu.
            </summary>
            <param name="hMenu">
                A handle to the menu to be changed.
            </param>
            <param name="uPosition">
                The menu item to be deleted, as determined by the uFlags parameter.
            </param>
            <param name="uFlags">
                Indicates how the uPosition parameter is interpreted. This parameter must
                be <see cref="F:SilDev.WinApi.ModifyMenuFlags.ByCommand"/> or
                <see cref="F:SilDev.WinApi.ModifyMenuFlags.ByPosition"/>.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.RmEndSession(System.UInt32)">
            <summary>
                Ends the Restart Manager session. This function should be called by the
                primary installer that has previously started the session by calling the
                RmStartSession function. The RmEndSession function can be called by a
                secondary installer that is joined to the session once no more resources
                need to be registered by the secondary installer.
            </summary>
            <param name="pSessionHandle">
                A handle to an existing Restart Manager session.
            </param>
            <returns>
                This is the most recent error received.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.RmGetList(System.UInt32,System.UInt32@,System.UInt32@,SilDev.WinApi.RmProcessInfo[],System.UInt32@)">
            <summary>
                Gets a list of all applications and services that are currently using
                resources that have been registered with the Restart Manager session.
            </summary>
            <param name="dwSessionHandle">
                A handle to an existing Restart Manager session.
            </param>
            <param name="pnProcInfoNeeded">
                A pointer to an array size necessary to receive RM_PROCESS_INFO structures
                required to return information for all affected applications and services.
            </param>
            <param name="pnProcInfo">
                A pointer to the total number of RM_PROCESS_INFO structures in an array and
                number of structures filled.
            </param>
            <param name="rgAffectedApps">
                An array of RM_PROCESS_INFO structures that list the applications and
                services using resources that have been registered with the session.
            </param>
            <param name="lpdwRebootReasons">
                Pointer to location that receives a value of the RM_REBOOT_REASON
                enumeration that describes the reason a system restart is needed.
            </param>
            <returns>
                This is the most recent error received.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.RmRegisterResources(System.UInt32,System.UInt32,System.String[],System.UInt32,SilDev.WinApi.RmUniqueProcess[],System.UInt32,System.String[])">
            <summary>
                Registers resources to a Restart Manager session. The Restart Manager uses
                the list of resources registered with the session to determine which
                applications and services must be shut down and restarted. Resources can be
                identified by filenames, service short names, or RM_UNIQUE_PROCESS
                structures that describe running applications. The RmRegisterResources
                function can be used by a primary or secondary installer.
            </summary>
            <param name="dwSessionHandle">
                A handle to an existing Restart Manager session.
            </param>
            <param name="nFiles">
                The number of files being registered.
            </param>
            <param name="rgsFilenames">
                An array of null-terminated strings of full filename paths.
            </param>
            <param name="nApplications">
                The number of processes being registered.
            </param>
            <param name="rgApplications">
                An array of RM_UNIQUE_PROCESS structures.
            </param>
            <param name="nServices">
                The number of services to be registered.
            </param>
            <param name="rgsServiceNames">
                An array of null-terminated strings of service short names.
            </param>
            <returns>
                This is the most recent error received.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.RmStartSession(System.UInt32@,System.Int32,System.String)">
            <summary>
                Starts a new Restart Manager session. A maximum of 64 Restart Manager
                sessions per user session can be open on the system at the same time. When
                this function starts a session, it returns a session handle and session key
                that can be used in subsequent calls to the Restart Manager API.
            </summary>
            <param name="pSessionHandle">
                A pointer to the handle of a Restart Manager session. The session handle
                can be passed in subsequent calls to the Restart Manager API.
            </param>
            <param name="dwSessionFlags">
                Reserved. This parameter should be 0.
            </param>
            <param name="strSessionKey">
                A null-terminated string that contains the session key to the new session.
                The string must be allocated before calling the RmStartSession function.
            </param>
            <returns>
                This is the most recent error received.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.SendInput(System.UInt32,SilDev.WinApi.DeviceInput[],System.Int32)">
            <summary>
                Synthesizes keystrokes, mouse motions, and button clicks.
            </summary>
            <param name="nInputs">
                The number of structures in the pInputs array.
            </param>
            <param name="pInputs">
                An array of <see cref="T:SilDev.WinApi.DeviceInput"/> structures. Each structure represents
                an event to be inserted into the keyboard or mouse input stream.
            </param>
            <param name="cbSize">
                The size, in bytes, of an <see cref="T:SilDev.WinApi.DeviceInput"/> structure. If cbSize is
                not the size of an <see cref="T:SilDev.WinApi.DeviceInput"/> structure, the function fails.
            </param>
            <returns>
                The function returns the number of events that it successfully inserted
                into the keyboard or mouse input stream. If the function returns zero, the
                input was already blocked by another thread.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.SendMessage(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
                Sends the specified message to a window or windows. The SendMessage
                function calls the window procedure for the specified window and does not
                return until the window procedure has processed the message.
            </summary>
            <param name="hWnd">
                A handle to the window whose window procedure will receive the message. If
                this parameter is HWND_BROADCAST ((HWND)0xffff), the message is sent to all
                top-level windows in the system, including disabled or invisible unowned
                windows, overlapped windows, and pop-up windows; but the message is not
                sent to child windows.
            </param>
            <param name="uMsg">
                The message to be sent.
            </param>
            <param name="wParam">
                Additional message-specific information.
            </param>
            <param name="lParam">
                Additional message-specific information.
            </param>
            <returns>
                The return value specifies the result of the message processing; it depends
                on the message sent.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.SendMessage(System.IntPtr,System.UInt32,System.IntPtr,SilDev.WinApi.CopyData@)">
            <summary>
                Sends the specified message to a window or windows. The SendMessage
                function calls the window procedure for the specified window and does not
                return until the window procedure has processed the message.
            </summary>
            <param name="hWnd">
                A handle to the window whose window procedure will receive the message. If
                this parameter is HWND_BROADCAST ((HWND)0xffff), the message is sent to all
                top-level windows in the system, including disabled or invisible unowned
                windows, overlapped windows, and pop-up windows; but the message is not
                sent to child windows.
            </param>
            <param name="uMsg">
                The message to be sent.
            </param>
            <param name="wParam">
                Additional message-specific information.
            </param>
            <param name="lParam">
                Additional message-specific information.
            </param>
            <returns>
                The return value specifies the result of the message processing; it depends
                on the message sent.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.SendMessageTimeout(System.IntPtr,System.UInt32,System.UIntPtr,System.IntPtr,System.UInt32,System.UInt32,System.UIntPtr@)">
            <summary>
                Sends the specified message to one or more windows.
            </summary>
            <param name="hWnd">
                A handle to the window whose window procedure will receive the message.
                <para>
                    If this parameter is HWND_BROADCAST ((HWND)0xffff), the message is sent
                    to all top-level windows in the system, including disabled or invisible
                    unowned windows. The function does not return until each window has
                    timed out. Therefore, the total wait time can be up to the value of
                    uTimeout multiplied by the number of top-level windows.
                </para>
            </param>
            <param name="msg">
                The message to be sent.
            </param>
            <param name="wParam">
                Any additional message-specific information.
            </param>
            <param name="lParam">
                Any additional message-specific information.
            </param>
            <param name="fuFlags">
                The behavior of this function. This parameter can be one or more of the
                following values.
                <para>
                    SMTO_ABORTIFHUNG (0x2): The function returns without waiting for the
                    time-out period to elapse if the receiving thread appears to not
                    respond or hangs.
                </para>
                <para>
                    SMTO_BLOCK (0x1): Prevents the calling thread from processing any other
                    requests until the function returns.
                </para>
                <para>
                    SMTO_NORMAL (0x0): The calling thread is not prevented from processing
                    other requests while waiting for the function to return.
                </para>
                <para>
                    SMTO_NOTIMEOUTIFNOTHUNG (0x8): The function does not enforce the
                    time-out period as long as the receiving thread is processing messages.
                </para>
                <para>
                    SMTO_ERRORONEXIT (0x20): The function should return 0 if the receiving
                    window is destroyed or its owning thread dies while the message is
                    being processed.
                </para>
            </param>
            <param name="uTimeout">
                The duration of the time-out period, in milliseconds. If the message is a
                broadcast message, each window can use the full time-out period. For
                example, if you specify a five second time-out period and there are three
                top-level windows that fail to process the message, you could have up to a
                15 second delay.
            </param>
            <param name="lpdwResult">
                The result of the message processing. The value of this parameter depends
                on the message that is specified.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero. SendMessageTimeout
                does not provide information about individual windows timing out if
                HWND_BROADCAST ((HWND)0xffff) is used.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.SendMessageTimeoutText(System.IntPtr,System.UInt32,System.UIntPtr,System.Text.StringBuilder,System.UInt32,System.UInt32,System.IntPtr@)">
            <summary>
                Sends the specified message to one or more windows.
            </summary>
            <param name="hWnd">
                A handle to the window whose window procedure will receive the message.
                <para>
                    If this parameter is HWND_BROADCAST ((HWND)0xffff), the message is sent
                    to all top-level windows in the system, including disabled or invisible
                    unowned windows. The function does not return until each window has
                    timed out. Therefore, the total wait time can be up to the value of
                    uTimeout multiplied by the number of top-level windows.
                </para>
            </param>
            <param name="msg">
                The message to be sent.
            </param>
            <param name="wParam">
                Any additional message-specific information.
            </param>
            <param name="lParam">
                Any additional message-specific information.
            </param>
            <param name="fuFlags">
                The behavior of this function. This parameter can be one or more of the
                following values.
                <para>
                    SMTO_ABORTIFHUNG (0x2): The function returns without waiting for the
                    time-out period to elapse if the receiving thread appears to not
                    respond or hangs.
                </para>
                <para>
                    SMTO_BLOCK (0x1): Prevents the calling thread from processing any other
                    requests until the function returns.
                </para>
                <para>
                    SMTO_NORMAL (0x0): The calling thread is not prevented from processing
                    other requests while waiting for the function to return.
                </para>
                <para>
                    SMTO_NOTIMEOUTIFNOTHUNG (0x8): The function does not enforce the
                    time-out period as long as the receiving thread is processing messages.
                </para>
                <para>
                    SMTO_ERRORONEXIT (0x20): The function should return 0 if the receiving
                    window is destroyed or its owning thread dies while the message is
                    being processed.
                </para>
            </param>
            <param name="uTimeout">
                The duration of the time-out period, in milliseconds. If the message is a
                broadcast message, each window can use the full time-out period. For
                example, if you specify a five second time-out period and there are three
                top-level windows that fail to process the message, you could have up to a
                15 second delay.
            </param>
            <param name="lpdwResult">
                The result of the message processing. The value of this parameter depends
                on the message that is specified.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero. SendMessageTimeout
                does not provide information about individual windows timing out if
                HWND_BROADCAST ((HWND)0xffff) is used.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.SendNotifyMessage(System.IntPtr,System.UInt32,System.UIntPtr,System.String)">
            <summary>
                Sends the specified message to a window or windows. If the window was
                created by the calling thread, SendNotifyMessage calls the window procedure
                for the window and does not return until the window procedure has processed
                the message. If the window was created by a different thread,
                SendNotifyMessage passes the message to the window procedure and returns
                immediately; it does not wait for the window procedure to finish processing
                the message.
            </summary>
            <param name="hWnd">
                A handle to the window whose window procedure will receive the message. If
                this parameter is HWND_BROADCAST ((HWND)0xffff), the message is sent to all
                top-level windows in the system, including disabled or invisible unowned
                windows, overlapped windows, and pop-up windows; but the message is not
                sent to child windows.
            </param>
            <param name="msg">
                The message to be sent.
            </param>
            <param name="wParam">
                Additional message-specific information.
            </param>
            <param name="lParam">
                Additional message-specific information.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.SetCurrentDirectory(System.String)">
            <summary>
                Changes the current directory for the current process.
            </summary>
            <param name="lpPathName">
                The path to the new current directory.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero. If the function
                fails, the return value is zero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.SetCursorPos(System.UInt32,System.UInt32)">
            <summary>
                Moves the cursor to the specified screen coordinates. If the new
                coordinates are not within the screen rectangle set by the most recent
                ClipCursor function call, the system automatically adjusts the coordinates
                so that the cursor stays within the rectangle.
            </summary>
            <param name="x">
                The new x-coordinate of the cursor, in screen coordinates.
            </param>
            <param name="y">
                The new y-coordinate of the cursor, in screen coordinates.
            </param>
            <returns>
                Returns nonzero if successful or zero otherwise.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.SetForegroundWindow(System.IntPtr)">
            <summary>
                Brings the thread that created the specified window into the foreground and
                activates the window. Keyboard input is directed to the window, and various
                visual cues are changed for the user. The system assigns a slightly higher
                priority to the thread that created the foreground window than it does to
                other threads.
            </summary>
            <param name="hWnd">
                A handle to the window that should be activated and brought to the
                foreground.
            </param>
            <returns>
                If the window was brought to the foreground, the return value is nonzero.
                <para>
                    If the window was not brought to the foreground, the return value is
                    zero.
                </para>
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.SetParent(System.IntPtr,System.IntPtr)">
            <summary>
                Changes the parent window of the specified child window.
            </summary>
            <param name="hWndChild">
                A handle to the child window.
            </param>
            <param name="hWndNewParent">
                A handle to the new parent window. If this parameter is
                <see langword="null"/>, the desktop window becomes the new parent window.
                If this parameter is HWND_MESSAGE, the child window becomes a message-only
                window.
            </param>
            <returns>
                If the function succeeds, the return value is a handle to the previous
                parent window.
                <para>
                    If the function fails, the return value is <see langword="null"/>.
                </para>
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.SetProcessDPIAware">
            <summary>
                Sets the process-default DPI awareness to system-DPI awareness.
            </summary>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.SetProcessWorkingSetSize(System.IntPtr,System.UIntPtr,System.UIntPtr)">
            <summary>
                Sets the minimum and maximum working set sizes for the specified process.
            </summary>
            <param name="hProcess">
                A handle to the process whose working set sizes is to be set.
                <para>
                    The handle must have the <see cref="F:SilDev.WinApi.AccessRights.ProcessSetQuota"/>
                    access right.
                </para>
            </param>
            <param name="dwMinimumWorkingSetSize">
                The minimum working set size for the process, in bytes. The virtual memory
                manager attempts to keep at least this much memory resident in the process
                whenever the process is active.
                <para>
                    This parameter must be greater than zero but less than or equal to the
                    maximum working set size. The default size is 50 pages (for example,
                    this is 204,800 bytes on systems with a 4K page size). If the value is
                    greater than zero but less than 20 pages, the minimum value is set to
                    20 pages.
                </para>
                <para>
                    If both dwMinimumWorkingSetSize and dwMaximumWorkingSetSize have the
                    value (SIZE_T)–1, the function removes as many pages as possible from
                    the working set of the specified process.
                </para>
            </param>
            <param name="dwMaximumWorkingSetSize">
                The maximum working set size for the process, in bytes. The virtual memory
                manager attempts to keep no more than this much memory resident in the
                process whenever the process is active and available memory is low.
                <para>
                    This parameter must be greater than or equal to 13 pages (for example,
                    53,248 on systems with a 4K page size), and less than the system-wide
                    maximum (number of available pages minus 512 pages). The default size
                    is 345 pages (for example, this is 1,413,120 bytes on systems with a 4K
                    page size).
                </para>
                <para>
                    If both dwMinimumWorkingSetSize and dwMaximumWorkingSetSize have the
                    value (SIZE_T)–1, the function removes as many pages as possible from
                    the working set of the specified process.
                </para>
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.SetStdHandle(System.Int32,System.IntPtr)">
            <summary>
                Sets the handle for the specified standard device (standard input, standard
                output, or standard error).
            </summary>
            <param name="nStdHandle">
                The standard device for which the handle is to be set.
            </param>
            <param name="hHandle">
                The handle for the standard device.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.SetTimer(System.IntPtr,System.UIntPtr,System.UInt32,SilDev.WinApi.TimerProc)">
            <summary>
                Creates a timer with the specified time-out value.
            </summary>
            <param name="hWnd">
                A handle to the window to be associated with the timer. This window must be
                owned by the calling thread. If a <see langword="null"/> value for hWnd is
                passed in along with an nIDEvent of an existing timer, that timer will be
                replaced in the same way that an existing non-<see langword="null"/> hWnd
                timer will be.
            </param>
            <param name="nIdEvent">
                A nonzero timer identifier. If the hWnd parameter is <see langword="null"/>
                , and the nIDEvent does not match an existing timer then it is ignored and
                a new timer ID is generated. If the hWnd parameter is not
                <see langword="null"/> and the window specified by hWnd already has a timer
                with the value nIDEvent, then the existing timer is replaced by the new
                timer. When SetTimer replaces a timer, the timer is reset. Therefore, a
                message will be sent after the current time-out value elapses, but the
                previously set time-out value is ignored. If the call is not intended to
                replace an existing timer, nIDEvent should be 0 if the hWnd is
                <see langword="null"/>.
            </param>
            <param name="uElapse">
                The time-out value, in milliseconds.
            </param>
            <param name="lpTimerFunc">
                A pointer to the function to be notified when the time-out value elapses.
            </param>
            <returns>
                If the function succeeds and the hWnd parameter is <see langword="null"/>,
                the return value is an integer identifying the new timer. An application
                can pass this value to the KillTimer function to destroy the timer.
                <para>
                    If the function succeeds and the hWnd parameter is not
                    <see langword="null"/>, then the return value is a nonzero integer. An
                    application can pass the value of the nIDEvent parameter to the
                    KillTimer function to destroy the timer.
                </para>
                <para>
                    If the function fails to create a timer, the return value is zero.
                </para>
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.SetWindowPlacement(System.IntPtr,SilDev.WinApi.WindowPlacement@)">
            <summary>
                Sets the show state and the restored, minimized, and maximized positions of
                the specified window.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
            <param name="lpwndpl">
                A pointer to a <see cref="T:SilDev.WinApi.WindowPlacement"/> structure that specifies the
                new show state and window positions.
                <para>
                    Before calling SetWindowPlacement, set the length member of the
                    <see cref="T:SilDev.WinApi.WindowPlacement"/> structure to sizeof(
                    <see cref="T:SilDev.WinApi.WindowPlacement"/>). SetWindowPlacement fails if the length
                    member is not set correctly.
                </para>
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.SetWindowPos(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,SilDev.WinApi.SetWindowPosFlags)">
            <summary>
                Changes the size, position, and Z order of a child, pop-up, or top-level
                window. These windows are ordered according to their appearance on the
                screen. The topmost window receives the highest rank and is the first
                window in the Z order.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
            <param name="hWndInsertAfter">
                A handle to the window to precede the positioned window in the Z order.
                This parameter must be a window handle or one of the following values.
                <para>
                    HWND_BOTTOM ((HWND)1): Places the window at the bottom of the Z order.
                    If the hWnd parameter identifies a topmost window, the window loses its
                    topmost status and is placed at the bottom of all other windows.
                </para>
                <para>
                    HWND_NOTOPMOST ((HWND)-2): Places the window above all non-topmost
                    windows (that is, behind all topmost windows). This flag has no effect
                    if the window is already a non-topmost window.
                </para>
                <para>
                    HWND_TOP ((HWND)0): Places the window at the top of the Z order.
                </para>
                <para>
                    HWND_TOPMOST ((HWND)-1): Places the window above all non-topmost
                    windows. The window maintains its topmost position even when it is
                    deactivated.
                </para>
            </param>
            <param name="x">
                The new position of the left side of the window, in client coordinates.
            </param>
            <param name="y">
                The new position of the top of the window, in client coordinates.
            </param>
            <param name="cx">
                The new width of the window, in pixels.
            </param>
            <param name="cy">
                The new height of the window, in pixels.
            </param>
            <param name="uFlags">
                The window sizing and positioning flags.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.SetWindowsHookEx(SilDev.WinApi.Win32HookFlags,SilDev.WinApi.HookProc,System.IntPtr,System.Int32)">
            <summary>
                Installs an application-defined hook procedure into a hook chain. You would
                install a hook procedure to monitor the system for certain types of events.
                These events are associated either with a specific thread or with all
                threads in the same desktop as the calling thread.
            </summary>
            <param name="idHook">
                The type of hook procedure to be installed.
            </param>
            <param name="lpfn">
                A pointer to the hook procedure. If the dwThreadId parameter is zero or
                specifies the identifier of a thread created by a different process, the
                lpfn parameter must point to a hook procedure in a DLL. Otherwise, lpfn can
                point to a hook procedure in the code associated with the current process.
            </param>
            <param name="hMod">
                A handle to the DLL containing the hook procedure pointed to by the lpfn
                parameter. The hMod parameter must be set to <see langword="null"/> if the
                dwThreadId parameter specifies a thread created by the current process and
                if the hook procedure is within the code associated with the current
                process.
            </param>
            <param name="dwThreadId">
                The identifier of the thread with which the hook procedure is to be
                associated. For desktop apps, if this parameter is zero, the hook procedure
                is associated with all existing threads running in the same desktop as the
                calling thread. For Windows Store apps, see the Remarks section.
            </param>
            <returns>
                If the function succeeds, the return value is the handle to the hook
                procedure. If the function fails, the return value is
                <see langword="null"/>.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.SetWindowText(System.IntPtr,System.String)">
            <summary>
                Changes the text of the specified window's title bar (if it has one). If
                the specified window is a control, the text of the control is changed.
                However, SetWindowText cannot change the text of a control in another
                application.
            </summary>
            <param name="hWnd">
                A handle to the window or control whose text is to be changed.
            </param>
            <param name="lpString">
                The new title or control text.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.SetWindowTheme(System.IntPtr,System.String,System.String)">
            <summary>
                Causes a window to use a different set of visual style information than its
                class normally uses.
            </summary>
            <param name="hWnd">
                A handle to the window whose visual style information is to be changed.
            </param>
            <param name="pszSubAppName">
                Pointer to a string that contains the application name to use in place of
                the calling application's name. If this parameter is <see langword="null"/>
                , the calling application's name is used.
            </param>
            <param name="pszSubIdList">
                Pointer to a string that contains a semicolon-separated list of CLSID names
                to use in place of the actual list passed by the window's class. If this
                parameter is <see langword="null"/>, the ID list from the calling class is
                used.
            </param>
            <returns>
                If this function succeeds, it returns S_OK. Otherwise, it returns an
                HRESULT error code.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.SetWindowThemeAttribute(System.IntPtr,SilDev.WinApi.WindowThemeAttributeTypes,SilDev.WinApi.WindowThemeAttributeOptions@,System.UInt32)">
            <summary>
                Sets attributes to control how visual styles are applied to a specified
                window.
            </summary>
            <param name="hWnd">
                Handle to a window to apply changes to.
            </param>
            <param name="eAttribute">
                Value of type <see cref="T:SilDev.WinApi.WindowThemeAttributeTypes"/> that specifies the
                type of attribute to set.
            </param>
            <param name="pvAttribute">
                A pointer that specifies attributes to set. Type is determined by the value
                of the eAttribute value.
            </param>
            <param name="cbAttribute">
                Specifies the size, in bytes, of the data pointed to by pvAttribute.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.SHAppBarMessage(SilDev.WinApi.AppBarMessageOption,SilDev.WinApi.AppBarData@)">
            <summary>
                Sends an appbar message to the system.
            </summary>
            <param name="dwMessage">
                Appbar message value to send.
            </param>
            <param name="pData">
                A pointer to an <see cref="T:SilDev.WinApi.AppBarData"/> structure. The content of the
                structure on entry and on exit depends on the value set in the dwMessage
                parameter. See the individual message pages for specifics.
            </param>
            <returns>
                This function returns a message-dependent value. For more information, see
                the Windows SDK documentation for the specific appbar message sent. Links
                to those documents are given in the See Also section.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.ShellExecute(System.IntPtr,System.String,System.String,System.String,System.String,SilDev.WinApi.ShowWindowFlags)">
            <summary>
                Performs an operation on a specified file.
            </summary>
            <param name="hWnd">
                A handle to the parent window used for displaying a UI or error messages.
                This value can be <see langword="null"/> if the operation is not associated
                with a window.
            </param>
            <param name="lpOperation">
                A pointer to a null-terminated string, referred to in this case as a verb,
                that specifies the action to be performed. The set of available verbs
                depends on the particular file or folder. Generally, the actions available
                from an object's shortcut menu are available verbs.
            </param>
            <param name="lpFile">
                A pointer to a null-terminated string that specifies the file or object on
                which to execute the specified verb. To specify a Shell namespace object,
                pass the fully qualified parse name. Note that not all verbs are supported
                on all objects. For example, not all document types support the "print"
                verb. If a relative path is used for the lpDirectory parameter do not use a
                relative path for lpFile.
            </param>
            <param name="lpParameters">
                If lpFile specifies an executable file, this parameter is a pointer to a
                null-terminated string that specifies the parameters to be passed to the
                application. The format of this string is determined by the verb that is to
                be invoked. If lpFile specifies a document file, lpParameters should be
                <see langword="null"/>.
            </param>
            <param name="lpDirectory">
                A pointer to a null-terminated string that specifies the default (working)
                directory for the action. If this value is <see langword="null"/>, the
                current working directory is used. If a relative path is provided at
                lpFile, do not use a relative path for lpDirectory.
            </param>
            <param name="nShowCmd">
                The flags that specify how an application is to be displayed when it is
                opened. If lpFile specifies a document file, the flag is simply passed to
                the associated application. It is up to the application to decide how to
                handle it.
            </param>
            <returns>
                If the function succeeds, it returns a value greater than 32. If the
                function fails, it returns an error value that indicates the cause of the
                failure. The return value is cast as an HINSTANCE for backward
                compatibility with 16-bit Windows applications. It is not a
                <see langword="true"/> HINSTANCE, however.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.SHGetFileInfo(System.String,System.UInt32,SilDev.WinApi.ShFileInfo@,System.UInt32,SilDev.WinApi.FileInfoFlags)">
            <summary>
                Retrieves information about an object in the file system, such as a file,
                folder, directory, or drive root.
            </summary>
            <param name="pszPath">
                A pointer to a null-terminated string of maximum length MAX_PATH that
                contains the path and file name. Both absolute and relative paths are
                valid.
                <para>
                    If the uFlags parameter includes the <see cref="F:SilDev.WinApi.FileInfoFlags.PidL"/>
                    flag, this parameter must be the address of an ITEMIDLIST (PIDL)
                    structure that contains the list of item identifiers that uniquely
                    identifies the file within the Shell's namespace. The PIDL must be a
                    fully qualified PIDL. Relative PIDLs are not allowed.
                </para>
                <para>
                    If the uFlags parameter includes the
                    <see cref="F:SilDev.WinApi.FileInfoFlags.UseFileAttributes"/> flag, this parameter does
                    not have to be a valid file name. The function will proceed as if the
                    file exists with the specified name and with the file attributes passed
                    in the dwFileAttributes parameter. This allows you to obtain
                    information about a file type by passing just the extension for pszPath
                    and passing <see cref="F:System.IO.FileAttributes.Normal"/> in
                    dwFileAttributes.
                </para>
                <para>
                    This string can use either short (the 8.3 form) or long file names.
                </para>
            </param>
            <param name="dwFileAttributes">
                A combination of one or more file attribute flags (FILE_ATTRIBUTE_ values
                as defined in Winnt.h). If uFlags does not include the
                <see cref="F:SilDev.WinApi.FileInfoFlags.UseFileAttributes"/> flag, this parameter is
                ignored.
            </param>
            <param name="psfi">
                Pointer to a <see cref="T:SilDev.WinApi.ShFileInfo"/> structure to receive the file
                information.
            </param>
            <param name="cbFileInfo">
                The size, in bytes, of the <see cref="T:SilDev.WinApi.ShFileInfo"/> structure pointed to by
                the psfi parameter.
            </param>
            <param name="uFlags">
                The flags that specify the file information to retrieve.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.ShowScrollBar(System.IntPtr,SilDev.WinApi.ShowScrollBarOption,System.Boolean)">
            <summary>
                The ShowScrollBar function shows or hides the specified scroll bar.
            </summary>
            <param name="hWnd">
                Handle to a scroll bar control or a window with a standard scroll bar,
                depending on the value of the wBar parameter.
            </param>
            <param name="wBar">
                Specifies the scroll bar(s) to be shown or hidden.
            </param>
            <param name="bShow">
                Specifies whether the scroll bar is shown or hidden. If this parameter is
                <see langword="true"/>, the scroll bar is shown; otherwise, it is hidden.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.ShowWindow(System.IntPtr,SilDev.WinApi.ShowWindowFlags)">
            <summary>
                Sets the specified window's show state.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
            <param name="nCmdShow">
                Controls how the window is to be shown. This parameter is ignored the first
                time an application calls ShowWindow, if the program that launched the
                application provides a STARTUPINFO structure. Otherwise, the first time
                ShowWindow is called, the value should be the value obtained by the WinMain
                function in its nCmdShow parameter.
            </param>
            <returns>
                If the window was previously visible, the return value is nonzero.
                <para>
                    If the window was previously hidden, the return value is zero.
                </para>
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.ShowWindowAsync(System.IntPtr,SilDev.WinApi.ShowWindowFlags)">
            <summary>
                Sets the show state of a window without waiting for the operation to
                complete.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
            <param name="nCmdShow">
                Controls how the window is to be shown. For a list of possible values, see
                the description of the ShowWindow function.
            </param>
            <returns>
                If the operation was successfully started, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.StartService(System.IntPtr,System.Int32,System.Int32)">
            <summary>
                Starts a service.
            </summary>
            <param name="hService">
                A handle to the service. This handle is returned by the OpenService or
                CreateService function, and it must have the
                <see cref="F:SilDev.WinApi.ServiceAccessRights.Start"/> access right.
            </param>
            <param name="dwNumServiceArgs">
                The number of strings in the lpServiceArgVectors array. If
                lpServiceArgVectors is <see langword="null"/>, this parameter can be zero.
            </param>
            <param name="lpServiceArgVectors">
                The null-terminated strings to be passed to the ServiceMain function for
                the service as arguments. If there are no arguments, this parameter can be
                <see langword="null"/>. Otherwise, the first argument
                (lpServiceArgVectors[0]) is the name of the service, followed by any
                additional arguments (lpServiceArgVectors[1] through
                lpServiceArgVectors[dwNumServiceArgs-1]).
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.TerminateProcess(System.IntPtr,System.UInt32)">
            <summary>
                Terminates the specified process and all of its threads.
            </summary>
            <param name="hProcess">
                A handle to the process to be terminated.
                <para>
                    The handle must have the <see cref="F:SilDev.WinApi.AccessRights.ProcessTerminate"/>
                    access right.
                </para>
            </param>
            <param name="uExitCode">
                The exit code to be used by the process and threads terminated as a result
                of this call. Use the GetExitCodeProcess function to retrieve a process's
                exit value. Use the GetExitCodeThread function to retrieve a thread's exit
                value.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.TimeBeginPeriod(System.UInt32)">
            <summary>
                The timeBeginPeriod function requests a minimum resolution for periodic
                timers.
            </summary>
            <param name="uPeriod">
                Minimum timer resolution, in milliseconds, for the application or device
                driver. A lower value specifies a higher (more accurate) resolution.
            </param>
            <returns>
                Returns TIMERR_NOERROR if successful or TIMERR_NOCANDO if the resolution
                specified in uPeriod is out of range.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.TimeEndPeriod(System.UInt32)">
            <summary>
                The timeEndPeriod function clears a previously set minimum timer
                resolution.
            </summary>
            <param name="uPeriod">
                Minimum timer resolution specified in the previous call to the
                timeBeginPeriod function.
            </param>
            <returns>
                Returns TIMERR_NOERROR if successful or TIMERR_NOCANDO if the resolution
                specified in uPeriod is out of range.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.UnhookWindowsHookEx(System.IntPtr)">
            <summary>
                Removes a hook procedure installed in a hook chain by the SetWindowsHookEx
                function.
            </summary>
            <param name="hhk">
                A handle to the hook to be removed. This parameter is a hook handle
                obtained by a previous call SetWindowsHookEx.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero. If the function
                fails, the return value is zero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.UpdateWindow(System.IntPtr)">
            <summary>
                The UpdateWindow function updates the client area of the specified window
                by sending a WM_PAINT message to the window if the window's update region
                is not empty. The function sends a WM_PAINT message directly to the window
                procedure of the specified window, bypassing the application queue. If the
                update region is empty, no message is sent.
            </summary>
            <param name="hWnd">
                Handle to the window to be updated.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.VirtualAllocEx(System.IntPtr,System.IntPtr,System.IntPtr,SilDev.WinApi.MemAllocTypes,SilDev.WinApi.MemProtectFlags)">
            <summary>
                Reserves, commits, or changes the state of a region of memory within the
                virtual address space of a specified process. The function initializes the
                memory it allocates to zero.
            </summary>
            <param name="hProcess">
                The handle to a process. The function allocates memory within the virtual
                address space of this process.
                <para>
                    The handle must have the <see cref="F:SilDev.WinApi.AccessRights.ProcessVmOperation"/>
                    access right.
                </para>
            </param>
            <param name="lpAddress">
                The pointer that specifies a desired starting address for the region of
                pages that you want to allocate.
            </param>
            <param name="dwSize">
                The size of the region of memory to allocate, in bytes.
            </param>
            <param name="flAllocationType">
                The type of memory allocation. This parameter must contain one of the
                following values.
            </param>
            <param name="flProtect">
                The memory protection for the region of pages to be allocated.
            </param>
            <returns>
                If the function succeeds, the return value is the base address of the
                allocated region of pages.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.VirtualFreeEx(System.IntPtr,System.IntPtr,System.IntPtr,SilDev.WinApi.MemFreeType)">
            <summary>
                Releases, decommits, or releases and decommits a region of memory within
                the virtual address space of a specified process.
            </summary>
            <param name="hProcess">
                The handle to a process. The function allocates memory within the virtual
                address space of this process.
                <para>
                    The handle must have the <see cref="F:SilDev.WinApi.AccessRights.ProcessVmOperation"/>
                    access right.
                </para>
            </param>
            <param name="lpAddress">
                A pointer to the starting address of the region of memory to be freed.
                <para>
                    If the dwFreeType parameter is <see cref="F:SilDev.WinApi.MemAllocTypes.Release"/>,
                    lpAddress must be the base address returned by the VirtualAllocEx
                    function when the region is reserved.
                </para>
            </param>
            <param name="dwSize">
                The size of the region of memory to free, in bytes.
                <para>
                    If the dwFreeType parameter is <see cref="F:SilDev.WinApi.MemAllocTypes.Release"/>,
                    dwSize must be 0 (zero). The function frees the entire region that is
                    reserved in the initial allocation call to VirtualAllocEx.
                </para>
                <para>
                    If dwFreeType is <see cref="F:SilDev.WinApi.MemAllocTypes.Decommit"/>, the function
                    decommits all memory pages that contain one or more bytes in the range
                    from the lpAddress parameter to (lpAddress+dwSize). This means, for
                    example, that a 2-byte region of memory that straddles a page boundary
                    causes both pages to be decommitted. If lpAddress is the base address
                    returned by VirtualAllocEx and dwSize is 0 (zero), the function
                    decommits the entire region that is allocated by VirtualAllocEx. After
                    that, the entire region is in the reserved state.
                </para>
            </param>
            <param name="dwFreeType">
                The type of free operation.
            </param>
            <returns>
                If the function succeeds, the return value is a nonzero value.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.WaveOutGetVolume(System.IntPtr,System.UInt32@)">
            <summary>
                The waveOutGetVolume function retrieves the current volume level of the
                specified waveform-audio output device.
            </summary>
            <param name="hwo">
                Handle to an open waveform-audio output device. This parameter can also be
                a device identifier.
            </param>
            <param name="dwVolume">
                Pointer to a variable to be filled with the current volume setting. The
                low-order word of this location contains the left-channel volume setting,
                and the high-order word contains the right-channel setting. A value of
                0xFFFF represents full volume, and a value of 0x0 is silence.
            </param>
            <returns>
                Returns MMSYSERR_NOERROR if successful or an error otherwise.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.WaveOutSetVolume(System.IntPtr,System.UInt32)">
            <summary>
                The waveOutSetVolume function sets the volume level of the specified
                waveform-audio output device.
            </summary>
            <param name="hwo">
                Handle to an open waveform-audio output device. This parameter can also be
                a device identifier.
            </param>
            <param name="dwVolume">
                New volume setting. The low-order word contains the left-channel volume
                setting, and the high-order word contains the right-channel setting. A
                value of 0xFFFF represents full volume, and a value of 0x0 is silence.
            </param>
            <returns>
                Returns MMSYSERR_NOERROR if successful or an error otherwise.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.WritePrivateProfileString(System.String,System.String,System.String,System.String)">
            <summary>
                Copies a string into the specified section of an initialization file.
            </summary>
            <param name="lpAppName">
                The name of the section to which the string will be copied. If the section
                does not exist, it is created. The name of the section is case-independent;
                the string can be any combination of uppercase and lowercase letters.
            </param>
            <param name="lpKeyName">
                The name of the key to be associated with a string. If the key does not
                exist in the specified section, it is created. If this parameter is
                <see langword="null"/>, the entire section, including all entries within
                the section, is deleted.
            </param>
            <param name="lpString">
                A null-terminated string to be written to the file. If this parameter is
                <see langword="null"/>, the key pointed to by the lpKeyName parameter is
                deleted.
            </param>
            <param name="lpFileName">
                The name of the initialization file.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.WriteProcessMemory(System.IntPtr,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr@)">
            <summary>
                Writes data to an area of memory in a specified process. The entire area to
                be written to must be accessible or the operation fails.
            </summary>
            <param name="hProcess">
                A handle to the process memory to be modified. The handle must have
                <see cref="F:SilDev.WinApi.AccessRights.ProcessVmWrite"/> and
                <see cref="F:SilDev.WinApi.AccessRights.ProcessVmOperation"/> access to the process.
            </param>
            <param name="lpBaseAddress">
                A pointer to the base address in the specified process to which data is
                written. Before data transfer occurs, the system verifies that all data in
                the base address and memory of the specified size is accessible for write
                access, and if it is not accessible, the function fails.
            </param>
            <param name="lpBuffer">
                A pointer to the buffer that contains data to be written in the address
                space of the specified process.
            </param>
            <param name="nSize">
                The number of bytes to be written to the specified process.
            </param>
            <param name="lpNumberOfBytesWritten">
                A pointer to a variable that receives the number of bytes transferred into
                the specified process. This parameter is optional. If
                lpNumberOfBytesWritten is <see langword="null"/>, the parameter is ignored.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.SetWindowLong(System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
                Changes an attribute of the specified window. The function also sets the
                32-bit (long) value at the specified offset into the extra window memory.
            </summary>
            <param name="hWnd">
                A handle to the window and, indirectly, the class to which the window
                belongs.
            </param>
            <param name="nIndex">
                The zero-based offset to the value to be set. Valid values are in the range
                zero through the number of bytes of extra window memory, minus the size of
                an integer.
            </param>
            <param name="dwNewLong">
                The replacement value.
            </param>
        </member>
        <member name="T:SilDev.WinApi.ProcessInformation">
            <summary>
                Contains information about a newly created process and its primary thread.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ProcessInformation.hProcess">
            <summary>
                A handle to the newly created process. The handle is used to specify the
                process in all functions that perform operations on the process object.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ProcessInformation.hThread">
            <summary>
                A handle to the primary thread of the newly created process. The handle is
                used to specify the thread in all functions that perform operations on the
                thread object.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ProcessInformation.dwProcessId">
            <summary>
                A value that can be used to identify a process. The value is valid from the
                time the process is created until all handles to the process are closed and
                the process object is freed; at this point, the identifier may be reused.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ProcessInformation.dwThreadId">
            <summary>
                A value that can be used to identify a thread. The value is valid from the
                time the thread is created until all handles to the thread are closed and
                the thread object is freed; at this point, the identifier may be reused.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.SecurityAttributes">
            <summary>
                Contains the security descriptor for an object and specifies whether the
                handle retrieved by specifying this structure is inheritable. This
                structure provides security settings for objects created by various
                functions.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SecurityAttributes.nLength">
            <summary>
                The size, in bytes, of this structure. Set this value to the size of the
                <see cref="T:SilDev.WinApi.SecurityAttributes"/> structure.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SecurityAttributes.lpSecurityDescriptor">
            <summary>
                A pointer to a security descriptor structure that controls access to the
                object. If the value of this member is <see langword="null"/>, the object
                is assigned the default security descriptor associated with the access
                token of the calling process. This is not the same as granting access to
                everyone by assigning a <see langword="null"/> discretionary access control
                list (DACL). By default, the default DACL in the access token of a process
                allows access only to the user represented by the access token.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SecurityAttributes.bInheritHandle">
            <summary>
                A value that specifies whether the returned handle is inherited when a new
                process is created. If this member is <see langword="true"/>, the new
                process inherits the handle.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.ServiceStatus">
            <summary>
                Contains status information for a service.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceStatus.dwCheckPoint">
            <summary>
                The check-point value the service increments periodically to report its
                progress during a lengthy start, stop, pause, or continue operation. For
                example, the service should increment this value as it completes each step
                of its initialization when it is starting up. The user interface program
                that invoked the operation on the service uses this value to track the
                progress of the service during a lengthy operation. This value is not valid
                and should be zero when the service does not have a start, stop, pause, or
                continue operation pending.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceStatus.dwControlsAccepted">
            <summary>
                The control codes the service accepts and processes in its handler function
                (see Handler and HandlerEx). A user interface process can control a service
                by specifying a control command in the ControlService or ControlServiceEx
                function. By default, all services accept the  value. To accept the
                SERVICE_CONTROL_DEVICEEVENT value, the service must register to receive
                device events by using the RegisterDeviceNotification function.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceStatus.dwCurrentState">
            <summary>
                The current state of the service.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceStatus.dwServiceSpecificExitCode">
            <summary>
                A service-specific error code that the service returns when an error occurs
                while the service is starting or stopping. This value is ignored unless the
                dwWin32ExitCode member is set to ERROR_SERVICE_SPECIFIC_ERROR.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceStatus.dwServiceType">
            <summary>
                The type of service.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceStatus.dwWaitHint">
            <summary>
                The estimated time required for a pending start, stop, pause, or continue
                operation, in milliseconds. Before the specified amount of time has
                elapsed, the service should make its next call to the SetServiceStatus
                function with either an incremented dwCheckPoint value or a change in
                dwCurrentState. If the amount of time specified by dwWaitHint passes, and
                dwCheckPoint has not been incremented or dwCurrentState has not changed,
                the service control manager or service control program can assume that an
                error has occurred and the service should be stopped. However, if the
                service shares a process with other services, the service control manager
                cannot terminate the service application because it would have to terminate
                the other services sharing the process as well.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceStatus.dwWin32ExitCode">
            <summary>
                The error code the service uses to report an error that occurs when it is
                starting or stopping. To return an error code specific to the service, the
                service must set this value to ERROR_SERVICE_SPECIFIC_ERROR to indicate
                that the dwServiceSpecificExitCode member contains the error code. The
                service should set this value to NO_ERROR when it is running and on normal
                termination.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.StartupInfo">
            <summary>
                Specifies the window station, desktop, standard handles, and appearance of
                the main window for a process at creation time.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.StartupInfo.cb">
            <summary>
                The size of the structure, in bytes.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.StartupInfo.lpReserved">
            <summary>
                Reserved; must be <see langword="null"/>.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.StartupInfo.lpDesktop">
            <summary>
                The name of the desktop, or the name of both the desktop and window station
                for this process. A backslash in the string indicates that the string
                includes both the desktop and window station names.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.StartupInfo.lpTitle">
            <summary>
                For console processes, this is the title displayed in the title bar if a
                new console window is created. If <see langword="null"/>, the name of the
                executable file is used as the window title instead. This parameter must be
                <see langword="null"/> for GUI or console processes that do not create a
                new console window.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.StartupInfo.dwX">
            <summary>
                If dwFlags specifies <see cref="F:SilDev.WinApi.StartFlags.UsePosition"/>, this member is
                the x offset of the upper left corner of a window if a new window is
                created, in pixels. Otherwise, this member is ignored.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.StartupInfo.dwY">
            <summary>
                If dwFlags specifies <see cref="F:SilDev.WinApi.StartFlags.UsePosition"/>, this member is
                the y offset of the upper left corner of a window if a new window is
                created, in pixels. Otherwise, this member is ignored.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.StartupInfo.dwXSize">
            <summary>
                If dwFlags specifies <see cref="F:SilDev.WinApi.StartFlags.UseSize"/>, this member is the
                width of the window if a new window is created, in pixels. Otherwise, this
                member is ignored.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.StartupInfo.dwYSize">
            <summary>
                If dwFlags specifies <see cref="F:SilDev.WinApi.StartFlags.UseSize"/>, this member is the
                height of the window if a new window is created, in pixels. Otherwise, this
                member is ignored.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.StartupInfo.dwXCountChars">
            <summary>
                If dwFlags specifies <see cref="F:SilDev.WinApi.StartFlags.UseCountChars"/>, if a new
                console window is created in a console process, this member specifies the
                screen buffer width, in character columns. Otherwise, this member is
                ignored.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.StartupInfo.dwYCountChars">
            <summary>
                If dwFlags specifies <see cref="F:SilDev.WinApi.StartFlags.UseCountChars"/>, if a new
                console window is created in a console process, this member specifies the
                screen buffer height, in character rows. Otherwise, this member is ignored.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.StartupInfo.dwFillAttribute">
            <summary>
                If dwFlags specifies <see cref="F:SilDev.WinApi.StartFlags.UseFillAttribute"/>, this member
                is the initial text and background colors if a new console window is
                created in a console application. Otherwise, this member is ignored.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.StartupInfo.dwFlags">
            <summary>
                A bitfield that determines whether certain <see cref="T:SilDev.WinApi.StartupInfo"/>
                members are used when the process creates a window.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.StartupInfo.wShowWindow">
            <summary>
                If dwFlags specifies <see cref="F:SilDev.WinApi.StartFlags.UseShowWindow"/>.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.StartupInfo.cbReserved2">
            <summary>
                Reserved for use by the C Run-time; must be zero.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.StartupInfo.lpReserved2">
            <summary>
                Reserved for use by the C Run-time; must be zero.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.StartupInfo.hStdInput">
            <summary>
                If dwFlags specifies <see cref="F:SilDev.WinApi.StartFlags.UseStdHandles"/>, this member is
                the standard input handle for the process. If
                <see cref="F:SilDev.WinApi.StartFlags.UseStdHandles"/> is not specified, the default for
                standard input is the keyboard buffer.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.StartupInfo.hStdOutput">
            <summary>
                If dwFlags specifies <see cref="F:SilDev.WinApi.StartFlags.UseStdHandles"/>, this member is
                the standard output handle for the process. Otherwise, this member is
                ignored and the default for standard output is the console window's buffer.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.StartupInfo.hStdError">
            <summary>
                If dwFlags specifies <see cref="F:SilDev.WinApi.StartFlags.UseStdHandles"/>, this member is
                the standard error handle for the process. Otherwise, this member is
                ignored and the default for standard error is the console window's buffer.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.DwmColorizationParams">
            <summary>
                Contains information about the colorization of Windows.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.RmProcessInfo">
            <summary>
                Describes an application that is to be registered with the Restart Manager.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.RmProcessInfo.Process">
            <summary>
                Contains an RM_UNIQUE_PROCESS structure that uniquely identifies the
                application by its PID and the time the process began.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.RmProcessInfo.strAppName">
            <summary>
                If the process is a service, this parameter returns the long name for the
                service. If the process is not a service, this parameter returns the
                user-friendly name for the application. If the process is a critical
                process, and the installer is run with elevated privileges, this parameter
                returns the name of the executable file of the critical process. If the
                process is a critical process, and the installer is run as a service, this
                parameter returns the long name of the critical process.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.RmProcessInfo.strServiceShortName">
            <summary>
                If the process is a service, this is the short name for the service. This
                member is not used if the process is not a service.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.RmProcessInfo.ApplicationType">
            <summary>
                Contains an RM_APP_TYPE enumeration value that specifies the type of
                application as RmUnknownApp, RmMainWindow, RmOtherWindow, RmService,
                RmExplorer or RmCritical.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.RmProcessInfo.AppStatus">
            <summary>
                Contains a bit mask that describes the current status of the application.
                See the RM_APP_STATUS enumeration.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.RmProcessInfo.TSSessionId">
            <summary>
                Contains the Terminal Services session ID of the process. If the terminal
                session of the process cannot be determined, the value of this member is
                set to RM_INVALID_SESSION (-1). This member is not used if the process is a
                service or a system critical process.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.RmProcessInfo.bRestartable">
            <summary>
                <see langword="true"/> if the application can be restarted by the Restart
                Manager; otherwise, <see langword="false"/>. This member is always
                <see langword="true"/> if the process is a service. This member is always
                <see langword="false"/> if the process is a critical system process.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.RmUniqueProcess">
            <summary>
                Uniquely identifies a process by its PID and the time the process began. An
                array of RM_UNIQUE_PROCESS structures can be passed to the
                RmRegisterResources function.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.RmUniqueProcess.dwProcessId">
            <summary>
                The product identifier (PID).
            </summary>
        </member>
        <member name="F:SilDev.WinApi.RmUniqueProcess.ProcessStartTime">
            <summary>
                The creation time of the process. The time is provided as a FILETIME
                structure that is returned by the lpCreationTime parameter of the
                GetProcessTimes function.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.ShFileInfo">
            <summary>
                Contains information about a file object.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ShFileInfo.hIcon">
            <summary>
                A handle to the icon that represents the file. You are responsible for
                destroying this handle with DestroyIcon when you no longer need it.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ShFileInfo.iIcon">
            <summary>
                The index of the icon image within the system image list.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ShFileInfo.dwAttributes">
            <summary>
                An array of values that indicates the attributes of the file object. For
                information about these values, see the IShellFolder::GetAttributesOf
                method.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ShFileInfo.szDisplayName">
            <summary>
                A string that contains the name of the file as it appears in the Windows
                Shell, or the path and file name of the file that contains the icon
                representing the file.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ShFileInfo.szTypeName">
            <summary>
                A string that describes the type of file.
            </summary>
        </member>
    </members>
</doc>
